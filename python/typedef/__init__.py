# Code generated by jtd-codegen for Python v0.3.1

import re
from dataclasses import dataclass
from datetime import datetime, timedelta, timezone
from typing import Any, Dict, List, Optional, Union, get_args, get_origin


@dataclass
class Senzingsdk:
    value: 'Any'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Senzingsdk':
        return cls(_from_json_data(Any, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class AdditionalScores:
    full_score: 'int'
    generation_match: 'int'
    gnr_fn: 'int'
    gnr_gn: 'int'
    gnr_on: 'int'
    gnr_sn: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'AdditionalScores':
        return cls(
            _from_json_data(int, data.get("FULL_SCORE")),
            _from_json_data(int, data.get("GENERATION_MATCH")),
            _from_json_data(int, data.get("GNR_FN")),
            _from_json_data(int, data.get("GNR_GN")),
            _from_json_data(int, data.get("GNR_ON")),
            _from_json_data(int, data.get("GNR_SN")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FULL_SCORE"] = _to_json_data(self.full_score)
        data["GENERATION_MATCH"] = _to_json_data(self.generation_match)
        data["GNR_FN"] = _to_json_data(self.gnr_fn)
        data["GNR_GN"] = _to_json_data(self.gnr_gn)
        data["GNR_ON"] = _to_json_data(self.gnr_on)
        data["GNR_SN"] = _to_json_data(self.gnr_sn)
        return data

@dataclass
class AffectedEntity:
    entity_id: 'int'
    """
    The ENTITY_ID is the Senzing-generated identifier for the discovered entity.
    It may change when new information is added.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'AffectedEntity':
        return cls(
            _from_json_data(int, data.get("ENTITY_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ENTITY_ID"] = _to_json_data(self.entity_id)
        return data

@dataclass
class CfgAttr:
    advanced: 'str'
    attr_class: 'str'
    attr_code: 'str'
    attr_id: 'int'
    default_value: 'str'
    felem_code: 'str'
    felem_req: 'str'
    ftype_code: 'str'
    internal: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgAttr':
        return cls(
            _from_json_data(str, data.get("ADVANCED")),
            _from_json_data(str, data.get("ATTR_CLASS")),
            _from_json_data(str, data.get("ATTR_CODE")),
            _from_json_data(int, data.get("ATTR_ID")),
            _from_json_data(str, data.get("DEFAULT_VALUE")),
            _from_json_data(str, data.get("FELEM_CODE")),
            _from_json_data(str, data.get("FELEM_REQ")),
            _from_json_data(str, data.get("FTYPE_CODE")),
            _from_json_data(str, data.get("INTERNAL")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ADVANCED"] = _to_json_data(self.advanced)
        data["ATTR_CLASS"] = _to_json_data(self.attr_class)
        data["ATTR_CODE"] = _to_json_data(self.attr_code)
        data["ATTR_ID"] = _to_json_data(self.attr_id)
        data["DEFAULT_VALUE"] = _to_json_data(self.default_value)
        data["FELEM_CODE"] = _to_json_data(self.felem_code)
        data["FELEM_REQ"] = _to_json_data(self.felem_req)
        data["FTYPE_CODE"] = _to_json_data(self.ftype_code)
        data["INTERNAL"] = _to_json_data(self.internal)
        return data

@dataclass
class CfgCfbom:
    cfcall_id: 'int'
    exec_order: 'int'
    felem_id: 'int'
    ftype_id: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgCfbom':
        return cls(
            _from_json_data(int, data.get("CFCALL_ID")),
            _from_json_data(int, data.get("EXEC_ORDER")),
            _from_json_data(int, data.get("FELEM_ID")),
            _from_json_data(int, data.get("FTYPE_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CFCALL_ID"] = _to_json_data(self.cfcall_id)
        data["EXEC_ORDER"] = _to_json_data(self.exec_order)
        data["FELEM_ID"] = _to_json_data(self.felem_id)
        data["FTYPE_ID"] = _to_json_data(self.ftype_id)
        return data

@dataclass
class CfgCfcall:
    cfcall_id: 'int'
    cfunc_id: 'int'
    exec_order: 'int'
    ftype_id: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgCfcall':
        return cls(
            _from_json_data(int, data.get("CFCALL_ID")),
            _from_json_data(int, data.get("CFUNC_ID")),
            _from_json_data(int, data.get("EXEC_ORDER")),
            _from_json_data(int, data.get("FTYPE_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CFCALL_ID"] = _to_json_data(self.cfcall_id)
        data["CFUNC_ID"] = _to_json_data(self.cfunc_id)
        data["EXEC_ORDER"] = _to_json_data(self.exec_order)
        data["FTYPE_ID"] = _to_json_data(self.ftype_id)
        return data

@dataclass
class CfgCfrtn:
    cfrtn_id: 'int'
    cfunc_id: 'int'
    cfunc_rtnval: 'str'
    close_score: 'int'
    exec_order: 'int'
    ftype_id: 'int'
    likely_score: 'int'
    plausible_score: 'int'
    same_score: 'int'
    un_likely_score: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgCfrtn':
        return cls(
            _from_json_data(int, data.get("CFRTN_ID")),
            _from_json_data(int, data.get("CFUNC_ID")),
            _from_json_data(str, data.get("CFUNC_RTNVAL")),
            _from_json_data(int, data.get("CLOSE_SCORE")),
            _from_json_data(int, data.get("EXEC_ORDER")),
            _from_json_data(int, data.get("FTYPE_ID")),
            _from_json_data(int, data.get("LIKELY_SCORE")),
            _from_json_data(int, data.get("PLAUSIBLE_SCORE")),
            _from_json_data(int, data.get("SAME_SCORE")),
            _from_json_data(int, data.get("UN_LIKELY_SCORE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CFRTN_ID"] = _to_json_data(self.cfrtn_id)
        data["CFUNC_ID"] = _to_json_data(self.cfunc_id)
        data["CFUNC_RTNVAL"] = _to_json_data(self.cfunc_rtnval)
        data["CLOSE_SCORE"] = _to_json_data(self.close_score)
        data["EXEC_ORDER"] = _to_json_data(self.exec_order)
        data["FTYPE_ID"] = _to_json_data(self.ftype_id)
        data["LIKELY_SCORE"] = _to_json_data(self.likely_score)
        data["PLAUSIBLE_SCORE"] = _to_json_data(self.plausible_score)
        data["SAME_SCORE"] = _to_json_data(self.same_score)
        data["UN_LIKELY_SCORE"] = _to_json_data(self.un_likely_score)
        return data

@dataclass
class CfgCfunc:
    anon_support: 'str'
    cfunc_code: 'str'
    cfunc_desc: 'str'
    cfunc_id: 'int'
    connect_str: 'str'
    func_lib: 'str'
    func_ver: 'str'
    java_class_name: 'str'
    language: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgCfunc':
        return cls(
            _from_json_data(str, data.get("ANON_SUPPORT")),
            _from_json_data(str, data.get("CFUNC_CODE")),
            _from_json_data(str, data.get("CFUNC_DESC")),
            _from_json_data(int, data.get("CFUNC_ID")),
            _from_json_data(str, data.get("CONNECT_STR")),
            _from_json_data(str, data.get("FUNC_LIB")),
            _from_json_data(str, data.get("FUNC_VER")),
            _from_json_data(str, data.get("JAVA_CLASS_NAME")),
            _from_json_data(str, data.get("LANGUAGE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ANON_SUPPORT"] = _to_json_data(self.anon_support)
        data["CFUNC_CODE"] = _to_json_data(self.cfunc_code)
        data["CFUNC_DESC"] = _to_json_data(self.cfunc_desc)
        data["CFUNC_ID"] = _to_json_data(self.cfunc_id)
        data["CONNECT_STR"] = _to_json_data(self.connect_str)
        data["FUNC_LIB"] = _to_json_data(self.func_lib)
        data["FUNC_VER"] = _to_json_data(self.func_ver)
        data["JAVA_CLASS_NAME"] = _to_json_data(self.java_class_name)
        data["LANGUAGE"] = _to_json_data(self.language)
        return data

@dataclass
class CfgDfbom:
    dfcall_id: 'int'
    exec_order: 'int'
    felem_id: 'int'
    ftype_id: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgDfbom':
        return cls(
            _from_json_data(int, data.get("DFCALL_ID")),
            _from_json_data(int, data.get("EXEC_ORDER")),
            _from_json_data(int, data.get("FELEM_ID")),
            _from_json_data(int, data.get("FTYPE_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DFCALL_ID"] = _to_json_data(self.dfcall_id)
        data["EXEC_ORDER"] = _to_json_data(self.exec_order)
        data["FELEM_ID"] = _to_json_data(self.felem_id)
        data["FTYPE_ID"] = _to_json_data(self.ftype_id)
        return data

@dataclass
class CfgDfcall:
    dfcall_id: 'int'
    dfunc_id: 'int'
    exec_order: 'int'
    ftype_id: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgDfcall':
        return cls(
            _from_json_data(int, data.get("DFCALL_ID")),
            _from_json_data(int, data.get("DFUNC_ID")),
            _from_json_data(int, data.get("EXEC_ORDER")),
            _from_json_data(int, data.get("FTYPE_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DFCALL_ID"] = _to_json_data(self.dfcall_id)
        data["DFUNC_ID"] = _to_json_data(self.dfunc_id)
        data["EXEC_ORDER"] = _to_json_data(self.exec_order)
        data["FTYPE_ID"] = _to_json_data(self.ftype_id)
        return data

@dataclass
class CfgDfunc:
    anon_support: 'str'
    connect_str: 'str'
    dfunc_code: 'str'
    dfunc_desc: 'str'
    dfunc_id: 'int'
    func_lib: 'str'
    func_ver: 'str'
    java_class_name: 'str'
    language: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgDfunc':
        return cls(
            _from_json_data(str, data.get("ANON_SUPPORT")),
            _from_json_data(str, data.get("CONNECT_STR")),
            _from_json_data(str, data.get("DFUNC_CODE")),
            _from_json_data(str, data.get("DFUNC_DESC")),
            _from_json_data(int, data.get("DFUNC_ID")),
            _from_json_data(str, data.get("FUNC_LIB")),
            _from_json_data(str, data.get("FUNC_VER")),
            _from_json_data(str, data.get("JAVA_CLASS_NAME")),
            _from_json_data(str, data.get("LANGUAGE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ANON_SUPPORT"] = _to_json_data(self.anon_support)
        data["CONNECT_STR"] = _to_json_data(self.connect_str)
        data["DFUNC_CODE"] = _to_json_data(self.dfunc_code)
        data["DFUNC_DESC"] = _to_json_data(self.dfunc_desc)
        data["DFUNC_ID"] = _to_json_data(self.dfunc_id)
        data["FUNC_LIB"] = _to_json_data(self.func_lib)
        data["FUNC_VER"] = _to_json_data(self.func_ver)
        data["JAVA_CLASS_NAME"] = _to_json_data(self.java_class_name)
        data["LANGUAGE"] = _to_json_data(self.language)
        return data

@dataclass
class CfgDsrc:
    conversational: 'str'
    dsrc_code: 'str'
    dsrc_desc: 'str'
    dsrc_id: 'int'
    dsrc_rely: 'int'
    retention_level: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgDsrc':
        return cls(
            _from_json_data(str, data.get("CONVERSATIONAL")),
            _from_json_data(str, data.get("DSRC_CODE")),
            _from_json_data(str, data.get("DSRC_DESC")),
            _from_json_data(int, data.get("DSRC_ID")),
            _from_json_data(int, data.get("DSRC_RELY")),
            _from_json_data(str, data.get("RETENTION_LEVEL")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CONVERSATIONAL"] = _to_json_data(self.conversational)
        data["DSRC_CODE"] = _to_json_data(self.dsrc_code)
        data["DSRC_DESC"] = _to_json_data(self.dsrc_desc)
        data["DSRC_ID"] = _to_json_data(self.dsrc_id)
        data["DSRC_RELY"] = _to_json_data(self.dsrc_rely)
        data["RETENTION_LEVEL"] = _to_json_data(self.retention_level)
        return data

@dataclass
class CfgDsrcInterest:
    dsrc_id: 'int'
    interest_flag: 'str'
    max_degree: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgDsrcInterest':
        return cls(
            _from_json_data(int, data.get("DSRC_ID")),
            _from_json_data(str, data.get("INTEREST_FLAG")),
            _from_json_data(int, data.get("MAX_DEGREE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DSRC_ID"] = _to_json_data(self.dsrc_id)
        data["INTEREST_FLAG"] = _to_json_data(self.interest_flag)
        data["MAX_DEGREE"] = _to_json_data(self.max_degree)
        return data

@dataclass
class CfgEbom:
    etype_id: 'int'
    exec_order: 'int'
    ftype_id: 'int'
    utype_code: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgEbom':
        return cls(
            _from_json_data(int, data.get("ETYPE_ID")),
            _from_json_data(int, data.get("EXEC_ORDER")),
            _from_json_data(int, data.get("FTYPE_ID")),
            _from_json_data(str, data.get("UTYPE_CODE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ETYPE_ID"] = _to_json_data(self.etype_id)
        data["EXEC_ORDER"] = _to_json_data(self.exec_order)
        data["FTYPE_ID"] = _to_json_data(self.ftype_id)
        data["UTYPE_CODE"] = _to_json_data(self.utype_code)
        return data

@dataclass
class CfgEclass:
    eclass_code: 'str'
    eclass_desc: 'str'
    eclass_id: 'int'
    resolve: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgEclass':
        return cls(
            _from_json_data(str, data.get("ECLASS_CODE")),
            _from_json_data(str, data.get("ECLASS_DESC")),
            _from_json_data(int, data.get("ECLASS_ID")),
            _from_json_data(str, data.get("RESOLVE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ECLASS_CODE"] = _to_json_data(self.eclass_code)
        data["ECLASS_DESC"] = _to_json_data(self.eclass_desc)
        data["ECLASS_ID"] = _to_json_data(self.eclass_id)
        data["RESOLVE"] = _to_json_data(self.resolve)
        return data

@dataclass
class CfgEfbom:
    efcall_id: 'int'
    exec_order: 'int'
    felem_id: 'int'
    felem_req: 'str'
    ftype_id: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgEfbom':
        return cls(
            _from_json_data(int, data.get("EFCALL_ID")),
            _from_json_data(int, data.get("EXEC_ORDER")),
            _from_json_data(int, data.get("FELEM_ID")),
            _from_json_data(str, data.get("FELEM_REQ")),
            _from_json_data(int, data.get("FTYPE_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["EFCALL_ID"] = _to_json_data(self.efcall_id)
        data["EXEC_ORDER"] = _to_json_data(self.exec_order)
        data["FELEM_ID"] = _to_json_data(self.felem_id)
        data["FELEM_REQ"] = _to_json_data(self.felem_req)
        data["FTYPE_ID"] = _to_json_data(self.ftype_id)
        return data

@dataclass
class CfgEfcall:
    efcall_id: 'int'
    efeat_ftype_id: 'int'
    efunc_id: 'int'
    exec_order: 'int'
    felem_id: 'int'
    ftype_id: 'int'
    is_virtual: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgEfcall':
        return cls(
            _from_json_data(int, data.get("EFCALL_ID")),
            _from_json_data(int, data.get("EFEAT_FTYPE_ID")),
            _from_json_data(int, data.get("EFUNC_ID")),
            _from_json_data(int, data.get("EXEC_ORDER")),
            _from_json_data(int, data.get("FELEM_ID")),
            _from_json_data(int, data.get("FTYPE_ID")),
            _from_json_data(str, data.get("IS_VIRTUAL")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["EFCALL_ID"] = _to_json_data(self.efcall_id)
        data["EFEAT_FTYPE_ID"] = _to_json_data(self.efeat_ftype_id)
        data["EFUNC_ID"] = _to_json_data(self.efunc_id)
        data["EXEC_ORDER"] = _to_json_data(self.exec_order)
        data["FELEM_ID"] = _to_json_data(self.felem_id)
        data["FTYPE_ID"] = _to_json_data(self.ftype_id)
        data["IS_VIRTUAL"] = _to_json_data(self.is_virtual)
        return data

@dataclass
class CfgEfunc:
    connect_str: 'str'
    efunc_code: 'str'
    efunc_desc: 'str'
    efunc_id: 'int'
    func_lib: 'str'
    func_ver: 'str'
    java_class_name: 'str'
    language: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgEfunc':
        return cls(
            _from_json_data(str, data.get("CONNECT_STR")),
            _from_json_data(str, data.get("EFUNC_CODE")),
            _from_json_data(str, data.get("EFUNC_DESC")),
            _from_json_data(int, data.get("EFUNC_ID")),
            _from_json_data(str, data.get("FUNC_LIB")),
            _from_json_data(str, data.get("FUNC_VER")),
            _from_json_data(str, data.get("JAVA_CLASS_NAME")),
            _from_json_data(str, data.get("LANGUAGE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CONNECT_STR"] = _to_json_data(self.connect_str)
        data["EFUNC_CODE"] = _to_json_data(self.efunc_code)
        data["EFUNC_DESC"] = _to_json_data(self.efunc_desc)
        data["EFUNC_ID"] = _to_json_data(self.efunc_id)
        data["FUNC_LIB"] = _to_json_data(self.func_lib)
        data["FUNC_VER"] = _to_json_data(self.func_ver)
        data["JAVA_CLASS_NAME"] = _to_json_data(self.java_class_name)
        data["LANGUAGE"] = _to_json_data(self.language)
        return data

@dataclass
class CfgErfrag:
    erfrag_code: 'str'
    erfrag_depends: 'str'
    erfrag_desc: 'str'
    erfrag_id: 'int'
    erfrag_source: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgErfrag':
        return cls(
            _from_json_data(str, data.get("ERFRAG_CODE")),
            _from_json_data(str, data.get("ERFRAG_DEPENDS")),
            _from_json_data(str, data.get("ERFRAG_DESC")),
            _from_json_data(int, data.get("ERFRAG_ID")),
            _from_json_data(str, data.get("ERFRAG_SOURCE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ERFRAG_CODE"] = _to_json_data(self.erfrag_code)
        data["ERFRAG_DEPENDS"] = _to_json_data(self.erfrag_depends)
        data["ERFRAG_DESC"] = _to_json_data(self.erfrag_desc)
        data["ERFRAG_ID"] = _to_json_data(self.erfrag_id)
        data["ERFRAG_SOURCE"] = _to_json_data(self.erfrag_source)
        return data

@dataclass
class CfgErrule:
    disq_erfrag_code: 'str'
    errule_code: 'str'
    """
    Identifier of the entity resolution rule that was triggered.
    """

    errule_desc: 'str'
    errule_id: 'int'
    errule_tier: 'int'
    qual_erfrag_code: 'str'
    ref_score: 'int'
    relate: 'str'
    resolve: 'str'
    rtype_id: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgErrule':
        return cls(
            _from_json_data(str, data.get("DISQ_ERFRAG_CODE")),
            _from_json_data(str, data.get("ERRULE_CODE")),
            _from_json_data(str, data.get("ERRULE_DESC")),
            _from_json_data(int, data.get("ERRULE_ID")),
            _from_json_data(int, data.get("ERRULE_TIER")),
            _from_json_data(str, data.get("QUAL_ERFRAG_CODE")),
            _from_json_data(int, data.get("REF_SCORE")),
            _from_json_data(str, data.get("RELATE")),
            _from_json_data(str, data.get("RESOLVE")),
            _from_json_data(int, data.get("RTYPE_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DISQ_ERFRAG_CODE"] = _to_json_data(self.disq_erfrag_code)
        data["ERRULE_CODE"] = _to_json_data(self.errule_code)
        data["ERRULE_DESC"] = _to_json_data(self.errule_desc)
        data["ERRULE_ID"] = _to_json_data(self.errule_id)
        data["ERRULE_TIER"] = _to_json_data(self.errule_tier)
        data["QUAL_ERFRAG_CODE"] = _to_json_data(self.qual_erfrag_code)
        data["REF_SCORE"] = _to_json_data(self.ref_score)
        data["RELATE"] = _to_json_data(self.relate)
        data["RESOLVE"] = _to_json_data(self.resolve)
        data["RTYPE_ID"] = _to_json_data(self.rtype_id)
        return data

@dataclass
class CfgEtype:
    eclass_id: 'int'
    etype_code: 'str'
    etype_desc: 'str'
    etype_id: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgEtype':
        return cls(
            _from_json_data(int, data.get("ECLASS_ID")),
            _from_json_data(str, data.get("ETYPE_CODE")),
            _from_json_data(str, data.get("ETYPE_DESC")),
            _from_json_data(int, data.get("ETYPE_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ECLASS_ID"] = _to_json_data(self.eclass_id)
        data["ETYPE_CODE"] = _to_json_data(self.etype_code)
        data["ETYPE_DESC"] = _to_json_data(self.etype_desc)
        data["ETYPE_ID"] = _to_json_data(self.etype_id)
        return data

@dataclass
class CfgFbom:
    derived: 'str'
    display_delim: 'str'
    display_level: 'int'
    exec_order: 'int'
    felem_id: 'int'
    ftype_id: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgFbom':
        return cls(
            _from_json_data(str, data.get("DERIVED")),
            _from_json_data(str, data.get("DISPLAY_DELIM")),
            _from_json_data(int, data.get("DISPLAY_LEVEL")),
            _from_json_data(int, data.get("EXEC_ORDER")),
            _from_json_data(int, data.get("FELEM_ID")),
            _from_json_data(int, data.get("FTYPE_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DERIVED"] = _to_json_data(self.derived)
        data["DISPLAY_DELIM"] = _to_json_data(self.display_delim)
        data["DISPLAY_LEVEL"] = _to_json_data(self.display_level)
        data["EXEC_ORDER"] = _to_json_data(self.exec_order)
        data["FELEM_ID"] = _to_json_data(self.felem_id)
        data["FTYPE_ID"] = _to_json_data(self.ftype_id)
        return data

@dataclass
class CfgFbovr:
    eclass_id: 'int'
    ftype_excl: 'str'
    ftype_freq: 'str'
    ftype_id: 'int'
    ftype_stab: 'str'
    utype_code: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgFbovr':
        return cls(
            _from_json_data(int, data.get("ECLASS_ID")),
            _from_json_data(str, data.get("FTYPE_EXCL")),
            _from_json_data(str, data.get("FTYPE_FREQ")),
            _from_json_data(int, data.get("FTYPE_ID")),
            _from_json_data(str, data.get("FTYPE_STAB")),
            _from_json_data(str, data.get("UTYPE_CODE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ECLASS_ID"] = _to_json_data(self.eclass_id)
        data["FTYPE_EXCL"] = _to_json_data(self.ftype_excl)
        data["FTYPE_FREQ"] = _to_json_data(self.ftype_freq)
        data["FTYPE_ID"] = _to_json_data(self.ftype_id)
        data["FTYPE_STAB"] = _to_json_data(self.ftype_stab)
        data["UTYPE_CODE"] = _to_json_data(self.utype_code)
        return data

@dataclass
class CfgFclass:
    fclass_code: 'str'
    fclass_desc: 'str'
    fclass_id: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgFclass':
        return cls(
            _from_json_data(str, data.get("FCLASS_CODE")),
            _from_json_data(str, data.get("FCLASS_DESC")),
            _from_json_data(int, data.get("FCLASS_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FCLASS_CODE"] = _to_json_data(self.fclass_code)
        data["FCLASS_DESC"] = _to_json_data(self.fclass_desc)
        data["FCLASS_ID"] = _to_json_data(self.fclass_id)
        return data

@dataclass
class CfgFelem:
    data_type: 'str'
    felem_code: 'str'
    felem_desc: 'str'
    felem_id: 'int'
    tokenize: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgFelem':
        return cls(
            _from_json_data(str, data.get("DATA_TYPE")),
            _from_json_data(str, data.get("FELEM_CODE")),
            _from_json_data(str, data.get("FELEM_DESC")),
            _from_json_data(int, data.get("FELEM_ID")),
            _from_json_data(str, data.get("TOKENIZE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DATA_TYPE"] = _to_json_data(self.data_type)
        data["FELEM_CODE"] = _to_json_data(self.felem_code)
        data["FELEM_DESC"] = _to_json_data(self.felem_desc)
        data["FELEM_ID"] = _to_json_data(self.felem_id)
        data["TOKENIZE"] = _to_json_data(self.tokenize)
        return data

@dataclass
class CfgFtype:
    anonymize: 'str'
    derivation: 'str'
    derived: 'str'
    fclass_id: 'int'
    ftype_code: 'str'
    ftype_desc: 'str'
    ftype_excl: 'str'
    ftype_freq: 'str'
    ftype_id: 'int'
    ftype_stab: 'str'
    persist_history: 'str'
    rtype_id: 'int'
    show_in_match_key: 'str'
    used_for_cand: 'str'
    version: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgFtype':
        return cls(
            _from_json_data(str, data.get("ANONYMIZE")),
            _from_json_data(str, data.get("DERIVATION")),
            _from_json_data(str, data.get("DERIVED")),
            _from_json_data(int, data.get("FCLASS_ID")),
            _from_json_data(str, data.get("FTYPE_CODE")),
            _from_json_data(str, data.get("FTYPE_DESC")),
            _from_json_data(str, data.get("FTYPE_EXCL")),
            _from_json_data(str, data.get("FTYPE_FREQ")),
            _from_json_data(int, data.get("FTYPE_ID")),
            _from_json_data(str, data.get("FTYPE_STAB")),
            _from_json_data(str, data.get("PERSIST_HISTORY")),
            _from_json_data(int, data.get("RTYPE_ID")),
            _from_json_data(str, data.get("SHOW_IN_MATCH_KEY")),
            _from_json_data(str, data.get("USED_FOR_CAND")),
            _from_json_data(int, data.get("VERSION")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ANONYMIZE"] = _to_json_data(self.anonymize)
        data["DERIVATION"] = _to_json_data(self.derivation)
        data["DERIVED"] = _to_json_data(self.derived)
        data["FCLASS_ID"] = _to_json_data(self.fclass_id)
        data["FTYPE_CODE"] = _to_json_data(self.ftype_code)
        data["FTYPE_DESC"] = _to_json_data(self.ftype_desc)
        data["FTYPE_EXCL"] = _to_json_data(self.ftype_excl)
        data["FTYPE_FREQ"] = _to_json_data(self.ftype_freq)
        data["FTYPE_ID"] = _to_json_data(self.ftype_id)
        data["FTYPE_STAB"] = _to_json_data(self.ftype_stab)
        data["PERSIST_HISTORY"] = _to_json_data(self.persist_history)
        data["RTYPE_ID"] = _to_json_data(self.rtype_id)
        data["SHOW_IN_MATCH_KEY"] = _to_json_data(self.show_in_match_key)
        data["USED_FOR_CAND"] = _to_json_data(self.used_for_cand)
        data["VERSION"] = _to_json_data(self.version)
        return data

@dataclass
class CfgGenericThreshold:
    behavior: 'str'
    candidate_cap: 'int'
    ftype_id: 'int'
    gplan_id: 'int'
    scoring_cap: 'int'
    send_to_redo: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgGenericThreshold':
        return cls(
            _from_json_data(str, data.get("BEHAVIOR")),
            _from_json_data(int, data.get("CANDIDATE_CAP")),
            _from_json_data(int, data.get("FTYPE_ID")),
            _from_json_data(int, data.get("GPLAN_ID")),
            _from_json_data(int, data.get("SCORING_CAP")),
            _from_json_data(str, data.get("SEND_TO_REDO")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["BEHAVIOR"] = _to_json_data(self.behavior)
        data["CANDIDATE_CAP"] = _to_json_data(self.candidate_cap)
        data["FTYPE_ID"] = _to_json_data(self.ftype_id)
        data["GPLAN_ID"] = _to_json_data(self.gplan_id)
        data["SCORING_CAP"] = _to_json_data(self.scoring_cap)
        data["SEND_TO_REDO"] = _to_json_data(self.send_to_redo)
        return data

@dataclass
class CfgGplan:
    gplan_code: 'str'
    gplan_desc: 'str'
    gplan_id: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgGplan':
        return cls(
            _from_json_data(str, data.get("GPLAN_CODE")),
            _from_json_data(str, data.get("GPLAN_DESC")),
            _from_json_data(int, data.get("GPLAN_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["GPLAN_CODE"] = _to_json_data(self.gplan_code)
        data["GPLAN_DESC"] = _to_json_data(self.gplan_desc)
        data["GPLAN_ID"] = _to_json_data(self.gplan_id)
        return data

@dataclass
class CfgLens:
    lens_code: 'str'
    lens_desc: 'str'
    lens_id: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgLens':
        return cls(
            _from_json_data(str, data.get("LENS_CODE")),
            _from_json_data(str, data.get("LENS_DESC")),
            _from_json_data(int, data.get("LENS_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["LENS_CODE"] = _to_json_data(self.lens_code)
        data["LENS_DESC"] = _to_json_data(self.lens_desc)
        data["LENS_ID"] = _to_json_data(self.lens_id)
        return data

@dataclass
class CfgLensrl:
    value: 'List[Fixme]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgLensrl':
        return cls(_from_json_data(List[Fixme], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class CfgRclass:
    is_disclosed: 'str'
    """
    Indicates if this is a disclosed relationship.
    """

    rclass_code: 'str'
    rclass_desc: 'str'
    rclass_id: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgRclass':
        return cls(
            _from_json_data(str, data.get("IS_DISCLOSED")),
            _from_json_data(str, data.get("RCLASS_CODE")),
            _from_json_data(str, data.get("RCLASS_DESC")),
            _from_json_data(int, data.get("RCLASS_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["IS_DISCLOSED"] = _to_json_data(self.is_disclosed)
        data["RCLASS_CODE"] = _to_json_data(self.rclass_code)
        data["RCLASS_DESC"] = _to_json_data(self.rclass_desc)
        data["RCLASS_ID"] = _to_json_data(self.rclass_id)
        return data

@dataclass
class CfgRtype:
    break_res: 'str'
    rclass_id: 'int'
    rel_strength: 'int'
    rtype_code: 'str'
    rtype_desc: 'str'
    rtype_id: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgRtype':
        return cls(
            _from_json_data(str, data.get("BREAK_RES")),
            _from_json_data(int, data.get("RCLASS_ID")),
            _from_json_data(int, data.get("REL_STRENGTH")),
            _from_json_data(str, data.get("RTYPE_CODE")),
            _from_json_data(str, data.get("RTYPE_DESC")),
            _from_json_data(int, data.get("RTYPE_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["BREAK_RES"] = _to_json_data(self.break_res)
        data["RCLASS_ID"] = _to_json_data(self.rclass_id)
        data["REL_STRENGTH"] = _to_json_data(self.rel_strength)
        data["RTYPE_CODE"] = _to_json_data(self.rtype_code)
        data["RTYPE_DESC"] = _to_json_data(self.rtype_desc)
        data["RTYPE_ID"] = _to_json_data(self.rtype_id)
        return data

@dataclass
class CfgSfcall:
    exec_order: 'int'
    felem_id: 'int'
    ftype_id: 'int'
    sfcall_id: 'int'
    sfunc_id: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgSfcall':
        return cls(
            _from_json_data(int, data.get("EXEC_ORDER")),
            _from_json_data(int, data.get("FELEM_ID")),
            _from_json_data(int, data.get("FTYPE_ID")),
            _from_json_data(int, data.get("SFCALL_ID")),
            _from_json_data(int, data.get("SFUNC_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["EXEC_ORDER"] = _to_json_data(self.exec_order)
        data["FELEM_ID"] = _to_json_data(self.felem_id)
        data["FTYPE_ID"] = _to_json_data(self.ftype_id)
        data["SFCALL_ID"] = _to_json_data(self.sfcall_id)
        data["SFUNC_ID"] = _to_json_data(self.sfunc_id)
        return data

@dataclass
class CfgSfunc:
    connect_str: 'str'
    func_lib: 'str'
    func_ver: 'str'
    java_class_name: 'str'
    language: 'str'
    sfunc_code: 'str'
    sfunc_desc: 'str'
    sfunc_id: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgSfunc':
        return cls(
            _from_json_data(str, data.get("CONNECT_STR")),
            _from_json_data(str, data.get("FUNC_LIB")),
            _from_json_data(str, data.get("FUNC_VER")),
            _from_json_data(str, data.get("JAVA_CLASS_NAME")),
            _from_json_data(str, data.get("LANGUAGE")),
            _from_json_data(str, data.get("SFUNC_CODE")),
            _from_json_data(str, data.get("SFUNC_DESC")),
            _from_json_data(int, data.get("SFUNC_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CONNECT_STR"] = _to_json_data(self.connect_str)
        data["FUNC_LIB"] = _to_json_data(self.func_lib)
        data["FUNC_VER"] = _to_json_data(self.func_ver)
        data["JAVA_CLASS_NAME"] = _to_json_data(self.java_class_name)
        data["LANGUAGE"] = _to_json_data(self.language)
        data["SFUNC_CODE"] = _to_json_data(self.sfunc_code)
        data["SFUNC_DESC"] = _to_json_data(self.sfunc_desc)
        data["SFUNC_ID"] = _to_json_data(self.sfunc_id)
        return data

@dataclass
class ConfigBaseVersion:
    build_date: 'str'
    build_number: 'str'
    build_version: 'str'
    compatibility_version: 'CompatibilityVersion'
    product_name: 'str'
    version: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'ConfigBaseVersion':
        return cls(
            _from_json_data(str, data.get("BUILD_DATE")),
            _from_json_data(str, data.get("BUILD_NUMBER")),
            _from_json_data(str, data.get("BUILD_VERSION")),
            _from_json_data(CompatibilityVersion, data.get("COMPATIBILITY_VERSION")),
            _from_json_data(str, data.get("PRODUCT_NAME")),
            _from_json_data(str, data.get("VERSION")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["BUILD_DATE"] = _to_json_data(self.build_date)
        data["BUILD_NUMBER"] = _to_json_data(self.build_number)
        data["BUILD_VERSION"] = _to_json_data(self.build_version)
        data["COMPATIBILITY_VERSION"] = _to_json_data(self.compatibility_version)
        data["PRODUCT_NAME"] = _to_json_data(self.product_name)
        data["VERSION"] = _to_json_data(self.version)
        return data

@dataclass
class Caches:
    lib_feat_cache_hit: 'int'
    lib_feat_cache_miss: 'int'
    lib_feat_insert: 'int'
    res_feat_stat_cache_hit: 'int'
    res_feat_stat_cache_miss: 'int'
    res_feat_stat_insert: 'int'
    res_feat_stat_update_attempt: 'int'
    res_feat_stat_update_fail: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Caches':
        return cls(
            _from_json_data(int, data.get("libFeatCacheHit")),
            _from_json_data(int, data.get("libFeatCacheMiss")),
            _from_json_data(int, data.get("libFeatInsert")),
            _from_json_data(int, data.get("resFeatStatCacheHit")),
            _from_json_data(int, data.get("resFeatStatCacheMiss")),
            _from_json_data(int, data.get("resFeatStatInsert")),
            _from_json_data(int, data.get("resFeatStatUpdateAttempt")),
            _from_json_data(int, data.get("resFeatStatUpdateFail")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["libFeatCacheHit"] = _to_json_data(self.lib_feat_cache_hit)
        data["libFeatCacheMiss"] = _to_json_data(self.lib_feat_cache_miss)
        data["libFeatInsert"] = _to_json_data(self.lib_feat_insert)
        data["resFeatStatCacheHit"] = _to_json_data(self.res_feat_stat_cache_hit)
        data["resFeatStatCacheMiss"] = _to_json_data(self.res_feat_stat_cache_miss)
        data["resFeatStatInsert"] = _to_json_data(self.res_feat_stat_insert)
        data["resFeatStatUpdateAttempt"] = _to_json_data(self.res_feat_stat_update_attempt)
        data["resFeatStatUpdateFail"] = _to_json_data(self.res_feat_stat_update_fail)
        return data

@dataclass
class CandidateKeysForMatchInfo:
    value: 'Dict[str, List[MatchInfoForAttribute]]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CandidateKeysForMatchInfo':
        return cls(_from_json_data(Dict[str, List[MatchInfoForAttribute]], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class CandidateKeysForSearchStatistic:
    feature_types: 'List[FeatureType]'
    summary: 'Summary'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CandidateKeysForSearchStatistic':
        return cls(
            _from_json_data(List[FeatureType], data.get("FEATURE_TYPES")),
            _from_json_data(Summary, data.get("SUMMARY")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FEATURE_TYPES"] = _to_json_data(self.feature_types)
        data["SUMMARY"] = _to_json_data(self.summary)
        return data

@dataclass
class Candidates:
    candidate_builders: 'Dict[str, int]'
    suppressed_candidate_builders: 'Dict[str, int]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Candidates':
        return cls(
            _from_json_data(Dict[str, int], data.get("candidateBuilders")),
            _from_json_data(Dict[str, int], data.get("suppressedCandidateBuilders")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["candidateBuilders"] = _to_json_data(self.candidate_builders)
        data["suppressedCandidateBuilders"] = _to_json_data(self.suppressed_candidate_builders)
        return data

@dataclass
class CompatibilityVersion:
    config_version: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CompatibilityVersion':
        return cls(
            _from_json_data(str, data.get("CONFIG_VERSION")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CONFIG_VERSION"] = _to_json_data(self.config_version)
        return data

@dataclass
class Config:
    config_comments: 'str'
    config_id: 'int'
    sys_create_dt: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Config':
        return cls(
            _from_json_data(str, data.get("CONFIG_COMMENTS")),
            _from_json_data(int, data.get("CONFIG_ID")),
            _from_json_data(str, data.get("SYS_CREATE_DT")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CONFIG_COMMENTS"] = _to_json_data(self.config_comments)
        data["CONFIG_ID"] = _to_json_data(self.config_id)
        data["SYS_CREATE_DT"] = _to_json_data(self.sys_create_dt)
        return data

@dataclass
class Confirmation:
    additional_scores: 'AdditionalScores'
    candidate_feat_desc: 'str'
    candidate_feat_id: 'int'
    candidate_feat_usage_type: 'str'
    ftype_code: 'str'
    inbound_feat_desc: 'str'
    inbound_feat_id: 'int'
    inbound_feat_usage_type: 'str'
    score: 'int'
    score_behavior: 'str'
    score_bucket: 'str'
    source: 'str'
    token: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Confirmation':
        return cls(
            _from_json_data(AdditionalScores, data.get("ADDITIONAL_SCORES")),
            _from_json_data(str, data.get("CANDIDATE_FEAT_DESC")),
            _from_json_data(int, data.get("CANDIDATE_FEAT_ID")),
            _from_json_data(str, data.get("CANDIDATE_FEAT_USAGE_TYPE")),
            _from_json_data(str, data.get("FTYPE_CODE")),
            _from_json_data(str, data.get("INBOUND_FEAT_DESC")),
            _from_json_data(int, data.get("INBOUND_FEAT_ID")),
            _from_json_data(str, data.get("INBOUND_FEAT_USAGE_TYPE")),
            _from_json_data(int, data.get("SCORE")),
            _from_json_data(str, data.get("SCORE_BEHAVIOR")),
            _from_json_data(str, data.get("SCORE_BUCKET")),
            _from_json_data(str, data.get("SOURCE")),
            _from_json_data(str, data.get("TOKEN")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ADDITIONAL_SCORES"] = _to_json_data(self.additional_scores)
        data["CANDIDATE_FEAT_DESC"] = _to_json_data(self.candidate_feat_desc)
        data["CANDIDATE_FEAT_ID"] = _to_json_data(self.candidate_feat_id)
        data["CANDIDATE_FEAT_USAGE_TYPE"] = _to_json_data(self.candidate_feat_usage_type)
        data["FTYPE_CODE"] = _to_json_data(self.ftype_code)
        data["INBOUND_FEAT_DESC"] = _to_json_data(self.inbound_feat_desc)
        data["INBOUND_FEAT_ID"] = _to_json_data(self.inbound_feat_id)
        data["INBOUND_FEAT_USAGE_TYPE"] = _to_json_data(self.inbound_feat_usage_type)
        data["SCORE"] = _to_json_data(self.score)
        data["SCORE_BEHAVIOR"] = _to_json_data(self.score_behavior)
        data["SCORE_BUCKET"] = _to_json_data(self.score_bucket)
        data["SOURCE"] = _to_json_data(self.source)
        data["TOKEN"] = _to_json_data(self.token)
        return data

@dataclass
class Contention:
    feature: 'Fixme'
    res_ent: 'Fixme'
    valuelatch: 'Fixme'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Contention':
        return cls(
            _from_json_data(Fixme, data.get("feature")),
            _from_json_data(Fixme, data.get("resEnt")),
            _from_json_data(Fixme, data.get("valuelatch")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["feature"] = _to_json_data(self.feature)
        data["resEnt"] = _to_json_data(self.res_ent)
        data["valuelatch"] = _to_json_data(self.valuelatch)
        return data

@dataclass
class CurrResources:
    active_threads: 'int'
    available_memory: 'str'
    process_memory: 'str'
    worker_threads: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CurrResources':
        return cls(
            _from_json_data(int, data.get("activeThreads")),
            _from_json_data(str, data.get("availableMemory")),
            _from_json_data(str, data.get("processMemory")),
            _from_json_data(int, data.get("workerThreads")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["activeThreads"] = _to_json_data(self.active_threads)
        data["availableMemory"] = _to_json_data(self.available_memory)
        data["processMemory"] = _to_json_data(self.process_memory)
        data["workerThreads"] = _to_json_data(self.worker_threads)
        return data

@dataclass
class DataSource:
    dsrc_code: 'str'
    """
    The text representation of the datasource.
    """

    dsrc_id: 'int'
    """
    The unique identifier of the datasource.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'DataSource':
        return cls(
            _from_json_data(str, data.get("DSRC_CODE")),
            _from_json_data(int, data.get("DSRC_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DSRC_CODE"] = _to_json_data(self.dsrc_code)
        data["DSRC_ID"] = _to_json_data(self.dsrc_id)
        return data

@dataclass
class DisclosedRelationsForMatchInfo:
    rel_anchor: 'List[RelAnchor]'
    rel_link: 'List[RelLink]'
    rel_pointer: 'List[RelPointer]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'DisclosedRelationsForMatchInfo':
        return cls(
            _from_json_data(List[RelAnchor], data.get("REL_ANCHOR")),
            _from_json_data(List[RelLink], data.get("REL_LINK")),
            _from_json_data(List[RelPointer], data.get("REL_POINTER")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["REL_ANCHOR"] = _to_json_data(self.rel_anchor)
        data["REL_LINK"] = _to_json_data(self.rel_link)
        data["REL_POINTER"] = _to_json_data(self.rel_pointer)
        return data

@dataclass
class DisclosedRelationsForMatchInfoForWhy:
    domain: 'str'
    feat_desc: 'str'
    """
    Describes the attributes that make up the feature.
    """

    feat_id: 'int'
    feat_usage_type: 'str'
    linked_feat_desc: 'str'
    linked_feat_id: 'int'
    linked_feat_type: 'str'
    rel_anchor: 'List[RelAnchor]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'DisclosedRelationsForMatchInfoForWhy':
        return cls(
            _from_json_data(str, data.get("DOMAIN")),
            _from_json_data(str, data.get("FEAT_DESC")),
            _from_json_data(int, data.get("FEAT_ID")),
            _from_json_data(str, data.get("FEAT_USAGE_TYPE")),
            _from_json_data(str, data.get("LINKED_FEAT_DESC")),
            _from_json_data(int, data.get("LINKED_FEAT_ID")),
            _from_json_data(str, data.get("LINKED_FEAT_TYPE")),
            _from_json_data(List[RelAnchor], data.get("REL_ANCHOR")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DOMAIN"] = _to_json_data(self.domain)
        data["FEAT_DESC"] = _to_json_data(self.feat_desc)
        data["FEAT_ID"] = _to_json_data(self.feat_id)
        data["FEAT_USAGE_TYPE"] = _to_json_data(self.feat_usage_type)
        data["LINKED_FEAT_DESC"] = _to_json_data(self.linked_feat_desc)
        data["LINKED_FEAT_ID"] = _to_json_data(self.linked_feat_id)
        data["LINKED_FEAT_TYPE"] = _to_json_data(self.linked_feat_type)
        data["REL_ANCHOR"] = _to_json_data(self.rel_anchor)
        return data

@dataclass
class Entity:
    related_entities: 'List[RelatedEntity]'
    resolved_entity: 'ResolvedEntity'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Entity':
        return cls(
            _from_json_data(List[RelatedEntity], data.get("RELATED_ENTITIES")),
            _from_json_data(ResolvedEntity, data.get("RESOLVED_ENTITY")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["RELATED_ENTITIES"] = _to_json_data(self.related_entities)
        data["RESOLVED_ENTITY"] = _to_json_data(self.resolved_entity)
        return data

@dataclass
class EntityForResolvedEntity:
    related_entities: 'List[RelatedEntity]'
    resolved_entity: 'ResolvedEntity'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EntityForResolvedEntity':
        return cls(
            _from_json_data(List[RelatedEntity], data.get("RELATED_ENTITIES")),
            _from_json_data(ResolvedEntity, data.get("RESOLVED_ENTITY")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["RELATED_ENTITIES"] = _to_json_data(self.related_entities)
        data["RESOLVED_ENTITY"] = _to_json_data(self.resolved_entity)
        return data

@dataclass
class EntityForWhySearch:
    related_entities: 'List[RelatedEntity]'
    resolved_entity: 'ResolvedEntity'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EntityForWhySearch':
        return cls(
            _from_json_data(List[RelatedEntity], data.get("RELATED_ENTITIES")),
            _from_json_data(ResolvedEntity, data.get("RESOLVED_ENTITY")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["RELATED_ENTITIES"] = _to_json_data(self.related_entities)
        data["RESOLVED_ENTITY"] = _to_json_data(self.resolved_entity)
        return data

@dataclass
class EntityNetworkLink:
    errule_code: 'str'
    """
    Identifier of the entity resolution rule that was triggered.
    """

    is_ambiguous: 'int'
    """
    Indicates if this is an ambiguous relationship.
    """

    is_disclosed: 'int'
    """
    Indicates if this is a disclosed relationship.
    """

    match_key: 'str'
    """
    Representation of matched source record features.
    """

    match_level_code: 'str'
    """
    The type of match that occurred for the record.
    """

    max_entity_id: 'int'
    min_entity_id: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EntityNetworkLink':
        return cls(
            _from_json_data(str, data.get("ERRULE_CODE")),
            _from_json_data(int, data.get("IS_AMBIGUOUS")),
            _from_json_data(int, data.get("IS_DISCLOSED")),
            _from_json_data(str, data.get("MATCH_KEY")),
            _from_json_data(str, data.get("MATCH_LEVEL_CODE")),
            _from_json_data(int, data.get("MAX_ENTITY_ID")),
            _from_json_data(int, data.get("MIN_ENTITY_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ERRULE_CODE"] = _to_json_data(self.errule_code)
        data["IS_AMBIGUOUS"] = _to_json_data(self.is_ambiguous)
        data["IS_DISCLOSED"] = _to_json_data(self.is_disclosed)
        data["MATCH_KEY"] = _to_json_data(self.match_key)
        data["MATCH_LEVEL_CODE"] = _to_json_data(self.match_level_code)
        data["MAX_ENTITY_ID"] = _to_json_data(self.max_entity_id)
        data["MIN_ENTITY_ID"] = _to_json_data(self.min_entity_id)
        return data

@dataclass
class EntityPath:
    end_entity_id: 'int'
    entities: 'List[int]'
    start_entity_id: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EntityPath':
        return cls(
            _from_json_data(int, data.get("END_ENTITY_ID")),
            _from_json_data(List[int], data.get("ENTITIES")),
            _from_json_data(int, data.get("START_ENTITY_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["END_ENTITY_ID"] = _to_json_data(self.end_entity_id)
        data["ENTITIES"] = _to_json_data(self.entities)
        data["START_ENTITY_ID"] = _to_json_data(self.start_entity_id)
        return data

@dataclass
class EntityPathLink:
    errule_code: 'str'
    """
    Identifier of the entity resolution rule that was triggered.
    """

    is_ambiguous: 'int'
    """
    Indicates if this is an ambiguous relationship.
    """

    is_disclosed: 'int'
    """
    Indicates if this is a disclosed relationship.
    """

    match_key: 'str'
    """
    Representation of matched source record features.
    """

    match_level_code: 'str'
    """
    The type of match that occurred for the record.
    """

    max_entity_id: 'int'
    min_entity_id: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EntityPathLink':
        return cls(
            _from_json_data(str, data.get("ERRULE_CODE")),
            _from_json_data(int, data.get("IS_AMBIGUOUS")),
            _from_json_data(int, data.get("IS_DISCLOSED")),
            _from_json_data(str, data.get("MATCH_KEY")),
            _from_json_data(str, data.get("MATCH_LEVEL_CODE")),
            _from_json_data(int, data.get("MAX_ENTITY_ID")),
            _from_json_data(int, data.get("MIN_ENTITY_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ERRULE_CODE"] = _to_json_data(self.errule_code)
        data["IS_AMBIGUOUS"] = _to_json_data(self.is_ambiguous)
        data["IS_DISCLOSED"] = _to_json_data(self.is_disclosed)
        data["MATCH_KEY"] = _to_json_data(self.match_key)
        data["MATCH_LEVEL_CODE"] = _to_json_data(self.match_level_code)
        data["MAX_ENTITY_ID"] = _to_json_data(self.max_entity_id)
        data["MIN_ENTITY_ID"] = _to_json_data(self.min_entity_id)
        return data

@dataclass
class ExpressedFeatures:
    calls: 'List[ExpressedFeaturesCall]'
    created: 'Dict[str, int]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'ExpressedFeatures':
        return cls(
            _from_json_data(List[ExpressedFeaturesCall], data.get("calls")),
            _from_json_data(Dict[str, int], data.get("created")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["calls"] = _to_json_data(self.calls)
        data["created"] = _to_json_data(self.created)
        return data

@dataclass
class ExpressedFeaturesCall:
    efcall_id: 'int'
    efunc_code: 'str'
    num_calls: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'ExpressedFeaturesCall':
        return cls(
            _from_json_data(int, data.get("EFCALL_ID")),
            _from_json_data(str, data.get("EFUNC_CODE")),
            _from_json_data(int, data.get("numCalls")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["EFCALL_ID"] = _to_json_data(self.efcall_id)
        data["EFUNC_CODE"] = _to_json_data(self.efunc_code)
        data["numCalls"] = _to_json_data(self.num_calls)
        return data

@dataclass
class Feature:
    felem_code: 'str'
    felem_value: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Feature':
        return cls(
            _from_json_data(str, data.get("FELEM_CODE")),
            _from_json_data(str, data.get("FELEM_VALUE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FELEM_CODE"] = _to_json_data(self.felem_code)
        data["FELEM_VALUE"] = _to_json_data(self.felem_value)
        return data

@dataclass
class FeatureDescriptionValue:
    attributes: 'Dict[str, str]'
    candidate_cap_reached: 'str'
    entity_count: 'int'
    feat_desc: 'str'
    """
    Describes the attributes that make up the feature.
    """

    lib_feat_id: 'int'
    scoring_cap_reached: 'str'
    suppressed: 'str'
    used_for_cand: 'str'
    used_for_scoring: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'FeatureDescriptionValue':
        return cls(
            _from_json_data(Dict[str, str], data.get("ATTRIBUTES")),
            _from_json_data(str, data.get("CANDIDATE_CAP_REACHED")),
            _from_json_data(int, data.get("ENTITY_COUNT")),
            _from_json_data(str, data.get("FEAT_DESC")),
            _from_json_data(int, data.get("LIB_FEAT_ID")),
            _from_json_data(str, data.get("SCORING_CAP_REACHED")),
            _from_json_data(str, data.get("SUPPRESSED")),
            _from_json_data(str, data.get("USED_FOR_CAND")),
            _from_json_data(str, data.get("USED_FOR_SCORING")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ATTRIBUTES"] = _to_json_data(self.attributes)
        data["CANDIDATE_CAP_REACHED"] = _to_json_data(self.candidate_cap_reached)
        data["ENTITY_COUNT"] = _to_json_data(self.entity_count)
        data["FEAT_DESC"] = _to_json_data(self.feat_desc)
        data["LIB_FEAT_ID"] = _to_json_data(self.lib_feat_id)
        data["SCORING_CAP_REACHED"] = _to_json_data(self.scoring_cap_reached)
        data["SUPPRESSED"] = _to_json_data(self.suppressed)
        data["USED_FOR_CAND"] = _to_json_data(self.used_for_cand)
        data["USED_FOR_SCORING"] = _to_json_data(self.used_for_scoring)
        return data

@dataclass
class FeatureForAttributes:
    attributes: 'SenzingEntitySpecification'
    feat_desc: 'str'
    """
    Describes the attributes that make up the feature.
    """

    feat_desc_values: 'List[FeatureDescriptionValue]'
    """
    Describes the attributes that make up the feature.
    """

    lib_feat_id: 'int'
    usage_type: 'str'
    """
    Label to identify how some features are being used (can also change some
    features behavior).
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'FeatureForAttributes':
        return cls(
            _from_json_data(SenzingEntitySpecification, data.get("ATTRIBUTES")),
            _from_json_data(str, data.get("FEAT_DESC")),
            _from_json_data(List[FeatureDescriptionValue], data.get("FEAT_DESC_VALUES")),
            _from_json_data(int, data.get("LIB_FEAT_ID")),
            _from_json_data(str, data.get("USAGE_TYPE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ATTRIBUTES"] = _to_json_data(self.attributes)
        data["FEAT_DESC"] = _to_json_data(self.feat_desc)
        data["FEAT_DESC_VALUES"] = _to_json_data(self.feat_desc_values)
        data["LIB_FEAT_ID"] = _to_json_data(self.lib_feat_id)
        data["USAGE_TYPE"] = _to_json_data(self.usage_type)
        return data

@dataclass
class FeatureForGetEntity:
    attributes: 'List[SenzingEntitySpecification]'
    feat_desc: 'str'
    """
    Describes the attributes that make up the feature.
    """

    feat_desc_values: 'List[FeatureDescriptionValue]'
    """
    Describes the attributes that make up the feature.
    """

    lib_feat_id: 'int'
    usage_type: 'str'
    """
    Label to identify how some features are being used (can also change some
    features behavior).
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'FeatureForGetEntity':
        return cls(
            _from_json_data(List[SenzingEntitySpecification], data.get("ATTRIBUTES")),
            _from_json_data(str, data.get("FEAT_DESC")),
            _from_json_data(List[FeatureDescriptionValue], data.get("FEAT_DESC_VALUES")),
            _from_json_data(int, data.get("LIB_FEAT_ID")),
            _from_json_data(str, data.get("USAGE_TYPE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ATTRIBUTES"] = _to_json_data(self.attributes)
        data["FEAT_DESC"] = _to_json_data(self.feat_desc)
        data["FEAT_DESC_VALUES"] = _to_json_data(self.feat_desc_values)
        data["LIB_FEAT_ID"] = _to_json_data(self.lib_feat_id)
        data["USAGE_TYPE"] = _to_json_data(self.usage_type)
        return data

@dataclass
class FeatureID:
    lib_feat_id: 'int'
    usage_type: 'str'
    """
    Label to identify how some features are being used (can also change some
    features behavior).
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'FeatureID':
        return cls(
            _from_json_data(int, data.get("LIB_FEAT_ID")),
            _from_json_data(str, data.get("USAGE_TYPE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["LIB_FEAT_ID"] = _to_json_data(self.lib_feat_id)
        data["USAGE_TYPE"] = _to_json_data(self.usage_type)
        return data

@dataclass
class FeatureScoreForAttribute:
    additional_scores: 'AdditionalScores'
    candidate_feat_desc: 'str'
    candidate_feat_id: 'int'
    candidate_feat_usage_type: 'str'
    inbound_feat_desc: 'str'
    inbound_feat_id: 'int'
    inbound_feat_usage_type: 'str'
    score: 'int'
    score_behavior: 'str'
    score_bucket: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'FeatureScoreForAttribute':
        return cls(
            _from_json_data(AdditionalScores, data.get("ADDITIONAL_SCORES")),
            _from_json_data(str, data.get("CANDIDATE_FEAT_DESC")),
            _from_json_data(int, data.get("CANDIDATE_FEAT_ID")),
            _from_json_data(str, data.get("CANDIDATE_FEAT_USAGE_TYPE")),
            _from_json_data(str, data.get("INBOUND_FEAT_DESC")),
            _from_json_data(int, data.get("INBOUND_FEAT_ID")),
            _from_json_data(str, data.get("INBOUND_FEAT_USAGE_TYPE")),
            _from_json_data(int, data.get("SCORE")),
            _from_json_data(str, data.get("SCORE_BEHAVIOR")),
            _from_json_data(str, data.get("SCORE_BUCKET")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ADDITIONAL_SCORES"] = _to_json_data(self.additional_scores)
        data["CANDIDATE_FEAT_DESC"] = _to_json_data(self.candidate_feat_desc)
        data["CANDIDATE_FEAT_ID"] = _to_json_data(self.candidate_feat_id)
        data["CANDIDATE_FEAT_USAGE_TYPE"] = _to_json_data(self.candidate_feat_usage_type)
        data["INBOUND_FEAT_DESC"] = _to_json_data(self.inbound_feat_desc)
        data["INBOUND_FEAT_ID"] = _to_json_data(self.inbound_feat_id)
        data["INBOUND_FEAT_USAGE_TYPE"] = _to_json_data(self.inbound_feat_usage_type)
        data["SCORE"] = _to_json_data(self.score)
        data["SCORE_BEHAVIOR"] = _to_json_data(self.score_behavior)
        data["SCORE_BUCKET"] = _to_json_data(self.score_bucket)
        return data

@dataclass
class FeatureScores:
    value: 'Dict[str, List[FeatureScoreForAttribute]]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'FeatureScores':
        return cls(_from_json_data(Dict[str, List[FeatureScoreForAttribute]], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class FeatureType:
    found: 'int'
    ftype_code: 'str'
    generic: 'int'
    not_found: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'FeatureType':
        return cls(
            _from_json_data(int, data.get("FOUND")),
            _from_json_data(str, data.get("FTYPE_CODE")),
            _from_json_data(int, data.get("GENERIC")),
            _from_json_data(int, data.get("NOT_FOUND")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FOUND"] = _to_json_data(self.found)
        data["FTYPE_CODE"] = _to_json_data(self.ftype_code)
        data["GENERIC"] = _to_json_data(self.generic)
        data["NOT_FOUND"] = _to_json_data(self.not_found)
        return data

@dataclass
class FinalState:
    need_reevaluation: 'int'
    virtual_entities: 'List[VirtualEntitySynopsis]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'FinalState':
        return cls(
            _from_json_data(int, data.get("NEED_REEVALUATION")),
            _from_json_data(List[VirtualEntitySynopsis], data.get("VIRTUAL_ENTITIES")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["NEED_REEVALUATION"] = _to_json_data(self.need_reevaluation)
        data["VIRTUAL_ENTITIES"] = _to_json_data(self.virtual_entities)
        return data

@dataclass
class Fixme:
    fixme_key: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Fixme':
        return cls(
            _from_json_data(str, data.get("FIXME_KEY")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FIXME_KEY"] = _to_json_data(self.fixme_key)
        return data

@dataclass
class FocusRecord:
    data_source: 'str'
    """
    A label identifying the provenance of the record.
    """

    record_id: 'str'
    """
    The unique identifier within the set of records in the DATA_SOURCE.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'FocusRecord':
        return cls(
            _from_json_data(str, data.get("DATA_SOURCE")),
            _from_json_data(str, data.get("RECORD_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DATA_SOURCE"] = _to_json_data(self.data_source)
        data["RECORD_ID"] = _to_json_data(self.record_id)
        return data

@dataclass
class G2configSettings:
    metaphone_version: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'G2configSettings':
        return cls(
            _from_json_data(int, data.get("METAPHONE_VERSION")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["METAPHONE_VERSION"] = _to_json_data(self.metaphone_version)
        return data

@dataclass
class G2config:
    cfg_attr: 'List[CfgAttr]'
    cfg_cfbom: 'List[CfgCfbom]'
    cfg_cfcall: 'List[CfgCfcall]'
    cfg_cfrtn: 'List[CfgCfrtn]'
    cfg_cfunc: 'List[CfgCfunc]'
    cfg_dfbom: 'List[CfgDfbom]'
    cfg_dfcall: 'List[CfgDfcall]'
    cfg_dfunc: 'List[CfgDfunc]'
    cfg_dsrc: 'List[CfgDsrc]'
    cfg_dsrc_interest: 'List[CfgDsrcInterest]'
    cfg_ebom: 'List[CfgEbom]'
    cfg_eclass: 'List[CfgEclass]'
    cfg_efbom: 'List[CfgEfbom]'
    cfg_efcall: 'List[CfgEfcall]'
    cfg_efunc: 'List[CfgEfunc]'
    cfg_erfrag: 'List[CfgErfrag]'
    cfg_errule: 'List[CfgErrule]'
    cfg_etype: 'List[CfgEtype]'
    cfg_fbom: 'List[CfgFbom]'
    cfg_fbovr: 'List[CfgFbovr]'
    cfg_fclass: 'List[CfgFclass]'
    cfg_felem: 'List[CfgFelem]'
    cfg_ftype: 'List[CfgFtype]'
    cfg_generic_threshold: 'List[CfgGenericThreshold]'
    cfg_gplan: 'List[CfgGplan]'
    cfg_lens: 'List[CfgLens]'
    cfg_lensrl: 'List[CfgLensrl]'
    cfg_rclass: 'List[CfgRclass]'
    cfg_rtype: 'List[CfgRtype]'
    cfg_sfcall: 'List[CfgSfcall]'
    cfg_sfunc: 'List[CfgSfunc]'
    config_base_version: 'ConfigBaseVersion'
    settings: 'G2configSettings'
    sys_oom: 'List[SysOom]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'G2config':
        return cls(
            _from_json_data(List[CfgAttr], data.get("CFG_ATTR")),
            _from_json_data(List[CfgCfbom], data.get("CFG_CFBOM")),
            _from_json_data(List[CfgCfcall], data.get("CFG_CFCALL")),
            _from_json_data(List[CfgCfrtn], data.get("CFG_CFRTN")),
            _from_json_data(List[CfgCfunc], data.get("CFG_CFUNC")),
            _from_json_data(List[CfgDfbom], data.get("CFG_DFBOM")),
            _from_json_data(List[CfgDfcall], data.get("CFG_DFCALL")),
            _from_json_data(List[CfgDfunc], data.get("CFG_DFUNC")),
            _from_json_data(List[CfgDsrc], data.get("CFG_DSRC")),
            _from_json_data(List[CfgDsrcInterest], data.get("CFG_DSRC_INTEREST")),
            _from_json_data(List[CfgEbom], data.get("CFG_EBOM")),
            _from_json_data(List[CfgEclass], data.get("CFG_ECLASS")),
            _from_json_data(List[CfgEfbom], data.get("CFG_EFBOM")),
            _from_json_data(List[CfgEfcall], data.get("CFG_EFCALL")),
            _from_json_data(List[CfgEfunc], data.get("CFG_EFUNC")),
            _from_json_data(List[CfgErfrag], data.get("CFG_ERFRAG")),
            _from_json_data(List[CfgErrule], data.get("CFG_ERRULE")),
            _from_json_data(List[CfgEtype], data.get("CFG_ETYPE")),
            _from_json_data(List[CfgFbom], data.get("CFG_FBOM")),
            _from_json_data(List[CfgFbovr], data.get("CFG_FBOVR")),
            _from_json_data(List[CfgFclass], data.get("CFG_FCLASS")),
            _from_json_data(List[CfgFelem], data.get("CFG_FELEM")),
            _from_json_data(List[CfgFtype], data.get("CFG_FTYPE")),
            _from_json_data(List[CfgGenericThreshold], data.get("CFG_GENERIC_THRESHOLD")),
            _from_json_data(List[CfgGplan], data.get("CFG_GPLAN")),
            _from_json_data(List[CfgLens], data.get("CFG_LENS")),
            _from_json_data(List[CfgLensrl], data.get("CFG_LENSRL")),
            _from_json_data(List[CfgRclass], data.get("CFG_RCLASS")),
            _from_json_data(List[CfgRtype], data.get("CFG_RTYPE")),
            _from_json_data(List[CfgSfcall], data.get("CFG_SFCALL")),
            _from_json_data(List[CfgSfunc], data.get("CFG_SFUNC")),
            _from_json_data(ConfigBaseVersion, data.get("CONFIG_BASE_VERSION")),
            _from_json_data(G2configSettings, data.get("SETTINGS")),
            _from_json_data(List[SysOom], data.get("SYS_OOM")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CFG_ATTR"] = _to_json_data(self.cfg_attr)
        data["CFG_CFBOM"] = _to_json_data(self.cfg_cfbom)
        data["CFG_CFCALL"] = _to_json_data(self.cfg_cfcall)
        data["CFG_CFRTN"] = _to_json_data(self.cfg_cfrtn)
        data["CFG_CFUNC"] = _to_json_data(self.cfg_cfunc)
        data["CFG_DFBOM"] = _to_json_data(self.cfg_dfbom)
        data["CFG_DFCALL"] = _to_json_data(self.cfg_dfcall)
        data["CFG_DFUNC"] = _to_json_data(self.cfg_dfunc)
        data["CFG_DSRC"] = _to_json_data(self.cfg_dsrc)
        data["CFG_DSRC_INTEREST"] = _to_json_data(self.cfg_dsrc_interest)
        data["CFG_EBOM"] = _to_json_data(self.cfg_ebom)
        data["CFG_ECLASS"] = _to_json_data(self.cfg_eclass)
        data["CFG_EFBOM"] = _to_json_data(self.cfg_efbom)
        data["CFG_EFCALL"] = _to_json_data(self.cfg_efcall)
        data["CFG_EFUNC"] = _to_json_data(self.cfg_efunc)
        data["CFG_ERFRAG"] = _to_json_data(self.cfg_erfrag)
        data["CFG_ERRULE"] = _to_json_data(self.cfg_errule)
        data["CFG_ETYPE"] = _to_json_data(self.cfg_etype)
        data["CFG_FBOM"] = _to_json_data(self.cfg_fbom)
        data["CFG_FBOVR"] = _to_json_data(self.cfg_fbovr)
        data["CFG_FCLASS"] = _to_json_data(self.cfg_fclass)
        data["CFG_FELEM"] = _to_json_data(self.cfg_felem)
        data["CFG_FTYPE"] = _to_json_data(self.cfg_ftype)
        data["CFG_GENERIC_THRESHOLD"] = _to_json_data(self.cfg_generic_threshold)
        data["CFG_GPLAN"] = _to_json_data(self.cfg_gplan)
        data["CFG_LENS"] = _to_json_data(self.cfg_lens)
        data["CFG_LENSRL"] = _to_json_data(self.cfg_lensrl)
        data["CFG_RCLASS"] = _to_json_data(self.cfg_rclass)
        data["CFG_RTYPE"] = _to_json_data(self.cfg_rtype)
        data["CFG_SFCALL"] = _to_json_data(self.cfg_sfcall)
        data["CFG_SFUNC"] = _to_json_data(self.cfg_sfunc)
        data["CONFIG_BASE_VERSION"] = _to_json_data(self.config_base_version)
        data["SETTINGS"] = _to_json_data(self.settings)
        data["SYS_OOM"] = _to_json_data(self.sys_oom)
        return data

@dataclass
class HowResults:
    final_state: 'FinalState'
    resolution_steps: 'List[ResolutionStep]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'HowResults':
        return cls(
            _from_json_data(FinalState, data.get("FINAL_STATE")),
            _from_json_data(List[ResolutionStep], data.get("RESOLUTION_STEPS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FINAL_STATE"] = _to_json_data(self.final_state)
        data["RESOLUTION_STEPS"] = _to_json_data(self.resolution_steps)
        return data

@dataclass
class InitResources:
    available_memory: 'str'
    logical_cores: 'int'
    physical_cores: 'int'
    total_memory: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'InitResources':
        return cls(
            _from_json_data(str, data.get("availableMemory")),
            _from_json_data(int, data.get("logicalCores")),
            _from_json_data(int, data.get("physicalCores")),
            _from_json_data(str, data.get("totalMemory")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["availableMemory"] = _to_json_data(self.available_memory)
        data["logicalCores"] = _to_json_data(self.logical_cores)
        data["physicalCores"] = _to_json_data(self.physical_cores)
        data["totalMemory"] = _to_json_data(self.total_memory)
        return data

@dataclass
class InterestingEntities:
    entities: 'List[InterestingEntity]'
    notices: 'List[Notice]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'InterestingEntities':
        return cls(
            _from_json_data(List[InterestingEntity], data.get("ENTITIES")),
            _from_json_data(List[Notice], data.get("NOTICES")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ENTITIES"] = _to_json_data(self.entities)
        data["NOTICES"] = _to_json_data(self.notices)
        return data

@dataclass
class InterestingEntity:
    degrees: 'int'
    entity_id: 'int'
    """
    The ENTITY_ID is the Senzing-generated identifier for the discovered entity.
    It may change when new information is added.
    """

    flags: 'List[str]'
    sample_records: 'List[SampleRecord]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'InterestingEntity':
        return cls(
            _from_json_data(int, data.get("DEGREES")),
            _from_json_data(int, data.get("ENTITY_ID")),
            _from_json_data(List[str], data.get("FLAGS")),
            _from_json_data(List[SampleRecord], data.get("SAMPLE_RECORDS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DEGREES"] = _to_json_data(self.degrees)
        data["ENTITY_ID"] = _to_json_data(self.entity_id)
        data["FLAGS"] = _to_json_data(self.flags)
        data["SAMPLE_RECORDS"] = _to_json_data(self.sample_records)
        return data

@dataclass
class License:
    dsr_limit: 'str'
    status: 'str'
    type: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'License':
        return cls(
            _from_json_data(str, data.get("dsrLimit")),
            _from_json_data(str, data.get("status")),
            _from_json_data(str, data.get("type")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["dsrLimit"] = _to_json_data(self.dsr_limit)
        data["status"] = _to_json_data(self.status)
        data["type"] = _to_json_data(self.type)
        return data

@dataclass
class LockWaits:
    refresh_locks: 'RefreshLocks'

    @classmethod
    def from_json_data(cls, data: Any) -> 'LockWaits':
        return cls(
            _from_json_data(RefreshLocks, data.get("refreshLocks")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["refreshLocks"] = _to_json_data(self.refresh_locks)
        return data

@dataclass
class MatchInfo:
    candidate_keys: 'CandidateKeysForMatchInfo'
    disclosed_relations: 'DisclosedRelationsForMatchInfo'
    errule_code: 'str'
    """
    Identifier of the entity resolution rule that was triggered.
    """

    feature_scores: 'FeatureScores'
    match_key: 'str'
    """
    Representation of matched source record features.
    """

    match_key_details: 'MatchKeyDetails'
    match_level: 'int'
    match_level_code: 'str'
    """
    The type of match that occurred for the record.
    """

    why_errule_code: 'str'
    why_key: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'MatchInfo':
        return cls(
            _from_json_data(CandidateKeysForMatchInfo, data.get("CANDIDATE_KEYS")),
            _from_json_data(DisclosedRelationsForMatchInfo, data.get("DISCLOSED_RELATIONS")),
            _from_json_data(str, data.get("ERRULE_CODE")),
            _from_json_data(FeatureScores, data.get("FEATURE_SCORES")),
            _from_json_data(str, data.get("MATCH_KEY")),
            _from_json_data(MatchKeyDetails, data.get("MATCH_KEY_DETAILS")),
            _from_json_data(int, data.get("MATCH_LEVEL")),
            _from_json_data(str, data.get("MATCH_LEVEL_CODE")),
            _from_json_data(str, data.get("WHY_ERRULE_CODE")),
            _from_json_data(str, data.get("WHY_KEY")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CANDIDATE_KEYS"] = _to_json_data(self.candidate_keys)
        data["DISCLOSED_RELATIONS"] = _to_json_data(self.disclosed_relations)
        data["ERRULE_CODE"] = _to_json_data(self.errule_code)
        data["FEATURE_SCORES"] = _to_json_data(self.feature_scores)
        data["MATCH_KEY"] = _to_json_data(self.match_key)
        data["MATCH_KEY_DETAILS"] = _to_json_data(self.match_key_details)
        data["MATCH_LEVEL"] = _to_json_data(self.match_level)
        data["MATCH_LEVEL_CODE"] = _to_json_data(self.match_level_code)
        data["WHY_ERRULE_CODE"] = _to_json_data(self.why_errule_code)
        data["WHY_KEY"] = _to_json_data(self.why_key)
        return data

@dataclass
class MatchInfoForAttribute:
    feat_desc: 'str'
    """
    Describes the attributes that make up the feature.
    """

    feat_id: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'MatchInfoForAttribute':
        return cls(
            _from_json_data(str, data.get("FEAT_DESC")),
            _from_json_data(int, data.get("FEAT_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FEAT_DESC"] = _to_json_data(self.feat_desc)
        data["FEAT_ID"] = _to_json_data(self.feat_id)
        return data

@dataclass
class MatchInfoForWhy:
    candidate_keys: 'Dict[str, List[MatchInfoForAttribute]]'
    disclosed_relations: 'DisclosedRelationsForMatchInfoForWhy'
    feature_scores: 'FeatureScores'
    match_level_code: 'str'
    """
    The type of match that occurred for the record.
    """

    why_errule_code: 'str'
    why_key: 'str'
    why_key_details: 'WhyKeyDetails'

    @classmethod
    def from_json_data(cls, data: Any) -> 'MatchInfoForWhy':
        return cls(
            _from_json_data(Dict[str, List[MatchInfoForAttribute]], data.get("CANDIDATE_KEYS")),
            _from_json_data(DisclosedRelationsForMatchInfoForWhy, data.get("DISCLOSED_RELATIONS")),
            _from_json_data(FeatureScores, data.get("FEATURE_SCORES")),
            _from_json_data(str, data.get("MATCH_LEVEL_CODE")),
            _from_json_data(str, data.get("WHY_ERRULE_CODE")),
            _from_json_data(str, data.get("WHY_KEY")),
            _from_json_data(WhyKeyDetails, data.get("WHY_KEY_DETAILS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CANDIDATE_KEYS"] = _to_json_data(self.candidate_keys)
        data["DISCLOSED_RELATIONS"] = _to_json_data(self.disclosed_relations)
        data["FEATURE_SCORES"] = _to_json_data(self.feature_scores)
        data["MATCH_LEVEL_CODE"] = _to_json_data(self.match_level_code)
        data["WHY_ERRULE_CODE"] = _to_json_data(self.why_errule_code)
        data["WHY_KEY"] = _to_json_data(self.why_key)
        data["WHY_KEY_DETAILS"] = _to_json_data(self.why_key_details)
        return data

@dataclass
class MatchKeyDetails:
    confirmations: 'List[Confirmation]'
    denials: 'List[Confirmation]'
    errule_code: 'str'
    """
    Identifier of the entity resolution rule that was triggered.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'MatchKeyDetails':
        return cls(
            _from_json_data(List[Confirmation], data.get("CONFIRMATIONS")),
            _from_json_data(List[Confirmation], data.get("DENIALS")),
            _from_json_data(str, data.get("ERRULE_CODE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CONFIRMATIONS"] = _to_json_data(self.confirmations)
        data["DENIALS"] = _to_json_data(self.denials)
        data["ERRULE_CODE"] = _to_json_data(self.errule_code)
        return data

@dataclass
class MemberRecord:
    internal_id: 'int'
    """
    Internal identifier for the record.
    """

    records: 'List[Record]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'MemberRecord':
        return cls(
            _from_json_data(int, data.get("INTERNAL_ID")),
            _from_json_data(List[Record], data.get("RECORDS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["INTERNAL_ID"] = _to_json_data(self.internal_id)
        data["RECORDS"] = _to_json_data(self.records)
        return data

@dataclass
class Notice:
    code: 'str'
    description: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Notice':
        return cls(
            _from_json_data(str, data.get("CODE")),
            _from_json_data(str, data.get("DESCRIPTION")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CODE"] = _to_json_data(self.code)
        data["DESCRIPTION"] = _to_json_data(self.description)
        return data

@dataclass
class Object:
    value: 'object'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Object':
        return cls(_from_json_data(object, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class ParamDetails:
    name: 'str'
    value: 'Object'

    @classmethod
    def from_json_data(cls, data: Any) -> 'ParamDetails':
        return cls(
            _from_json_data(str, data.get("NAME")),
            _from_json_data(Object, data.get("VALUE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["NAME"] = _to_json_data(self.name)
        data["VALUE"] = _to_json_data(self.value)
        return data

@dataclass
class Params:
    param: 'ParamDetails'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Params':
        return cls(
            _from_json_data(ParamDetails, data.get("PARAM")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["PARAM"] = _to_json_data(self.param)
        return data

@dataclass
class Processing:
    added_records: 'int'
    ambiguous: 'ProcessingAmbiguous'
    batch_added_records: 'int'
    deleted_records: 'int'
    details: 'ProcessingDetails'
    reevaluations: 'int'
    repaired_entities: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Processing':
        return cls(
            _from_json_data(int, data.get("addedRecords")),
            _from_json_data(ProcessingAmbiguous, data.get("ambiguous")),
            _from_json_data(int, data.get("batchAddedRecords")),
            _from_json_data(int, data.get("deletedRecords")),
            _from_json_data(ProcessingDetails, data.get("details")),
            _from_json_data(int, data.get("reevaluations")),
            _from_json_data(int, data.get("repairedEntities")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["addedRecords"] = _to_json_data(self.added_records)
        data["ambiguous"] = _to_json_data(self.ambiguous)
        data["batchAddedRecords"] = _to_json_data(self.batch_added_records)
        data["deletedRecords"] = _to_json_data(self.deleted_records)
        data["details"] = _to_json_data(self.details)
        data["reevaluations"] = _to_json_data(self.reevaluations)
        data["repairedEntities"] = _to_json_data(self.repaired_entities)
        return data

@dataclass
class ProcessingAmbiguous:
    actual_test: 'int'
    cached_test: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'ProcessingAmbiguous':
        return cls(
            _from_json_data(int, data.get("actualTest")),
            _from_json_data(int, data.get("cachedTest")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["actualTest"] = _to_json_data(self.actual_test)
        data["cachedTest"] = _to_json_data(self.cached_test)
        return data

@dataclass
class ProcessingDetails:
    added_records: 'int'
    candidates: 'int'
    change_deletes: 'int'
    duration: 'int'
    filtered_obs_feat: 'int'
    new_obs_ent: 'int'
    obs_ent_hash_diff: 'int'
    obs_ent_hash_same: 'int'
    optimized_out: 'int'
    optimized_out_skipped: 'int'
    partially_resolved: 'int'
    retries: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'ProcessingDetails':
        return cls(
            _from_json_data(int, data.get("addedRecords")),
            _from_json_data(int, data.get("candidates")),
            _from_json_data(int, data.get("changeDeletes")),
            _from_json_data(int, data.get("duration")),
            _from_json_data(int, data.get("filteredObsFeat")),
            _from_json_data(int, data.get("newObsEnt")),
            _from_json_data(int, data.get("obsEntHashDiff")),
            _from_json_data(int, data.get("obsEntHashSame")),
            _from_json_data(int, data.get("optimizedOut")),
            _from_json_data(int, data.get("optimizedOutSkipped")),
            _from_json_data(int, data.get("partiallyResolved")),
            _from_json_data(int, data.get("retries")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["addedRecords"] = _to_json_data(self.added_records)
        data["candidates"] = _to_json_data(self.candidates)
        data["changeDeletes"] = _to_json_data(self.change_deletes)
        data["duration"] = _to_json_data(self.duration)
        data["filteredObsFeat"] = _to_json_data(self.filtered_obs_feat)
        data["newObsEnt"] = _to_json_data(self.new_obs_ent)
        data["obsEntHashDiff"] = _to_json_data(self.obs_ent_hash_diff)
        data["obsEntHashSame"] = _to_json_data(self.obs_ent_hash_same)
        data["optimizedOut"] = _to_json_data(self.optimized_out)
        data["optimizedOutSkipped"] = _to_json_data(self.optimized_out_skipped)
        data["partiallyResolved"] = _to_json_data(self.partially_resolved)
        data["retries"] = _to_json_data(self.retries)
        return data

@dataclass
class Record:
    address_data: 'List[str]'
    attribute_data: 'List[str]'
    data_source: 'str'
    """
    A label identifying the provenance of the record.
    """

    entity_data: 'List[str]'
    entity_desc: 'str'
    entity_key: 'str'
    entity_type: 'str'
    errule_code: 'str'
    """
    Identifier of the entity resolution rule that was triggered.
    """

    features: 'Dict[str, List[FeatureForAttributes]]'
    feature_ids: 'List[FeatureID]'
    first_seen_dt: 'datetime'
    identifier_data: 'List[str]'
    internal_id: 'int'
    """
    Internal identifier for the record.
    """

    json_data: 'Dict[str, Object]'
    last_seen_dt: 'datetime'
    match_key: 'str'
    """
    Representation of matched source record features.
    """

    match_level: 'int'
    match_level_code: 'str'
    """
    The type of match that occurred for the record.
    """

    name_data: 'List[str]'
    other_data: 'List[str]'
    phone_data: 'List[str]'
    record_id: 'str'
    """
    The unique identifier within the set of records in the DATA_SOURCE.
    """

    relationship_data: 'List[str]'
    unmapped_data: 'Dict[str, Object]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Record':
        return cls(
            _from_json_data(List[str], data.get("ADDRESS_DATA")),
            _from_json_data(List[str], data.get("ATTRIBUTE_DATA")),
            _from_json_data(str, data.get("DATA_SOURCE")),
            _from_json_data(List[str], data.get("ENTITY_DATA")),
            _from_json_data(str, data.get("ENTITY_DESC")),
            _from_json_data(str, data.get("ENTITY_KEY")),
            _from_json_data(str, data.get("ENTITY_TYPE")),
            _from_json_data(str, data.get("ERRULE_CODE")),
            _from_json_data(Dict[str, List[FeatureForAttributes]], data.get("FEATURES")),
            _from_json_data(List[FeatureID], data.get("FEATURE_IDS")),
            _from_json_data(datetime, data.get("FIRST_SEEN_DT")),
            _from_json_data(List[str], data.get("IDENTIFIER_DATA")),
            _from_json_data(int, data.get("INTERNAL_ID")),
            _from_json_data(Dict[str, Object], data.get("JSON_DATA")),
            _from_json_data(datetime, data.get("LAST_SEEN_DT")),
            _from_json_data(str, data.get("MATCH_KEY")),
            _from_json_data(int, data.get("MATCH_LEVEL")),
            _from_json_data(str, data.get("MATCH_LEVEL_CODE")),
            _from_json_data(List[str], data.get("NAME_DATA")),
            _from_json_data(List[str], data.get("OTHER_DATA")),
            _from_json_data(List[str], data.get("PHONE_DATA")),
            _from_json_data(str, data.get("RECORD_ID")),
            _from_json_data(List[str], data.get("RELATIONSHIP_DATA")),
            _from_json_data(Dict[str, Object], data.get("UNMAPPED_DATA")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ADDRESS_DATA"] = _to_json_data(self.address_data)
        data["ATTRIBUTE_DATA"] = _to_json_data(self.attribute_data)
        data["DATA_SOURCE"] = _to_json_data(self.data_source)
        data["ENTITY_DATA"] = _to_json_data(self.entity_data)
        data["ENTITY_DESC"] = _to_json_data(self.entity_desc)
        data["ENTITY_KEY"] = _to_json_data(self.entity_key)
        data["ENTITY_TYPE"] = _to_json_data(self.entity_type)
        data["ERRULE_CODE"] = _to_json_data(self.errule_code)
        data["FEATURES"] = _to_json_data(self.features)
        data["FEATURE_IDS"] = _to_json_data(self.feature_ids)
        data["FIRST_SEEN_DT"] = _to_json_data(self.first_seen_dt)
        data["IDENTIFIER_DATA"] = _to_json_data(self.identifier_data)
        data["INTERNAL_ID"] = _to_json_data(self.internal_id)
        data["JSON_DATA"] = _to_json_data(self.json_data)
        data["LAST_SEEN_DT"] = _to_json_data(self.last_seen_dt)
        data["MATCH_KEY"] = _to_json_data(self.match_key)
        data["MATCH_LEVEL"] = _to_json_data(self.match_level)
        data["MATCH_LEVEL_CODE"] = _to_json_data(self.match_level_code)
        data["NAME_DATA"] = _to_json_data(self.name_data)
        data["OTHER_DATA"] = _to_json_data(self.other_data)
        data["PHONE_DATA"] = _to_json_data(self.phone_data)
        data["RECORD_ID"] = _to_json_data(self.record_id)
        data["RELATIONSHIP_DATA"] = _to_json_data(self.relationship_data)
        data["UNMAPPED_DATA"] = _to_json_data(self.unmapped_data)
        return data

@dataclass
class RecordForGetEntity:
    address_data: 'List[str]'
    attribute_data: 'List[str]'
    data_source: 'str'
    """
    A label identifying the provenance of the record.
    """

    entity_data: 'List[str]'
    entity_desc: 'str'
    entity_key: 'str'
    entity_type: 'str'
    errule_code: 'str'
    """
    Identifier of the entity resolution rule that was triggered.
    """

    features: 'Dict[str, List[FeatureForAttributes]]'
    feature_ids: 'List[FeatureID]'
    first_seen_dt: 'datetime'
    identifier_data: 'List[str]'
    internal_id: 'int'
    """
    Internal identifier for the record.
    """

    json_data: 'Dict[str, Object]'
    last_seen_dt: 'datetime'
    match_key: 'str'
    """
    Representation of matched source record features.
    """

    match_level: 'int'
    match_level_code: 'str'
    """
    The type of match that occurred for the record.
    """

    name_data: 'List[str]'
    other_data: 'List[str]'
    phone_data: 'List[str]'
    record_id: 'str'
    """
    The unique identifier within the set of records in the DATA_SOURCE.
    """

    relationship_data: 'List[str]'
    unmapped_data: 'Dict[str, Object]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'RecordForGetEntity':
        return cls(
            _from_json_data(List[str], data.get("ADDRESS_DATA")),
            _from_json_data(List[str], data.get("ATTRIBUTE_DATA")),
            _from_json_data(str, data.get("DATA_SOURCE")),
            _from_json_data(List[str], data.get("ENTITY_DATA")),
            _from_json_data(str, data.get("ENTITY_DESC")),
            _from_json_data(str, data.get("ENTITY_KEY")),
            _from_json_data(str, data.get("ENTITY_TYPE")),
            _from_json_data(str, data.get("ERRULE_CODE")),
            _from_json_data(Dict[str, List[FeatureForAttributes]], data.get("FEATURES")),
            _from_json_data(List[FeatureID], data.get("FEATURE_IDS")),
            _from_json_data(datetime, data.get("FIRST_SEEN_DT")),
            _from_json_data(List[str], data.get("IDENTIFIER_DATA")),
            _from_json_data(int, data.get("INTERNAL_ID")),
            _from_json_data(Dict[str, Object], data.get("JSON_DATA")),
            _from_json_data(datetime, data.get("LAST_SEEN_DT")),
            _from_json_data(str, data.get("MATCH_KEY")),
            _from_json_data(int, data.get("MATCH_LEVEL")),
            _from_json_data(str, data.get("MATCH_LEVEL_CODE")),
            _from_json_data(List[str], data.get("NAME_DATA")),
            _from_json_data(List[str], data.get("OTHER_DATA")),
            _from_json_data(List[str], data.get("PHONE_DATA")),
            _from_json_data(str, data.get("RECORD_ID")),
            _from_json_data(List[str], data.get("RELATIONSHIP_DATA")),
            _from_json_data(Dict[str, Object], data.get("UNMAPPED_DATA")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ADDRESS_DATA"] = _to_json_data(self.address_data)
        data["ATTRIBUTE_DATA"] = _to_json_data(self.attribute_data)
        data["DATA_SOURCE"] = _to_json_data(self.data_source)
        data["ENTITY_DATA"] = _to_json_data(self.entity_data)
        data["ENTITY_DESC"] = _to_json_data(self.entity_desc)
        data["ENTITY_KEY"] = _to_json_data(self.entity_key)
        data["ENTITY_TYPE"] = _to_json_data(self.entity_type)
        data["ERRULE_CODE"] = _to_json_data(self.errule_code)
        data["FEATURES"] = _to_json_data(self.features)
        data["FEATURE_IDS"] = _to_json_data(self.feature_ids)
        data["FIRST_SEEN_DT"] = _to_json_data(self.first_seen_dt)
        data["IDENTIFIER_DATA"] = _to_json_data(self.identifier_data)
        data["INTERNAL_ID"] = _to_json_data(self.internal_id)
        data["JSON_DATA"] = _to_json_data(self.json_data)
        data["LAST_SEEN_DT"] = _to_json_data(self.last_seen_dt)
        data["MATCH_KEY"] = _to_json_data(self.match_key)
        data["MATCH_LEVEL"] = _to_json_data(self.match_level)
        data["MATCH_LEVEL_CODE"] = _to_json_data(self.match_level_code)
        data["NAME_DATA"] = _to_json_data(self.name_data)
        data["OTHER_DATA"] = _to_json_data(self.other_data)
        data["PHONE_DATA"] = _to_json_data(self.phone_data)
        data["RECORD_ID"] = _to_json_data(self.record_id)
        data["RELATIONSHIP_DATA"] = _to_json_data(self.relationship_data)
        data["UNMAPPED_DATA"] = _to_json_data(self.unmapped_data)
        return data

@dataclass
class RecordKey:
    data_source: 'str'
    """
    A label identifying the provenance of the record.
    """

    record_id: 'str'
    """
    The unique identifier within the set of records in the DATA_SOURCE.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'RecordKey':
        return cls(
            _from_json_data(str, data.get("DATA_SOURCE")),
            _from_json_data(str, data.get("RECORD_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DATA_SOURCE"] = _to_json_data(self.data_source)
        data["RECORD_ID"] = _to_json_data(self.record_id)
        return data

@dataclass
class RecordKeys:
    records: 'List[RecordKey]'
    """
    A list of (data source code, record id) pairs.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'RecordKeys':
        return cls(
            _from_json_data(List[RecordKey], data.get("RECORDS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["RECORDS"] = _to_json_data(self.records)
        return data

@dataclass
class RecordSummary:
    data_source: 'str'
    """
    A label identifying the provenance of the record.
    """

    first_seen_dt: 'datetime'
    last_seen_dt: 'datetime'
    record_count: 'int'
    """
    The number of records for the entity with the same data source code.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'RecordSummary':
        return cls(
            _from_json_data(str, data.get("DATA_SOURCE")),
            _from_json_data(datetime, data.get("FIRST_SEEN_DT")),
            _from_json_data(datetime, data.get("LAST_SEEN_DT")),
            _from_json_data(int, data.get("RECORD_COUNT")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DATA_SOURCE"] = _to_json_data(self.data_source)
        data["FIRST_SEEN_DT"] = _to_json_data(self.first_seen_dt)
        data["LAST_SEEN_DT"] = _to_json_data(self.last_seen_dt)
        data["RECORD_COUNT"] = _to_json_data(self.record_count)
        return data

@dataclass
class RefreshLocks:
    count: 'int'
    max_ms: 'int'
    total_ms: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'RefreshLocks':
        return cls(
            _from_json_data(int, data.get("count")),
            _from_json_data(int, data.get("maxMS")),
            _from_json_data(int, data.get("totalMS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["count"] = _to_json_data(self.count)
        data["maxMS"] = _to_json_data(self.max_ms)
        data["totalMS"] = _to_json_data(self.total_ms)
        return data

@dataclass
class RelAnchor:
    domain: 'str'
    feat_desc: 'str'
    """
    Describes the attributes that make up the feature.
    """

    feat_id: 'int'
    linked_feat_desc: 'str'
    linked_feat_id: 'int'
    linked_feat_type: 'str'
    linked_feat_usage_type: 'str'
    rel_pointer: 'List[RelPointer]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'RelAnchor':
        return cls(
            _from_json_data(str, data.get("DOMAIN")),
            _from_json_data(str, data.get("FEAT_DESC")),
            _from_json_data(int, data.get("FEAT_ID")),
            _from_json_data(str, data.get("LINKED_FEAT_DESC")),
            _from_json_data(int, data.get("LINKED_FEAT_ID")),
            _from_json_data(str, data.get("LINKED_FEAT_TYPE")),
            _from_json_data(str, data.get("LINKED_FEAT_USAGE_TYPE")),
            _from_json_data(List[RelPointer], data.get("REL_POINTER")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DOMAIN"] = _to_json_data(self.domain)
        data["FEAT_DESC"] = _to_json_data(self.feat_desc)
        data["FEAT_ID"] = _to_json_data(self.feat_id)
        data["LINKED_FEAT_DESC"] = _to_json_data(self.linked_feat_desc)
        data["LINKED_FEAT_ID"] = _to_json_data(self.linked_feat_id)
        data["LINKED_FEAT_TYPE"] = _to_json_data(self.linked_feat_type)
        data["LINKED_FEAT_USAGE_TYPE"] = _to_json_data(self.linked_feat_usage_type)
        data["REL_POINTER"] = _to_json_data(self.rel_pointer)
        return data

@dataclass
class RelLink:
    domain: 'str'
    feat_desc: 'str'
    """
    Describes the attributes that make up the feature.
    """

    feat_id: 'int'
    feat_usage_type: 'str'
    linked_feat_desc: 'str'
    linked_feat_id: 'int'
    linked_feat_type: 'str'
    linked_feat_usage_type: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'RelLink':
        return cls(
            _from_json_data(str, data.get("DOMAIN")),
            _from_json_data(str, data.get("FEAT_DESC")),
            _from_json_data(int, data.get("FEAT_ID")),
            _from_json_data(str, data.get("FEAT_USAGE_TYPE")),
            _from_json_data(str, data.get("LINKED_FEAT_DESC")),
            _from_json_data(int, data.get("LINKED_FEAT_ID")),
            _from_json_data(str, data.get("LINKED_FEAT_TYPE")),
            _from_json_data(str, data.get("LINKED_FEAT_USAGE_TYPE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DOMAIN"] = _to_json_data(self.domain)
        data["FEAT_DESC"] = _to_json_data(self.feat_desc)
        data["FEAT_ID"] = _to_json_data(self.feat_id)
        data["FEAT_USAGE_TYPE"] = _to_json_data(self.feat_usage_type)
        data["LINKED_FEAT_DESC"] = _to_json_data(self.linked_feat_desc)
        data["LINKED_FEAT_ID"] = _to_json_data(self.linked_feat_id)
        data["LINKED_FEAT_TYPE"] = _to_json_data(self.linked_feat_type)
        data["LINKED_FEAT_USAGE_TYPE"] = _to_json_data(self.linked_feat_usage_type)
        return data

@dataclass
class RelPointer:
    domain: 'str'
    feat_desc: 'str'
    """
    Describes the attributes that make up the feature.
    """

    feat_id: 'int'
    feat_usage_type: 'str'
    linked_feat_desc: 'str'
    linked_feat_id: 'int'
    linked_feat_type: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'RelPointer':
        return cls(
            _from_json_data(str, data.get("DOMAIN")),
            _from_json_data(str, data.get("FEAT_DESC")),
            _from_json_data(int, data.get("FEAT_ID")),
            _from_json_data(str, data.get("FEAT_USAGE_TYPE")),
            _from_json_data(str, data.get("LINKED_FEAT_DESC")),
            _from_json_data(int, data.get("LINKED_FEAT_ID")),
            _from_json_data(str, data.get("LINKED_FEAT_TYPE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DOMAIN"] = _to_json_data(self.domain)
        data["FEAT_DESC"] = _to_json_data(self.feat_desc)
        data["FEAT_ID"] = _to_json_data(self.feat_id)
        data["FEAT_USAGE_TYPE"] = _to_json_data(self.feat_usage_type)
        data["LINKED_FEAT_DESC"] = _to_json_data(self.linked_feat_desc)
        data["LINKED_FEAT_ID"] = _to_json_data(self.linked_feat_id)
        data["LINKED_FEAT_TYPE"] = _to_json_data(self.linked_feat_type)
        return data

@dataclass
class RelatedEntity:
    entity_id: 'int'
    """
    The ENTITY_ID is the Senzing-generated identifier for the discovered entity.
    It may change when new information is added.
    """

    entity_name: 'str'
    """
    A name this entity goes by. An entity could have multiple names.
    """

    errule_code: 'str'
    """
    Identifier of the entity resolution rule that was triggered.
    """

    is_ambiguous: 'int'
    """
    Indicates if this is an ambiguous relationship.
    """

    is_disclosed: 'int'
    """
    Indicates if this is a disclosed relationship.
    """

    last_seen_dt: 'datetime'
    match_key: 'str'
    """
    Representation of matched source record features.
    """

    match_level: 'int'
    match_level_code: 'str'
    """
    The type of match that occurred for the record.
    """

    records: 'List[Record]'
    record_summary: 'List[RecordSummary]'
    """
    Overview of the source systems the records came from comprising this related
    entity.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'RelatedEntity':
        return cls(
            _from_json_data(int, data.get("ENTITY_ID")),
            _from_json_data(str, data.get("ENTITY_NAME")),
            _from_json_data(str, data.get("ERRULE_CODE")),
            _from_json_data(int, data.get("IS_AMBIGUOUS")),
            _from_json_data(int, data.get("IS_DISCLOSED")),
            _from_json_data(datetime, data.get("LAST_SEEN_DT")),
            _from_json_data(str, data.get("MATCH_KEY")),
            _from_json_data(int, data.get("MATCH_LEVEL")),
            _from_json_data(str, data.get("MATCH_LEVEL_CODE")),
            _from_json_data(List[Record], data.get("RECORDS")),
            _from_json_data(List[RecordSummary], data.get("RECORD_SUMMARY")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ENTITY_ID"] = _to_json_data(self.entity_id)
        data["ENTITY_NAME"] = _to_json_data(self.entity_name)
        data["ERRULE_CODE"] = _to_json_data(self.errule_code)
        data["IS_AMBIGUOUS"] = _to_json_data(self.is_ambiguous)
        data["IS_DISCLOSED"] = _to_json_data(self.is_disclosed)
        data["LAST_SEEN_DT"] = _to_json_data(self.last_seen_dt)
        data["MATCH_KEY"] = _to_json_data(self.match_key)
        data["MATCH_LEVEL"] = _to_json_data(self.match_level)
        data["MATCH_LEVEL_CODE"] = _to_json_data(self.match_level_code)
        data["RECORDS"] = _to_json_data(self.records)
        data["RECORD_SUMMARY"] = _to_json_data(self.record_summary)
        return data

@dataclass
class RepairDiagnosis:
    types: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'RepairDiagnosis':
        return cls(
            _from_json_data(int, data.get("types")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["types"] = _to_json_data(self.types)
        return data

@dataclass
class Repository:
    id: 'str'
    location: 'str'
    type: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Repository':
        return cls(
            _from_json_data(str, data.get("id")),
            _from_json_data(str, data.get("location")),
            _from_json_data(str, data.get("type")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["id"] = _to_json_data(self.id)
        data["location"] = _to_json_data(self.location)
        data["type"] = _to_json_data(self.type)
        return data

@dataclass
class Reresolve:
    new_feature_ftypes: 'Dict[str, int]'
    suppressed_candidate_builders_for_reresolve: 'Fixme'
    suppressed_scored_feature_type_for_reresolve: 'Fixme'
    triggers: 'ReresolveTriggers'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Reresolve':
        return cls(
            _from_json_data(Dict[str, int], data.get("newFeatureFTypes")),
            _from_json_data(Fixme, data.get("suppressedCandidateBuildersForReresolve")),
            _from_json_data(Fixme, data.get("suppressedScoredFeatureTypeForReresolve")),
            _from_json_data(ReresolveTriggers, data.get("triggers")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["newFeatureFTypes"] = _to_json_data(self.new_feature_ftypes)
        data["suppressedCandidateBuildersForReresolve"] = _to_json_data(self.suppressed_candidate_builders_for_reresolve)
        data["suppressedScoredFeatureTypeForReresolve"] = _to_json_data(self.suppressed_scored_feature_type_for_reresolve)
        data["triggers"] = _to_json_data(self.triggers)
        return data

@dataclass
class ReresolveTriggers:
    abort_retry: 'int'
    multiple_resolvable_candidates: 'int'
    resolve_new_features: 'int'
    skipped: 'int'
    unresolve_movement: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'ReresolveTriggers':
        return cls(
            _from_json_data(int, data.get("abortRetry")),
            _from_json_data(int, data.get("multipleResolvableCandidates")),
            _from_json_data(int, data.get("resolveNewFeatures")),
            _from_json_data(int, data.get("skipped")),
            _from_json_data(int, data.get("unresolveMovement")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["abortRetry"] = _to_json_data(self.abort_retry)
        data["multipleResolvableCandidates"] = _to_json_data(self.multiple_resolvable_candidates)
        data["resolveNewFeatures"] = _to_json_data(self.resolve_new_features)
        data["skipped"] = _to_json_data(self.skipped)
        data["unresolveMovement"] = _to_json_data(self.unresolve_movement)
        return data

@dataclass
class ResolutionStep:
    inbound_virtual_entity_id: 'str'
    match_info: 'MatchInfo'
    result_virtual_entity_id: 'str'
    step: 'int'
    virtual_entity: 'VirtualEntitySynopsis'
    virtual_entity0: 'VirtualEntitySynopsis'

    @classmethod
    def from_json_data(cls, data: Any) -> 'ResolutionStep':
        return cls(
            _from_json_data(str, data.get("INBOUND_VIRTUAL_ENTITY_ID")),
            _from_json_data(MatchInfo, data.get("MATCH_INFO")),
            _from_json_data(str, data.get("RESULT_VIRTUAL_ENTITY_ID")),
            _from_json_data(int, data.get("STEP")),
            _from_json_data(VirtualEntitySynopsis, data.get("VIRTUAL_ENTITY_1")),
            _from_json_data(VirtualEntitySynopsis, data.get("VIRTUAL_ENTITY_2")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["INBOUND_VIRTUAL_ENTITY_ID"] = _to_json_data(self.inbound_virtual_entity_id)
        data["MATCH_INFO"] = _to_json_data(self.match_info)
        data["RESULT_VIRTUAL_ENTITY_ID"] = _to_json_data(self.result_virtual_entity_id)
        data["STEP"] = _to_json_data(self.step)
        data["VIRTUAL_ENTITY_1"] = _to_json_data(self.virtual_entity)
        data["VIRTUAL_ENTITY_2"] = _to_json_data(self.virtual_entity0)
        return data

@dataclass
class ResolvedEntity:
    entity_id: 'int'
    """
    The ENTITY_ID is the Senzing-generated identifier for the discovered entity.
    It may change when new information is added.
    """

    entity_name: 'str'
    """
    A name this entity goes by. An entity could have multiple names.
    """

    errule_code: 'str'
    """
    Identifier of the entity resolution rule that was triggered.
    """

    features: 'Dict[str, List[FeatureForAttributes]]'
    feature_ids: 'List[FeatureID]'
    is_ambiguous: 'int'
    """
    Indicates if this is an ambiguous relationship.
    """

    is_disclosed: 'int'
    """
    Indicates if this is a disclosed relationship.
    """

    last_seen_dt: 'datetime'
    match_key: 'str'
    """
    Representation of matched source record features.
    """

    match_level: 'int'
    match_level_code: 'str'
    """
    The type of match that occurred for the record.
    """

    records: 'List[Record]'
    record_summary: 'List[RecordSummary]'
    """
    Overview of the source systems the records came from comprising this related
    entity.
    """

    record_types: 'List[str]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'ResolvedEntity':
        return cls(
            _from_json_data(int, data.get("ENTITY_ID")),
            _from_json_data(str, data.get("ENTITY_NAME")),
            _from_json_data(str, data.get("ERRULE_CODE")),
            _from_json_data(Dict[str, List[FeatureForAttributes]], data.get("FEATURES")),
            _from_json_data(List[FeatureID], data.get("FEATURE_IDS")),
            _from_json_data(int, data.get("IS_AMBIGUOUS")),
            _from_json_data(int, data.get("IS_DISCLOSED")),
            _from_json_data(datetime, data.get("LAST_SEEN_DT")),
            _from_json_data(str, data.get("MATCH_KEY")),
            _from_json_data(int, data.get("MATCH_LEVEL")),
            _from_json_data(str, data.get("MATCH_LEVEL_CODE")),
            _from_json_data(List[Record], data.get("RECORDS")),
            _from_json_data(List[RecordSummary], data.get("RECORD_SUMMARY")),
            _from_json_data(List[str], data.get("RECORD_TYPES")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ENTITY_ID"] = _to_json_data(self.entity_id)
        data["ENTITY_NAME"] = _to_json_data(self.entity_name)
        data["ERRULE_CODE"] = _to_json_data(self.errule_code)
        data["FEATURES"] = _to_json_data(self.features)
        data["FEATURE_IDS"] = _to_json_data(self.feature_ids)
        data["IS_AMBIGUOUS"] = _to_json_data(self.is_ambiguous)
        data["IS_DISCLOSED"] = _to_json_data(self.is_disclosed)
        data["LAST_SEEN_DT"] = _to_json_data(self.last_seen_dt)
        data["MATCH_KEY"] = _to_json_data(self.match_key)
        data["MATCH_LEVEL"] = _to_json_data(self.match_level)
        data["MATCH_LEVEL_CODE"] = _to_json_data(self.match_level_code)
        data["RECORDS"] = _to_json_data(self.records)
        data["RECORD_SUMMARY"] = _to_json_data(self.record_summary)
        data["RECORD_TYPES"] = _to_json_data(self.record_types)
        return data

@dataclass
class ResolvedEntityAndMatchInfo:
    entity: 'EntityForResolvedEntity'
    match_info: 'MatchInfo'

    @classmethod
    def from_json_data(cls, data: Any) -> 'ResolvedEntityAndMatchInfo':
        return cls(
            _from_json_data(EntityForResolvedEntity, data.get("ENTITY")),
            _from_json_data(MatchInfo, data.get("MATCH_INFO")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ENTITY"] = _to_json_data(self.entity)
        data["MATCH_INFO"] = _to_json_data(self.match_info)
        return data

@dataclass
class ResolvedEntityForGetEntity:
    entity_id: 'int'
    """
    The ENTITY_ID is the Senzing-generated identifier for the discovered entity.
    It may change when new information is added.
    """

    entity_name: 'str'
    """
    A name this entity goes by. An entity could have multiple names.
    """

    errule_code: 'str'
    """
    Identifier of the entity resolution rule that was triggered.
    """

    features: 'Dict[str, List[FeatureForGetEntity]]'
    feature_ids: 'List[FeatureID]'
    is_ambiguous: 'int'
    """
    Indicates if this is an ambiguous relationship.
    """

    is_disclosed: 'int'
    """
    Indicates if this is a disclosed relationship.
    """

    last_seen_dt: 'datetime'
    match_key: 'str'
    """
    Representation of matched source record features.
    """

    match_level: 'int'
    match_level_code: 'str'
    """
    The type of match that occurred for the record.
    """

    records: 'List[RecordForGetEntity]'
    record_summary: 'List[RecordSummary]'
    """
    Overview of the source systems the records came from comprising this related
    entity.
    """

    record_types: 'List[str]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'ResolvedEntityForGetEntity':
        return cls(
            _from_json_data(int, data.get("ENTITY_ID")),
            _from_json_data(str, data.get("ENTITY_NAME")),
            _from_json_data(str, data.get("ERRULE_CODE")),
            _from_json_data(Dict[str, List[FeatureForGetEntity]], data.get("FEATURES")),
            _from_json_data(List[FeatureID], data.get("FEATURE_IDS")),
            _from_json_data(int, data.get("IS_AMBIGUOUS")),
            _from_json_data(int, data.get("IS_DISCLOSED")),
            _from_json_data(datetime, data.get("LAST_SEEN_DT")),
            _from_json_data(str, data.get("MATCH_KEY")),
            _from_json_data(int, data.get("MATCH_LEVEL")),
            _from_json_data(str, data.get("MATCH_LEVEL_CODE")),
            _from_json_data(List[RecordForGetEntity], data.get("RECORDS")),
            _from_json_data(List[RecordSummary], data.get("RECORD_SUMMARY")),
            _from_json_data(List[str], data.get("RECORD_TYPES")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ENTITY_ID"] = _to_json_data(self.entity_id)
        data["ENTITY_NAME"] = _to_json_data(self.entity_name)
        data["ERRULE_CODE"] = _to_json_data(self.errule_code)
        data["FEATURES"] = _to_json_data(self.features)
        data["FEATURE_IDS"] = _to_json_data(self.feature_ids)
        data["IS_AMBIGUOUS"] = _to_json_data(self.is_ambiguous)
        data["IS_DISCLOSED"] = _to_json_data(self.is_disclosed)
        data["LAST_SEEN_DT"] = _to_json_data(self.last_seen_dt)
        data["MATCH_KEY"] = _to_json_data(self.match_key)
        data["MATCH_LEVEL"] = _to_json_data(self.match_level)
        data["MATCH_LEVEL_CODE"] = _to_json_data(self.match_level_code)
        data["RECORDS"] = _to_json_data(self.records)
        data["RECORD_SUMMARY"] = _to_json_data(self.record_summary)
        data["RECORD_TYPES"] = _to_json_data(self.record_types)
        return data

@dataclass
class SysOom:
    felem_id: 'int'
    ftype_id: 'int'
    lens_id: 'int'
    lib_feat_id: 'int'
    lib_felem_id: 'int'
    next_thresh: 'int'
    oom_level: 'str'
    oom_type: 'str'
    thresh1_cnt: 'int'
    thresh1_oom: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SysOom':
        return cls(
            _from_json_data(int, data.get("FELEM_ID")),
            _from_json_data(int, data.get("FTYPE_ID")),
            _from_json_data(int, data.get("LENS_ID")),
            _from_json_data(int, data.get("LIB_FEAT_ID")),
            _from_json_data(int, data.get("LIB_FELEM_ID")),
            _from_json_data(int, data.get("NEXT_THRESH")),
            _from_json_data(str, data.get("OOM_LEVEL")),
            _from_json_data(str, data.get("OOM_TYPE")),
            _from_json_data(int, data.get("THRESH1_CNT")),
            _from_json_data(int, data.get("THRESH1_OOM")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FELEM_ID"] = _to_json_data(self.felem_id)
        data["FTYPE_ID"] = _to_json_data(self.ftype_id)
        data["LENS_ID"] = _to_json_data(self.lens_id)
        data["LIB_FEAT_ID"] = _to_json_data(self.lib_feat_id)
        data["LIB_FELEM_ID"] = _to_json_data(self.lib_felem_id)
        data["NEXT_THRESH"] = _to_json_data(self.next_thresh)
        data["OOM_LEVEL"] = _to_json_data(self.oom_level)
        data["OOM_TYPE"] = _to_json_data(self.oom_type)
        data["THRESH1_CNT"] = _to_json_data(self.thresh1_cnt)
        data["THRESH1_OOM"] = _to_json_data(self.thresh1_oom)
        return data

@dataclass
class SampleRecord:
    data_source: 'str'
    """
    A label identifying the provenance of the record.
    """

    flags: 'List[str]'
    record_id: 'str'
    """
    The unique identifier within the set of records in the DATA_SOURCE.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'SampleRecord':
        return cls(
            _from_json_data(str, data.get("DATA_SOURCE")),
            _from_json_data(List[str], data.get("FLAGS")),
            _from_json_data(str, data.get("RECORD_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DATA_SOURCE"] = _to_json_data(self.data_source)
        data["FLAGS"] = _to_json_data(self.flags)
        data["RECORD_ID"] = _to_json_data(self.record_id)
        return data

@dataclass
class SchemaVersion:
    engine_schema_version: 'str'
    maximum_required_schema_version: 'str'
    minimum_required_schema_version: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SchemaVersion':
        return cls(
            _from_json_data(str, data.get("ENGINE_SCHEMA_VERSION")),
            _from_json_data(str, data.get("MAXIMUM_REQUIRED_SCHEMA_VERSION")),
            _from_json_data(str, data.get("MINIMUM_REQUIRED_SCHEMA_VERSION")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ENGINE_SCHEMA_VERSION"] = _to_json_data(self.engine_schema_version)
        data["MAXIMUM_REQUIRED_SCHEMA_VERSION"] = _to_json_data(self.maximum_required_schema_version)
        data["MINIMUM_REQUIRED_SCHEMA_VERSION"] = _to_json_data(self.minimum_required_schema_version)
        return data

@dataclass
class Scoring:
    cache_hit: 'Dict[str, int]'
    cache_miss: 'Dict[str, int]'
    scored_pairs: 'Dict[str, int]'
    suppressed_disclosed_relationship_domain_count: 'int'
    suppressed_scored_feature_type: 'Fixme'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Scoring':
        return cls(
            _from_json_data(Dict[str, int], data.get("cacheHit")),
            _from_json_data(Dict[str, int], data.get("cacheMiss")),
            _from_json_data(Dict[str, int], data.get("scoredPairs")),
            _from_json_data(int, data.get("suppressedDisclosedRelationshipDomainCount")),
            _from_json_data(Fixme, data.get("suppressedScoredFeatureType")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["cacheHit"] = _to_json_data(self.cache_hit)
        data["cacheMiss"] = _to_json_data(self.cache_miss)
        data["scoredPairs"] = _to_json_data(self.scored_pairs)
        data["suppressedDisclosedRelationshipDomainCount"] = _to_json_data(self.suppressed_disclosed_relationship_domain_count)
        data["suppressedScoredFeatureType"] = _to_json_data(self.suppressed_scored_feature_type)
        return data

@dataclass
class SearchRequest:
    features: 'Dict[str, List[FeatureDescriptionValue]]'
    json_data: 'str'
    search_profile: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SearchRequest':
        return cls(
            _from_json_data(Dict[str, List[FeatureDescriptionValue]], data.get("FEATURES")),
            _from_json_data(str, data.get("JSON_DATA")),
            _from_json_data(str, data.get("SEARCH_PROFILE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FEATURES"] = _to_json_data(self.features)
        data["JSON_DATA"] = _to_json_data(self.json_data)
        data["SEARCH_PROFILE"] = _to_json_data(self.search_profile)
        return data

@dataclass
class SearchStatistic:
    candidate_keys: 'CandidateKeysForSearchStatistic'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SearchStatistic':
        return cls(
            _from_json_data(CandidateKeysForSearchStatistic, data.get("CANDIDATE_KEYS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CANDIDATE_KEYS"] = _to_json_data(self.candidate_keys)
        return data

@dataclass
class SenzingEntitySpecification:
    account_domain: 'str'
    account_number: 'str'
    addr_city: 'str'
    addr_country: 'str'
    addr_from_date: 'str'
    addr_full: 'str'
    addr_line1: 'str'
    addr_line2: 'str'
    addr_line3: 'str'
    addr_line4: 'str'
    addr_line5: 'str'
    addr_line6: 'str'
    addr_postal_code: 'str'
    addr_state: 'str'
    addr_thru_date: 'str'
    addr_type: 'str'
    citizenship: 'str'
    date_of_birth: 'str'
    date_of_death: 'str'
    drivers_license_number: 'str'
    drivers_license_state: 'str'
    duns_number: 'str'
    email_address: 'str'
    employer: 'str'
    employer_name: 'str'
    facebook: 'str'
    gender: 'str'
    group_assn_id_number: 'str'
    group_assn_id_type: 'str'
    group_association_org_name: 'str'
    group_association_type: 'str'
    instagram: 'str'
    lei_number: 'str'
    linkedin: 'str'
    name_first: 'str'
    name_full: 'str'
    name_last: 'str'
    name_org: 'str'
    name_prefix: 'str'
    name_suffix: 'str'
    name_type: 'str'
    nationality: 'str'
    national_id_country: 'str'
    national_id_number: 'str'
    native_name_full: 'str'
    npi_number: 'str'
    other_id_country: 'str'
    other_id_number: 'str'
    other_id_type: 'str'
    passport_country: 'str'
    passport_number: 'str'
    phone_from_date: 'str'
    phone_number: 'str'
    phone_thru_date: 'str'
    phone_type: 'str'
    place_of_birth: 'str'
    primary_name_first: 'str'
    primary_name_full: 'str'
    primary_name_last: 'str'
    primary_name_middle: 'str'
    primary_name_org: 'str'
    record_type: 'str'
    registration_country: 'str'
    registration_date: 'str'
    rel_anchor_key: 'str'
    rel_pointer_key: 'str'
    secondary_name_org: 'str'
    signal: 'str'
    skype: 'str'
    ssn_number: 'str'
    tango: 'str'
    tax_id_country: 'str'
    tax_id_number: 'str'
    tax_id_type: 'str'
    telegram: 'str'
    trusted_id_number: 'str'
    trusted_id_type: 'str'
    twitter: 'str'
    viber: 'str'
    website_address: 'str'
    wechat: 'str'
    whatsapp: 'str'
    zoomroom: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SenzingEntitySpecification':
        return cls(
            _from_json_data(str, data.get("ACCOUNT_DOMAIN")),
            _from_json_data(str, data.get("ACCOUNT_NUMBER")),
            _from_json_data(str, data.get("ADDR_CITY")),
            _from_json_data(str, data.get("ADDR_COUNTRY")),
            _from_json_data(str, data.get("ADDR_FROM_DATE")),
            _from_json_data(str, data.get("ADDR_FULL")),
            _from_json_data(str, data.get("ADDR_LINE1")),
            _from_json_data(str, data.get("ADDR_LINE2")),
            _from_json_data(str, data.get("ADDR_LINE3")),
            _from_json_data(str, data.get("ADDR_LINE4")),
            _from_json_data(str, data.get("ADDR_LINE5")),
            _from_json_data(str, data.get("ADDR_LINE6")),
            _from_json_data(str, data.get("ADDR_POSTAL_CODE")),
            _from_json_data(str, data.get("ADDR_STATE")),
            _from_json_data(str, data.get("ADDR_THRU_DATE")),
            _from_json_data(str, data.get("ADDR_TYPE")),
            _from_json_data(str, data.get("CITIZENSHIP")),
            _from_json_data(str, data.get("DATE_OF_BIRTH")),
            _from_json_data(str, data.get("DATE_OF_DEATH")),
            _from_json_data(str, data.get("DRIVERS_LICENSE_NUMBER")),
            _from_json_data(str, data.get("DRIVERS_LICENSE_STATE")),
            _from_json_data(str, data.get("DUNS_NUMBER")),
            _from_json_data(str, data.get("EMAIL_ADDRESS")),
            _from_json_data(str, data.get("EMPLOYER")),
            _from_json_data(str, data.get("EMPLOYER_NAME")),
            _from_json_data(str, data.get("FACEBOOK")),
            _from_json_data(str, data.get("GENDER")),
            _from_json_data(str, data.get("GROUP_ASSN_ID_NUMBER")),
            _from_json_data(str, data.get("GROUP_ASSN_ID_TYPE")),
            _from_json_data(str, data.get("GROUP_ASSOCIATION_ORG_NAME")),
            _from_json_data(str, data.get("GROUP_ASSOCIATION_TYPE")),
            _from_json_data(str, data.get("INSTAGRAM")),
            _from_json_data(str, data.get("LEI_NUMBER")),
            _from_json_data(str, data.get("LINKEDIN")),
            _from_json_data(str, data.get("NAME_FIRST")),
            _from_json_data(str, data.get("NAME_FULL")),
            _from_json_data(str, data.get("NAME_LAST")),
            _from_json_data(str, data.get("NAME_ORG")),
            _from_json_data(str, data.get("NAME_PREFIX")),
            _from_json_data(str, data.get("NAME_SUFFIX")),
            _from_json_data(str, data.get("NAME_TYPE")),
            _from_json_data(str, data.get("NATIONALITY")),
            _from_json_data(str, data.get("NATIONAL_ID_COUNTRY")),
            _from_json_data(str, data.get("NATIONAL_ID_NUMBER")),
            _from_json_data(str, data.get("NATIVE_NAME_FULL")),
            _from_json_data(str, data.get("NPI_NUMBER")),
            _from_json_data(str, data.get("OTHER_ID_COUNTRY")),
            _from_json_data(str, data.get("OTHER_ID_NUMBER")),
            _from_json_data(str, data.get("OTHER_ID_TYPE")),
            _from_json_data(str, data.get("PASSPORT_COUNTRY")),
            _from_json_data(str, data.get("PASSPORT_NUMBER")),
            _from_json_data(str, data.get("PHONE_FROM_DATE")),
            _from_json_data(str, data.get("PHONE_NUMBER")),
            _from_json_data(str, data.get("PHONE_THRU_DATE")),
            _from_json_data(str, data.get("PHONE_TYPE")),
            _from_json_data(str, data.get("PLACE_OF_BIRTH")),
            _from_json_data(str, data.get("PRIMARY_NAME_FIRST")),
            _from_json_data(str, data.get("PRIMARY_NAME_FULL")),
            _from_json_data(str, data.get("PRIMARY_NAME_LAST")),
            _from_json_data(str, data.get("PRIMARY_NAME_MIDDLE")),
            _from_json_data(str, data.get("PRIMARY_NAME_ORG")),
            _from_json_data(str, data.get("RECORD_TYPE")),
            _from_json_data(str, data.get("REGISTRATION_COUNTRY")),
            _from_json_data(str, data.get("REGISTRATION_DATE")),
            _from_json_data(str, data.get("REL_ANCHOR_KEY")),
            _from_json_data(str, data.get("REL_POINTER_KEY")),
            _from_json_data(str, data.get("SECONDARY_NAME_ORG")),
            _from_json_data(str, data.get("SIGNAL")),
            _from_json_data(str, data.get("SKYPE")),
            _from_json_data(str, data.get("SSN_NUMBER")),
            _from_json_data(str, data.get("TANGO")),
            _from_json_data(str, data.get("TAX_ID_COUNTRY")),
            _from_json_data(str, data.get("TAX_ID_NUMBER")),
            _from_json_data(str, data.get("TAX_ID_TYPE")),
            _from_json_data(str, data.get("TELEGRAM")),
            _from_json_data(str, data.get("TRUSTED_ID_NUMBER")),
            _from_json_data(str, data.get("TRUSTED_ID_TYPE")),
            _from_json_data(str, data.get("TWITTER")),
            _from_json_data(str, data.get("VIBER")),
            _from_json_data(str, data.get("WEBSITE_ADDRESS")),
            _from_json_data(str, data.get("WECHAT")),
            _from_json_data(str, data.get("WHATSAPP")),
            _from_json_data(str, data.get("ZOOMROOM")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ACCOUNT_DOMAIN"] = _to_json_data(self.account_domain)
        data["ACCOUNT_NUMBER"] = _to_json_data(self.account_number)
        data["ADDR_CITY"] = _to_json_data(self.addr_city)
        data["ADDR_COUNTRY"] = _to_json_data(self.addr_country)
        data["ADDR_FROM_DATE"] = _to_json_data(self.addr_from_date)
        data["ADDR_FULL"] = _to_json_data(self.addr_full)
        data["ADDR_LINE1"] = _to_json_data(self.addr_line1)
        data["ADDR_LINE2"] = _to_json_data(self.addr_line2)
        data["ADDR_LINE3"] = _to_json_data(self.addr_line3)
        data["ADDR_LINE4"] = _to_json_data(self.addr_line4)
        data["ADDR_LINE5"] = _to_json_data(self.addr_line5)
        data["ADDR_LINE6"] = _to_json_data(self.addr_line6)
        data["ADDR_POSTAL_CODE"] = _to_json_data(self.addr_postal_code)
        data["ADDR_STATE"] = _to_json_data(self.addr_state)
        data["ADDR_THRU_DATE"] = _to_json_data(self.addr_thru_date)
        data["ADDR_TYPE"] = _to_json_data(self.addr_type)
        data["CITIZENSHIP"] = _to_json_data(self.citizenship)
        data["DATE_OF_BIRTH"] = _to_json_data(self.date_of_birth)
        data["DATE_OF_DEATH"] = _to_json_data(self.date_of_death)
        data["DRIVERS_LICENSE_NUMBER"] = _to_json_data(self.drivers_license_number)
        data["DRIVERS_LICENSE_STATE"] = _to_json_data(self.drivers_license_state)
        data["DUNS_NUMBER"] = _to_json_data(self.duns_number)
        data["EMAIL_ADDRESS"] = _to_json_data(self.email_address)
        data["EMPLOYER"] = _to_json_data(self.employer)
        data["EMPLOYER_NAME"] = _to_json_data(self.employer_name)
        data["FACEBOOK"] = _to_json_data(self.facebook)
        data["GENDER"] = _to_json_data(self.gender)
        data["GROUP_ASSN_ID_NUMBER"] = _to_json_data(self.group_assn_id_number)
        data["GROUP_ASSN_ID_TYPE"] = _to_json_data(self.group_assn_id_type)
        data["GROUP_ASSOCIATION_ORG_NAME"] = _to_json_data(self.group_association_org_name)
        data["GROUP_ASSOCIATION_TYPE"] = _to_json_data(self.group_association_type)
        data["INSTAGRAM"] = _to_json_data(self.instagram)
        data["LEI_NUMBER"] = _to_json_data(self.lei_number)
        data["LINKEDIN"] = _to_json_data(self.linkedin)
        data["NAME_FIRST"] = _to_json_data(self.name_first)
        data["NAME_FULL"] = _to_json_data(self.name_full)
        data["NAME_LAST"] = _to_json_data(self.name_last)
        data["NAME_ORG"] = _to_json_data(self.name_org)
        data["NAME_PREFIX"] = _to_json_data(self.name_prefix)
        data["NAME_SUFFIX"] = _to_json_data(self.name_suffix)
        data["NAME_TYPE"] = _to_json_data(self.name_type)
        data["NATIONALITY"] = _to_json_data(self.nationality)
        data["NATIONAL_ID_COUNTRY"] = _to_json_data(self.national_id_country)
        data["NATIONAL_ID_NUMBER"] = _to_json_data(self.national_id_number)
        data["NATIVE_NAME_FULL"] = _to_json_data(self.native_name_full)
        data["NPI_NUMBER"] = _to_json_data(self.npi_number)
        data["OTHER_ID_COUNTRY"] = _to_json_data(self.other_id_country)
        data["OTHER_ID_NUMBER"] = _to_json_data(self.other_id_number)
        data["OTHER_ID_TYPE"] = _to_json_data(self.other_id_type)
        data["PASSPORT_COUNTRY"] = _to_json_data(self.passport_country)
        data["PASSPORT_NUMBER"] = _to_json_data(self.passport_number)
        data["PHONE_FROM_DATE"] = _to_json_data(self.phone_from_date)
        data["PHONE_NUMBER"] = _to_json_data(self.phone_number)
        data["PHONE_THRU_DATE"] = _to_json_data(self.phone_thru_date)
        data["PHONE_TYPE"] = _to_json_data(self.phone_type)
        data["PLACE_OF_BIRTH"] = _to_json_data(self.place_of_birth)
        data["PRIMARY_NAME_FIRST"] = _to_json_data(self.primary_name_first)
        data["PRIMARY_NAME_FULL"] = _to_json_data(self.primary_name_full)
        data["PRIMARY_NAME_LAST"] = _to_json_data(self.primary_name_last)
        data["PRIMARY_NAME_MIDDLE"] = _to_json_data(self.primary_name_middle)
        data["PRIMARY_NAME_ORG"] = _to_json_data(self.primary_name_org)
        data["RECORD_TYPE"] = _to_json_data(self.record_type)
        data["REGISTRATION_COUNTRY"] = _to_json_data(self.registration_country)
        data["REGISTRATION_DATE"] = _to_json_data(self.registration_date)
        data["REL_ANCHOR_KEY"] = _to_json_data(self.rel_anchor_key)
        data["REL_POINTER_KEY"] = _to_json_data(self.rel_pointer_key)
        data["SECONDARY_NAME_ORG"] = _to_json_data(self.secondary_name_org)
        data["SIGNAL"] = _to_json_data(self.signal)
        data["SKYPE"] = _to_json_data(self.skype)
        data["SSN_NUMBER"] = _to_json_data(self.ssn_number)
        data["TANGO"] = _to_json_data(self.tango)
        data["TAX_ID_COUNTRY"] = _to_json_data(self.tax_id_country)
        data["TAX_ID_NUMBER"] = _to_json_data(self.tax_id_number)
        data["TAX_ID_TYPE"] = _to_json_data(self.tax_id_type)
        data["TELEGRAM"] = _to_json_data(self.telegram)
        data["TRUSTED_ID_NUMBER"] = _to_json_data(self.trusted_id_number)
        data["TRUSTED_ID_TYPE"] = _to_json_data(self.trusted_id_type)
        data["TWITTER"] = _to_json_data(self.twitter)
        data["VIBER"] = _to_json_data(self.viber)
        data["WEBSITE_ADDRESS"] = _to_json_data(self.website_address)
        data["WECHAT"] = _to_json_data(self.wechat)
        data["WHATSAPP"] = _to_json_data(self.whatsapp)
        data["ZOOMROOM"] = _to_json_data(self.zoomroom)
        return data

@dataclass
class Summary:
    found: 'int'
    generic: 'int'
    not_found: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Summary':
        return cls(
            _from_json_data(int, data.get("FOUND")),
            _from_json_data(int, data.get("GENERIC")),
            _from_json_data(int, data.get("NOT_FOUND")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FOUND"] = _to_json_data(self.found)
        data["GENERIC"] = _to_json_data(self.generic)
        data["NOT_FOUND"] = _to_json_data(self.not_found)
        return data

@dataclass
class SystemLoad:
    cpu_idle: 'str'
    cpu_system: 'str'
    cpu_user: 'str'
    cpu_wait: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SystemLoad':
        return cls(
            _from_json_data(str, data.get("cpuIdle")),
            _from_json_data(str, data.get("cpuSystem")),
            _from_json_data(str, data.get("cpuUser")),
            _from_json_data(str, data.get("cpuWait")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["cpuIdle"] = _to_json_data(self.cpu_idle)
        data["cpuSystem"] = _to_json_data(self.cpu_system)
        data["cpuUser"] = _to_json_data(self.cpu_user)
        data["cpuWait"] = _to_json_data(self.cpu_wait)
        return data

@dataclass
class SystemResources:
    curr_resources: 'CurrResources'
    init_resources: 'InitResources'
    system_load: 'SystemLoad'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SystemResources':
        return cls(
            _from_json_data(CurrResources, data.get("currResources")),
            _from_json_data(InitResources, data.get("initResources")),
            _from_json_data(SystemLoad, data.get("systemLoad")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["currResources"] = _to_json_data(self.curr_resources)
        data["initResources"] = _to_json_data(self.init_resources)
        data["systemLoad"] = _to_json_data(self.system_load)
        return data

@dataclass
class SzConfigExportResponse:
    g2_config: 'G2config'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzConfigExportResponse':
        return cls(
            _from_json_data(G2config, data.get("G2_CONFIG")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["G2_CONFIG"] = _to_json_data(self.g2_config)
        return data

@dataclass
class SzConfigGetDataSourceRegistryResponse:
    data_sources: 'List[DataSource]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzConfigGetDataSourceRegistryResponse':
        return cls(
            _from_json_data(List[DataSource], data.get("DATA_SOURCES")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DATA_SOURCES"] = _to_json_data(self.data_sources)
        return data

@dataclass
class SzConfigManagerGetConfigRegistryResponse:
    configs: 'List[Config]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzConfigManagerGetConfigRegistryResponse':
        return cls(
            _from_json_data(List[Config], data.get("CONFIGS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CONFIGS"] = _to_json_data(self.configs)
        return data

@dataclass
class SzConfigRegisterDataSourceResponse:
    dsrc_id: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzConfigRegisterDataSourceResponse':
        return cls(
            _from_json_data(int, data.get("DSRC_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DSRC_ID"] = _to_json_data(self.dsrc_id)
        return data

@dataclass
class SzConfigUnregisterDataSourceResponse:
    fixme: 'Fixme'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzConfigUnregisterDataSourceResponse':
        return cls(
            _from_json_data(Fixme, data.get("FIXME")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FIXME"] = _to_json_data(self.fixme)
        return data

@dataclass
class SzDiagnosticCheckRepositoryPerformanceResponse:
    insert_time: 'int'
    num_records_inserted: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzDiagnosticCheckRepositoryPerformanceResponse':
        return cls(
            _from_json_data(int, data.get("insertTime")),
            _from_json_data(int, data.get("numRecordsInserted")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["insertTime"] = _to_json_data(self.insert_time)
        data["numRecordsInserted"] = _to_json_data(self.num_records_inserted)
        return data

@dataclass
class SzDiagnosticGetFeatureResponse:
    elements: 'List[Feature]'
    ftype_code: 'str'
    lib_feat_id: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzDiagnosticGetFeatureResponse':
        return cls(
            _from_json_data(List[Feature], data.get("ELEMENTS")),
            _from_json_data(str, data.get("FTYPE_CODE")),
            _from_json_data(int, data.get("LIB_FEAT_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ELEMENTS"] = _to_json_data(self.elements)
        data["FTYPE_CODE"] = _to_json_data(self.ftype_code)
        data["LIB_FEAT_ID"] = _to_json_data(self.lib_feat_id)
        return data

@dataclass
class SzDiagnosticGetRepositoryInfoResponse:
    data_stores: 'List[Repository]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzDiagnosticGetRepositoryInfoResponse':
        return cls(
            _from_json_data(List[Repository], data.get("dataStores")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["dataStores"] = _to_json_data(self.data_stores)
        return data

@dataclass
class SzEngineAddRecordResponse:
    affected_entities: 'List[AffectedEntity]'
    data_source: 'str'
    """
    A label identifying the provenance of the record.
    """

    interesting_entities: 'InterestingEntities'
    record_id: 'str'
    """
    The unique identifier within the set of records in the DATA_SOURCE.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineAddRecordResponse':
        return cls(
            _from_json_data(List[AffectedEntity], data.get("AFFECTED_ENTITIES")),
            _from_json_data(str, data.get("DATA_SOURCE")),
            _from_json_data(InterestingEntities, data.get("INTERESTING_ENTITIES")),
            _from_json_data(str, data.get("RECORD_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["AFFECTED_ENTITIES"] = _to_json_data(self.affected_entities)
        data["DATA_SOURCE"] = _to_json_data(self.data_source)
        data["INTERESTING_ENTITIES"] = _to_json_data(self.interesting_entities)
        data["RECORD_ID"] = _to_json_data(self.record_id)
        return data

@dataclass
class SzEngineDeleteRecordResponse:
    affected_entities: 'List[AffectedEntity]'
    data_source: 'str'
    """
    A label identifying the provenance of the record.
    """

    interesting_entities: 'InterestingEntities'
    record_id: 'str'
    """
    The unique identifier within the set of records in the DATA_SOURCE.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineDeleteRecordResponse':
        return cls(
            _from_json_data(List[AffectedEntity], data.get("AFFECTED_ENTITIES")),
            _from_json_data(str, data.get("DATA_SOURCE")),
            _from_json_data(InterestingEntities, data.get("INTERESTING_ENTITIES")),
            _from_json_data(str, data.get("RECORD_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["AFFECTED_ENTITIES"] = _to_json_data(self.affected_entities)
        data["DATA_SOURCE"] = _to_json_data(self.data_source)
        data["INTERESTING_ENTITIES"] = _to_json_data(self.interesting_entities)
        data["RECORD_ID"] = _to_json_data(self.record_id)
        return data

@dataclass
class SzEngineExportCsvEntityReportCsvColumnList:
    fixme: 'Fixme'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineExportCsvEntityReportCsvColumnList':
        return cls(
            _from_json_data(Fixme, data.get("FIXME")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FIXME"] = _to_json_data(self.fixme)
        return data

@dataclass
class SzEngineFetchNextResponse:
    fixme: 'Fixme'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineFetchNextResponse':
        return cls(
            _from_json_data(Fixme, data.get("FIXME")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FIXME"] = _to_json_data(self.fixme)
        return data

@dataclass
class SzEngineFindInterestingEntitiesByEntityIDResponse:
    interesting_entities: 'InterestingEntities'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineFindInterestingEntitiesByEntityIDResponse':
        return cls(
            _from_json_data(InterestingEntities, data.get("INTERESTING_ENTITIES")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["INTERESTING_ENTITIES"] = _to_json_data(self.interesting_entities)
        return data

@dataclass
class SzEngineFindInterestingEntitiesByRecordIDResponse:
    interesting_entities: 'InterestingEntities'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineFindInterestingEntitiesByRecordIDResponse':
        return cls(
            _from_json_data(InterestingEntities, data.get("INTERESTING_ENTITIES")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["INTERESTING_ENTITIES"] = _to_json_data(self.interesting_entities)
        return data

@dataclass
class SzEngineFindNetworkByEntityIDEntityIds:
    fixme: 'Fixme'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineFindNetworkByEntityIDEntityIds':
        return cls(
            _from_json_data(Fixme, data.get("FIXME")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FIXME"] = _to_json_data(self.fixme)
        return data

@dataclass
class SzEngineFindNetworkByEntityIDResponse:
    entities: 'List[Entity]'
    entity_network_links: 'List[EntityNetworkLink]'
    entity_paths: 'List[EntityPath]'
    entity_path_links: 'List[EntityPathLink]'
    max_entity_limit_reached: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineFindNetworkByEntityIDResponse':
        return cls(
            _from_json_data(List[Entity], data.get("ENTITIES")),
            _from_json_data(List[EntityNetworkLink], data.get("ENTITY_NETWORK_LINKS")),
            _from_json_data(List[EntityPath], data.get("ENTITY_PATHS")),
            _from_json_data(List[EntityPathLink], data.get("ENTITY_PATH_LINKS")),
            _from_json_data(str, data.get("MAX_ENTITY_LIMIT_REACHED")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ENTITIES"] = _to_json_data(self.entities)
        data["ENTITY_NETWORK_LINKS"] = _to_json_data(self.entity_network_links)
        data["ENTITY_PATHS"] = _to_json_data(self.entity_paths)
        data["ENTITY_PATH_LINKS"] = _to_json_data(self.entity_path_links)
        data["MAX_ENTITY_LIMIT_REACHED"] = _to_json_data(self.max_entity_limit_reached)
        return data

@dataclass
class SzEngineFindNetworkByRecordIDRecordKeys:
    records: 'List[RecordKey]'
    """
    A list of (data source code, record id) pairs.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineFindNetworkByRecordIDRecordKeys':
        return cls(
            _from_json_data(List[RecordKey], data.get("RECORDS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["RECORDS"] = _to_json_data(self.records)
        return data

@dataclass
class SzEngineFindNetworkByRecordIDResponse:
    entities: 'List[Entity]'
    entity_network_links: 'List[EntityNetworkLink]'
    entity_paths: 'List[EntityPath]'
    entity_path_links: 'List[EntityPathLink]'
    max_entity_limit_reached: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineFindNetworkByRecordIDResponse':
        return cls(
            _from_json_data(List[Entity], data.get("ENTITIES")),
            _from_json_data(List[EntityNetworkLink], data.get("ENTITY_NETWORK_LINKS")),
            _from_json_data(List[EntityPath], data.get("ENTITY_PATHS")),
            _from_json_data(List[EntityPathLink], data.get("ENTITY_PATH_LINKS")),
            _from_json_data(str, data.get("MAX_ENTITY_LIMIT_REACHED")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ENTITIES"] = _to_json_data(self.entities)
        data["ENTITY_NETWORK_LINKS"] = _to_json_data(self.entity_network_links)
        data["ENTITY_PATHS"] = _to_json_data(self.entity_paths)
        data["ENTITY_PATH_LINKS"] = _to_json_data(self.entity_path_links)
        data["MAX_ENTITY_LIMIT_REACHED"] = _to_json_data(self.max_entity_limit_reached)
        return data

@dataclass
class SzEngineFindPathByEntityIDAvoidEntityIds:
    fixme: 'Fixme'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineFindPathByEntityIDAvoidEntityIds':
        return cls(
            _from_json_data(Fixme, data.get("FIXME")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FIXME"] = _to_json_data(self.fixme)
        return data

@dataclass
class SzEngineFindPathByEntityIDRequiredDataSources:
    fixme: 'Fixme'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineFindPathByEntityIDRequiredDataSources':
        return cls(
            _from_json_data(Fixme, data.get("FIXME")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FIXME"] = _to_json_data(self.fixme)
        return data

@dataclass
class SzEngineFindPathByEntityIDResponse:
    entities: 'List[Entity]'
    entity_paths: 'List[EntityPath]'
    entity_path_links: 'List[EntityPathLink]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineFindPathByEntityIDResponse':
        return cls(
            _from_json_data(List[Entity], data.get("ENTITIES")),
            _from_json_data(List[EntityPath], data.get("ENTITY_PATHS")),
            _from_json_data(List[EntityPathLink], data.get("ENTITY_PATH_LINKS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ENTITIES"] = _to_json_data(self.entities)
        data["ENTITY_PATHS"] = _to_json_data(self.entity_paths)
        data["ENTITY_PATH_LINKS"] = _to_json_data(self.entity_path_links)
        return data

@dataclass
class SzEngineFindPathByRecordIDAvoidRecordKeys:
    records: 'List[RecordKey]'
    """
    A list of (data source code, record id) pairs.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineFindPathByRecordIDAvoidRecordKeys':
        return cls(
            _from_json_data(List[RecordKey], data.get("RECORDS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["RECORDS"] = _to_json_data(self.records)
        return data

@dataclass
class SzEngineFindPathByRecordIDRequiredDataSources:
    fixme: 'Fixme'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineFindPathByRecordIDRequiredDataSources':
        return cls(
            _from_json_data(Fixme, data.get("FIXME")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FIXME"] = _to_json_data(self.fixme)
        return data

@dataclass
class SzEngineFindPathByRecordIDResponse:
    entities: 'List[Entity]'
    entity_paths: 'List[EntityPath]'
    entity_path_links: 'List[EntityPathLink]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineFindPathByRecordIDResponse':
        return cls(
            _from_json_data(List[Entity], data.get("ENTITIES")),
            _from_json_data(List[EntityPath], data.get("ENTITY_PATHS")),
            _from_json_data(List[EntityPathLink], data.get("ENTITY_PATH_LINKS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ENTITIES"] = _to_json_data(self.entities)
        data["ENTITY_PATHS"] = _to_json_data(self.entity_paths)
        data["ENTITY_PATH_LINKS"] = _to_json_data(self.entity_path_links)
        return data

@dataclass
class SzEngineGetEntityByEntityIDResponse:
    related_entities: 'List[RelatedEntity]'
    resolved_entity: 'ResolvedEntityForGetEntity'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineGetEntityByEntityIDResponse':
        return cls(
            _from_json_data(List[RelatedEntity], data.get("RELATED_ENTITIES")),
            _from_json_data(ResolvedEntityForGetEntity, data.get("RESOLVED_ENTITY")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["RELATED_ENTITIES"] = _to_json_data(self.related_entities)
        data["RESOLVED_ENTITY"] = _to_json_data(self.resolved_entity)
        return data

@dataclass
class SzEngineGetEntityByRecordIDResponse:
    related_entities: 'List[RelatedEntity]'
    resolved_entity: 'ResolvedEntityForGetEntity'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineGetEntityByRecordIDResponse':
        return cls(
            _from_json_data(List[RelatedEntity], data.get("RELATED_ENTITIES")),
            _from_json_data(ResolvedEntityForGetEntity, data.get("RESOLVED_ENTITY")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["RELATED_ENTITIES"] = _to_json_data(self.related_entities)
        data["RESOLVED_ENTITY"] = _to_json_data(self.resolved_entity)
        return data

@dataclass
class SzEngineGetRecordPreviewResponse:
    features: 'Dict[str, List[FeatureForAttributes]]'
    feature_ids: 'List[FeatureID]'
    json_data: 'Dict[str, Object]'
    unmapped_data: 'Dict[str, Object]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineGetRecordPreviewResponse':
        return cls(
            _from_json_data(Dict[str, List[FeatureForAttributes]], data.get("FEATURES")),
            _from_json_data(List[FeatureID], data.get("FEATURE_IDS")),
            _from_json_data(Dict[str, Object], data.get("JSON_DATA")),
            _from_json_data(Dict[str, Object], data.get("UNMAPPED_DATA")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FEATURES"] = _to_json_data(self.features)
        data["FEATURE_IDS"] = _to_json_data(self.feature_ids)
        data["JSON_DATA"] = _to_json_data(self.json_data)
        data["UNMAPPED_DATA"] = _to_json_data(self.unmapped_data)
        return data

@dataclass
class SzEngineGetRecordResponse:
    address_data: 'List[str]'
    attribute_data: 'List[str]'
    data_source: 'str'
    """
    A label identifying the provenance of the record.
    """

    entity_data: 'List[str]'
    entity_desc: 'str'
    entity_key: 'str'
    entity_type: 'str'
    errule_code: 'str'
    """
    Identifier of the entity resolution rule that was triggered.
    """

    features: 'Dict[str, List[FeatureForAttributes]]'
    feature_ids: 'List[FeatureID]'
    first_seen_dt: 'datetime'
    identifier_data: 'List[str]'
    internal_id: 'int'
    """
    Internal identifier for the record.
    """

    json_data: 'Dict[str, Object]'
    last_seen_dt: 'datetime'
    match_key: 'str'
    """
    Representation of matched source record features.
    """

    match_level: 'int'
    match_level_code: 'str'
    """
    The type of match that occurred for the record.
    """

    name_data: 'List[str]'
    other_data: 'List[str]'
    phone_data: 'List[str]'
    record_id: 'str'
    """
    The unique identifier within the set of records in the DATA_SOURCE.
    """

    relationship_data: 'List[str]'
    unmapped_data: 'Dict[str, Object]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineGetRecordResponse':
        return cls(
            _from_json_data(List[str], data.get("ADDRESS_DATA")),
            _from_json_data(List[str], data.get("ATTRIBUTE_DATA")),
            _from_json_data(str, data.get("DATA_SOURCE")),
            _from_json_data(List[str], data.get("ENTITY_DATA")),
            _from_json_data(str, data.get("ENTITY_DESC")),
            _from_json_data(str, data.get("ENTITY_KEY")),
            _from_json_data(str, data.get("ENTITY_TYPE")),
            _from_json_data(str, data.get("ERRULE_CODE")),
            _from_json_data(Dict[str, List[FeatureForAttributes]], data.get("FEATURES")),
            _from_json_data(List[FeatureID], data.get("FEATURE_IDS")),
            _from_json_data(datetime, data.get("FIRST_SEEN_DT")),
            _from_json_data(List[str], data.get("IDENTIFIER_DATA")),
            _from_json_data(int, data.get("INTERNAL_ID")),
            _from_json_data(Dict[str, Object], data.get("JSON_DATA")),
            _from_json_data(datetime, data.get("LAST_SEEN_DT")),
            _from_json_data(str, data.get("MATCH_KEY")),
            _from_json_data(int, data.get("MATCH_LEVEL")),
            _from_json_data(str, data.get("MATCH_LEVEL_CODE")),
            _from_json_data(List[str], data.get("NAME_DATA")),
            _from_json_data(List[str], data.get("OTHER_DATA")),
            _from_json_data(List[str], data.get("PHONE_DATA")),
            _from_json_data(str, data.get("RECORD_ID")),
            _from_json_data(List[str], data.get("RELATIONSHIP_DATA")),
            _from_json_data(Dict[str, Object], data.get("UNMAPPED_DATA")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ADDRESS_DATA"] = _to_json_data(self.address_data)
        data["ATTRIBUTE_DATA"] = _to_json_data(self.attribute_data)
        data["DATA_SOURCE"] = _to_json_data(self.data_source)
        data["ENTITY_DATA"] = _to_json_data(self.entity_data)
        data["ENTITY_DESC"] = _to_json_data(self.entity_desc)
        data["ENTITY_KEY"] = _to_json_data(self.entity_key)
        data["ENTITY_TYPE"] = _to_json_data(self.entity_type)
        data["ERRULE_CODE"] = _to_json_data(self.errule_code)
        data["FEATURES"] = _to_json_data(self.features)
        data["FEATURE_IDS"] = _to_json_data(self.feature_ids)
        data["FIRST_SEEN_DT"] = _to_json_data(self.first_seen_dt)
        data["IDENTIFIER_DATA"] = _to_json_data(self.identifier_data)
        data["INTERNAL_ID"] = _to_json_data(self.internal_id)
        data["JSON_DATA"] = _to_json_data(self.json_data)
        data["LAST_SEEN_DT"] = _to_json_data(self.last_seen_dt)
        data["MATCH_KEY"] = _to_json_data(self.match_key)
        data["MATCH_LEVEL"] = _to_json_data(self.match_level)
        data["MATCH_LEVEL_CODE"] = _to_json_data(self.match_level_code)
        data["NAME_DATA"] = _to_json_data(self.name_data)
        data["OTHER_DATA"] = _to_json_data(self.other_data)
        data["PHONE_DATA"] = _to_json_data(self.phone_data)
        data["RECORD_ID"] = _to_json_data(self.record_id)
        data["RELATIONSHIP_DATA"] = _to_json_data(self.relationship_data)
        data["UNMAPPED_DATA"] = _to_json_data(self.unmapped_data)
        return data

@dataclass
class SzEngineGetRedoRecordResponse:
    umf_proc: 'UmfProc'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineGetRedoRecordResponse':
        return cls(
            _from_json_data(UmfProc, data.get("UMF_PROC")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["UMF_PROC"] = _to_json_data(self.umf_proc)
        return data

@dataclass
class SzEngineGetStatsResponse:
    workload: 'Workload'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineGetStatsResponse':
        return cls(
            _from_json_data(Workload, data.get("workload")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["workload"] = _to_json_data(self.workload)
        return data

@dataclass
class SzEngineGetVirtualEntityByRecordIDRecordKeys:
    records: 'List[RecordKey]'
    """
    A list of (data source code, record id) pairs.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineGetVirtualEntityByRecordIDRecordKeys':
        return cls(
            _from_json_data(List[RecordKey], data.get("RECORDS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["RECORDS"] = _to_json_data(self.records)
        return data

@dataclass
class SzEngineGetVirtualEntityByRecordIDResponse:
    resolved_entity: 'ResolvedEntity'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineGetVirtualEntityByRecordIDResponse':
        return cls(
            _from_json_data(ResolvedEntity, data.get("RESOLVED_ENTITY")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["RESOLVED_ENTITY"] = _to_json_data(self.resolved_entity)
        return data

@dataclass
class SzEngineHowEntityByEntityIDResponse:
    how_results: 'HowResults'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineHowEntityByEntityIDResponse':
        return cls(
            _from_json_data(HowResults, data.get("HOW_RESULTS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["HOW_RESULTS"] = _to_json_data(self.how_results)
        return data

@dataclass
class SzEngineProcessRedoRecordResponse:
    affected_entities: 'List[AffectedEntity]'
    data_source: 'str'
    """
    A label identifying the provenance of the record.
    """

    interesting_entities: 'InterestingEntities'
    record_id: 'str'
    """
    The unique identifier within the set of records in the DATA_SOURCE.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineProcessRedoRecordResponse':
        return cls(
            _from_json_data(List[AffectedEntity], data.get("AFFECTED_ENTITIES")),
            _from_json_data(str, data.get("DATA_SOURCE")),
            _from_json_data(InterestingEntities, data.get("INTERESTING_ENTITIES")),
            _from_json_data(str, data.get("RECORD_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["AFFECTED_ENTITIES"] = _to_json_data(self.affected_entities)
        data["DATA_SOURCE"] = _to_json_data(self.data_source)
        data["INTERESTING_ENTITIES"] = _to_json_data(self.interesting_entities)
        data["RECORD_ID"] = _to_json_data(self.record_id)
        return data

@dataclass
class SzEngineReevaluateEntityResponse:
    affected_entities: 'List[AffectedEntity]'
    data_source: 'str'
    """
    A label identifying the provenance of the record.
    """

    interesting_entities: 'InterestingEntities'
    record_id: 'str'
    """
    The unique identifier within the set of records in the DATA_SOURCE.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineReevaluateEntityResponse':
        return cls(
            _from_json_data(List[AffectedEntity], data.get("AFFECTED_ENTITIES")),
            _from_json_data(str, data.get("DATA_SOURCE")),
            _from_json_data(InterestingEntities, data.get("INTERESTING_ENTITIES")),
            _from_json_data(str, data.get("RECORD_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["AFFECTED_ENTITIES"] = _to_json_data(self.affected_entities)
        data["DATA_SOURCE"] = _to_json_data(self.data_source)
        data["INTERESTING_ENTITIES"] = _to_json_data(self.interesting_entities)
        data["RECORD_ID"] = _to_json_data(self.record_id)
        return data

@dataclass
class SzEngineReevaluateRecordResponse:
    affected_entities: 'List[AffectedEntity]'
    data_source: 'str'
    """
    A label identifying the provenance of the record.
    """

    interesting_entities: 'InterestingEntities'
    record_id: 'str'
    """
    The unique identifier within the set of records in the DATA_SOURCE.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineReevaluateRecordResponse':
        return cls(
            _from_json_data(List[AffectedEntity], data.get("AFFECTED_ENTITIES")),
            _from_json_data(str, data.get("DATA_SOURCE")),
            _from_json_data(InterestingEntities, data.get("INTERESTING_ENTITIES")),
            _from_json_data(str, data.get("RECORD_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["AFFECTED_ENTITIES"] = _to_json_data(self.affected_entities)
        data["DATA_SOURCE"] = _to_json_data(self.data_source)
        data["INTERESTING_ENTITIES"] = _to_json_data(self.interesting_entities)
        data["RECORD_ID"] = _to_json_data(self.record_id)
        return data

@dataclass
class SzEngineSearchByAttributesAttributes:
    fixme: 'Fixme'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineSearchByAttributesAttributes':
        return cls(
            _from_json_data(Fixme, data.get("FIXME")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FIXME"] = _to_json_data(self.fixme)
        return data

@dataclass
class SzEngineSearchByAttributesResponse:
    resolved_entities: 'List[ResolvedEntityAndMatchInfo]'
    search_request: 'SearchRequest'
    search_statistics: 'List[SearchStatistic]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineSearchByAttributesResponse':
        return cls(
            _from_json_data(List[ResolvedEntityAndMatchInfo], data.get("RESOLVED_ENTITIES")),
            _from_json_data(SearchRequest, data.get("SEARCH_REQUEST")),
            _from_json_data(List[SearchStatistic], data.get("SEARCH_STATISTICS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["RESOLVED_ENTITIES"] = _to_json_data(self.resolved_entities)
        data["SEARCH_REQUEST"] = _to_json_data(self.search_request)
        data["SEARCH_STATISTICS"] = _to_json_data(self.search_statistics)
        return data

@dataclass
class SzEngineSearchByAttributesSearchProfile:
    fixme: 'Fixme'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineSearchByAttributesSearchProfile':
        return cls(
            _from_json_data(Fixme, data.get("FIXME")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FIXME"] = _to_json_data(self.fixme)
        return data

@dataclass
class SzEngineStreamExportJSONEntityReportResponse:
    fixme: 'Fixme'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineStreamExportJSONEntityReportResponse':
        return cls(
            _from_json_data(Fixme, data.get("FIXME")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FIXME"] = _to_json_data(self.fixme)
        return data

@dataclass
class SzEngineWhyEntitiesResponse:
    entities: 'List[Entity]'
    why_results: 'List[WhyResult]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineWhyEntitiesResponse':
        return cls(
            _from_json_data(List[Entity], data.get("ENTITIES")),
            _from_json_data(List[WhyResult], data.get("WHY_RESULTS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ENTITIES"] = _to_json_data(self.entities)
        data["WHY_RESULTS"] = _to_json_data(self.why_results)
        return data

@dataclass
class SzEngineWhyRecordInEntityResponse:
    entities: 'List[Entity]'
    why_results: 'List[WhyResult]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineWhyRecordInEntityResponse':
        return cls(
            _from_json_data(List[Entity], data.get("ENTITIES")),
            _from_json_data(List[WhyResult], data.get("WHY_RESULTS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ENTITIES"] = _to_json_data(self.entities)
        data["WHY_RESULTS"] = _to_json_data(self.why_results)
        return data

@dataclass
class SzEngineWhyRecordsResponse:
    entities: 'List[Entity]'
    why_results: 'List[WhyResult]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineWhyRecordsResponse':
        return cls(
            _from_json_data(List[Entity], data.get("ENTITIES")),
            _from_json_data(List[WhyResult], data.get("WHY_RESULTS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ENTITIES"] = _to_json_data(self.entities)
        data["WHY_RESULTS"] = _to_json_data(self.why_results)
        return data

@dataclass
class SzEngineWhySearchAttributes:
    fixme: 'Fixme'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineWhySearchAttributes':
        return cls(
            _from_json_data(Fixme, data.get("FIXME")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FIXME"] = _to_json_data(self.fixme)
        return data

@dataclass
class SzEngineWhySearchResponse:
    entities: 'List[EntityForWhySearch]'
    search_request: 'SearchRequest'
    search_statistics: 'List[SearchStatistic]'
    why_results: 'List[WhyResult]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineWhySearchResponse':
        return cls(
            _from_json_data(List[EntityForWhySearch], data.get("ENTITIES")),
            _from_json_data(SearchRequest, data.get("SEARCH_REQUEST")),
            _from_json_data(List[SearchStatistic], data.get("SEARCH_STATISTICS")),
            _from_json_data(List[WhyResult], data.get("WHY_RESULTS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ENTITIES"] = _to_json_data(self.entities)
        data["SEARCH_REQUEST"] = _to_json_data(self.search_request)
        data["SEARCH_STATISTICS"] = _to_json_data(self.search_statistics)
        data["WHY_RESULTS"] = _to_json_data(self.why_results)
        return data

@dataclass
class SzEngineWhySearchSearchProfile:
    fixme: 'Fixme'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzEngineWhySearchSearchProfile':
        return cls(
            _from_json_data(Fixme, data.get("FIXME")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FIXME"] = _to_json_data(self.fixme)
        return data

@dataclass
class SzProductGetLicenseResponse:
    adv_search: 'int'
    billing: 'str'
    contract: 'str'
    customer: 'str'
    expire_date: 'str'
    issue_date: 'str'
    license_level: 'str'
    license_type: 'str'
    record_limit: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzProductGetLicenseResponse':
        return cls(
            _from_json_data(int, data.get("advSearch")),
            _from_json_data(str, data.get("billing")),
            _from_json_data(str, data.get("contract")),
            _from_json_data(str, data.get("customer")),
            _from_json_data(str, data.get("expireDate")),
            _from_json_data(str, data.get("issueDate")),
            _from_json_data(str, data.get("licenseLevel")),
            _from_json_data(str, data.get("licenseType")),
            _from_json_data(int, data.get("recordLimit")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["advSearch"] = _to_json_data(self.adv_search)
        data["billing"] = _to_json_data(self.billing)
        data["contract"] = _to_json_data(self.contract)
        data["customer"] = _to_json_data(self.customer)
        data["expireDate"] = _to_json_data(self.expire_date)
        data["issueDate"] = _to_json_data(self.issue_date)
        data["licenseLevel"] = _to_json_data(self.license_level)
        data["licenseType"] = _to_json_data(self.license_type)
        data["recordLimit"] = _to_json_data(self.record_limit)
        return data

@dataclass
class SzProductGetVersionResponse:
    build_date: 'str'
    build_number: 'str'
    build_version: 'str'
    compatibility_version: 'CompatibilityVersion'
    product_name: 'str'
    schema_version: 'SchemaVersion'
    version: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'SzProductGetVersionResponse':
        return cls(
            _from_json_data(str, data.get("BUILD_DATE")),
            _from_json_data(str, data.get("BUILD_NUMBER")),
            _from_json_data(str, data.get("BUILD_VERSION")),
            _from_json_data(CompatibilityVersion, data.get("COMPATIBILITY_VERSION")),
            _from_json_data(str, data.get("PRODUCT_NAME")),
            _from_json_data(SchemaVersion, data.get("SCHEMA_VERSION")),
            _from_json_data(str, data.get("VERSION")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["BUILD_DATE"] = _to_json_data(self.build_date)
        data["BUILD_NUMBER"] = _to_json_data(self.build_number)
        data["BUILD_VERSION"] = _to_json_data(self.build_version)
        data["COMPATIBILITY_VERSION"] = _to_json_data(self.compatibility_version)
        data["PRODUCT_NAME"] = _to_json_data(self.product_name)
        data["SCHEMA_VERSION"] = _to_json_data(self.schema_version)
        data["VERSION"] = _to_json_data(self.version)
        return data

@dataclass
class ThreadState:
    active: 'int'
    data_latch_contention: 'int'
    governor_contention: 'int'
    idle: 'int'
    loader: 'int'
    obs_ent_contention: 'int'
    res_ent_contention: 'int'
    resolver: 'int'
    scoring: 'int'
    sql_executing: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'ThreadState':
        return cls(
            _from_json_data(int, data.get("active")),
            _from_json_data(int, data.get("dataLatchContention")),
            _from_json_data(int, data.get("governorContention")),
            _from_json_data(int, data.get("idle")),
            _from_json_data(int, data.get("loader")),
            _from_json_data(int, data.get("obsEntContention")),
            _from_json_data(int, data.get("resEntContention")),
            _from_json_data(int, data.get("resolver")),
            _from_json_data(int, data.get("scoring")),
            _from_json_data(int, data.get("sqlExecuting")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["active"] = _to_json_data(self.active)
        data["dataLatchContention"] = _to_json_data(self.data_latch_contention)
        data["governorContention"] = _to_json_data(self.governor_contention)
        data["idle"] = _to_json_data(self.idle)
        data["loader"] = _to_json_data(self.loader)
        data["obsEntContention"] = _to_json_data(self.obs_ent_contention)
        data["resEntContention"] = _to_json_data(self.res_ent_contention)
        data["resolver"] = _to_json_data(self.resolver)
        data["scoring"] = _to_json_data(self.scoring)
        data["sqlExecuting"] = _to_json_data(self.sql_executing)
        return data

@dataclass
class UmfProc:
    name: 'str'
    params: 'List[Params]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'UmfProc':
        return cls(
            _from_json_data(str, data.get("NAME")),
            _from_json_data(List[Params], data.get("PARAMS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["NAME"] = _to_json_data(self.name)
        data["PARAMS"] = _to_json_data(self.params)
        return data

@dataclass
class Unresolve:
    aborted_unresolve: 'int'
    triggers: 'UnresolveTriggers'
    unresolve_test: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Unresolve':
        return cls(
            _from_json_data(int, data.get("abortedUnresolve")),
            _from_json_data(UnresolveTriggers, data.get("triggers")),
            _from_json_data(int, data.get("unresolveTest")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["abortedUnresolve"] = _to_json_data(self.aborted_unresolve)
        data["triggers"] = _to_json_data(self.triggers)
        data["unresolveTest"] = _to_json_data(self.unresolve_test)
        return data

@dataclass
class UnresolveTriggers:
    ambiguous_multi_resolve: 'int'
    ambiguous_no_resolve: 'int'
    extensive_resolve: 'int'
    normal_resolve: 'int'
    rel_link: 'int'
    update: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'UnresolveTriggers':
        return cls(
            _from_json_data(int, data.get("ambiguousMultiResolve")),
            _from_json_data(int, data.get("ambiguousNoResolve")),
            _from_json_data(int, data.get("extensiveResolve")),
            _from_json_data(int, data.get("normalResolve")),
            _from_json_data(int, data.get("relLink")),
            _from_json_data(int, data.get("update")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ambiguousMultiResolve"] = _to_json_data(self.ambiguous_multi_resolve)
        data["ambiguousNoResolve"] = _to_json_data(self.ambiguous_no_resolve)
        data["extensiveResolve"] = _to_json_data(self.extensive_resolve)
        data["normalResolve"] = _to_json_data(self.normal_resolve)
        data["relLink"] = _to_json_data(self.rel_link)
        data["update"] = _to_json_data(self.update)
        return data

@dataclass
class VirtualEntitySynopsis:
    member_records: 'List[MemberRecord]'
    virtual_entity_id: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'VirtualEntitySynopsis':
        return cls(
            _from_json_data(List[MemberRecord], data.get("MEMBER_RECORDS")),
            _from_json_data(str, data.get("VIRTUAL_ENTITY_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["MEMBER_RECORDS"] = _to_json_data(self.member_records)
        data["VIRTUAL_ENTITY_ID"] = _to_json_data(self.virtual_entity_id)
        return data

@dataclass
class WhyKeyDetails:
    confirmations: 'List[Confirmation]'
    denials: 'List[Confirmation]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'WhyKeyDetails':
        return cls(
            _from_json_data(List[Confirmation], data.get("CONFIRMATIONS")),
            _from_json_data(List[Confirmation], data.get("DENIALS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CONFIRMATIONS"] = _to_json_data(self.confirmations)
        data["DENIALS"] = _to_json_data(self.denials)
        return data

@dataclass
class WhyResult:
    entity_id: 'int'
    """
    The ENTITY_ID is the Senzing-generated identifier for the discovered entity.
    It may change when new information is added.
    """

    entity_id0: 'int'
    focus_records: 'List[FocusRecord]'
    focus_records0: 'List[FocusRecord]'
    internal_id: 'int'
    """
    Internal identifier for the record.
    """

    internal_id0: 'int'
    """
    Internal identifier for the record.
    """

    match_info: 'MatchInfoForWhy'

    @classmethod
    def from_json_data(cls, data: Any) -> 'WhyResult':
        return cls(
            _from_json_data(int, data.get("ENTITY_ID")),
            _from_json_data(int, data.get("ENTITY_ID_2")),
            _from_json_data(List[FocusRecord], data.get("FOCUS_RECORDS")),
            _from_json_data(List[FocusRecord], data.get("FOCUS_RECORDS_2")),
            _from_json_data(int, data.get("INTERNAL_ID")),
            _from_json_data(int, data.get("INTERNAL_ID_2")),
            _from_json_data(MatchInfoForWhy, data.get("MATCH_INFO")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ENTITY_ID"] = _to_json_data(self.entity_id)
        data["ENTITY_ID_2"] = _to_json_data(self.entity_id0)
        data["FOCUS_RECORDS"] = _to_json_data(self.focus_records)
        data["FOCUS_RECORDS_2"] = _to_json_data(self.focus_records0)
        data["INTERNAL_ID"] = _to_json_data(self.internal_id)
        data["INTERNAL_ID_2"] = _to_json_data(self.internal_id0)
        data["MATCH_INFO"] = _to_json_data(self.match_info)
        return data

@dataclass
class Workload:
    api_version: 'str'
    caches: 'Caches'
    candidates: 'Candidates'
    contention: 'Contention'
    datetimestamp: 'str'
    expressed_features: 'ExpressedFeatures'
    generic_detect: 'Fixme'
    license: 'License'
    loaded_records: 'int'
    lock_waits: 'LockWaits'
    processing: 'Processing'
    redo_triggers: 'Dict[str, int]'
    repair_diagnosis: 'RepairDiagnosis'
    reresolve: 'Reresolve'
    scoring: 'Scoring'
    system_resources: 'SystemResources'
    thread_state: 'ThreadState'
    unresolve: 'Unresolve'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Workload':
        return cls(
            _from_json_data(str, data.get("apiVersion")),
            _from_json_data(Caches, data.get("caches")),
            _from_json_data(Candidates, data.get("candidates")),
            _from_json_data(Contention, data.get("contention")),
            _from_json_data(str, data.get("datetimestamp")),
            _from_json_data(ExpressedFeatures, data.get("expressedFeatures")),
            _from_json_data(Fixme, data.get("genericDetect")),
            _from_json_data(License, data.get("license")),
            _from_json_data(int, data.get("loadedRecords")),
            _from_json_data(LockWaits, data.get("lockWaits")),
            _from_json_data(Processing, data.get("processing")),
            _from_json_data(Dict[str, int], data.get("redoTriggers")),
            _from_json_data(RepairDiagnosis, data.get("repairDiagnosis")),
            _from_json_data(Reresolve, data.get("reresolve")),
            _from_json_data(Scoring, data.get("scoring")),
            _from_json_data(SystemResources, data.get("systemResources")),
            _from_json_data(ThreadState, data.get("threadState")),
            _from_json_data(Unresolve, data.get("unresolve")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["apiVersion"] = _to_json_data(self.api_version)
        data["caches"] = _to_json_data(self.caches)
        data["candidates"] = _to_json_data(self.candidates)
        data["contention"] = _to_json_data(self.contention)
        data["datetimestamp"] = _to_json_data(self.datetimestamp)
        data["expressedFeatures"] = _to_json_data(self.expressed_features)
        data["genericDetect"] = _to_json_data(self.generic_detect)
        data["license"] = _to_json_data(self.license)
        data["loadedRecords"] = _to_json_data(self.loaded_records)
        data["lockWaits"] = _to_json_data(self.lock_waits)
        data["processing"] = _to_json_data(self.processing)
        data["redoTriggers"] = _to_json_data(self.redo_triggers)
        data["repairDiagnosis"] = _to_json_data(self.repair_diagnosis)
        data["reresolve"] = _to_json_data(self.reresolve)
        data["scoring"] = _to_json_data(self.scoring)
        data["systemResources"] = _to_json_data(self.system_resources)
        data["threadState"] = _to_json_data(self.thread_state)
        data["unresolve"] = _to_json_data(self.unresolve)
        return data

def _from_json_data(cls: Any, data: Any) -> Any:
    if data is None or cls in [bool, int, float, str, object] or cls is Any:
        return data
    if cls is datetime:
        return _parse_rfc3339(data)
    if get_origin(cls) is Union:
        return _from_json_data(get_args(cls)[0], data)
    if get_origin(cls) is list:
        return [_from_json_data(get_args(cls)[0], d) for d in data]
    if get_origin(cls) is dict:
        return { k: _from_json_data(get_args(cls)[1], v) for k, v in data.items() }
    return cls.from_json_data(data)

def _to_json_data(data: Any) -> Any:
    if data is None or type(data) in [bool, int, float, str, object]:
        return data
    if type(data) is datetime:
        return data.isoformat()
    if type(data) is list:
        return [_to_json_data(d) for d in data]
    if type(data) is dict:
        return { k: _to_json_data(v) for k, v in data.items() }
    return data.to_json_data()

def _parse_rfc3339(s: str) -> datetime:
    datetime_re = '^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(\.\d+)?([zZ]|((\+|-)(\d{2}):(\d{2})))$'
    match = re.match(datetime_re, s)
    if not match:
        raise ValueError('Invalid RFC3339 date/time', s)

    (year, month, day, hour, minute, second, frac_seconds, offset,
     *tz) = match.groups()

    frac_seconds_parsed = None
    if frac_seconds:
        frac_seconds_parsed = int(float(frac_seconds) * 1_000_000)
    else:
        frac_seconds_parsed = 0

    tzinfo = None
    if offset == 'Z':
        tzinfo = timezone.utc
    else:
        hours = int(tz[2])
        minutes = int(tz[3])
        sign = 1 if tz[1] == '+' else -1

        if minutes not in range(60):
            raise ValueError('minute offset must be in 0..59')

        tzinfo = timezone(timedelta(minutes=sign * (60 * hours + minutes)))

    second_parsed = int(second)
    if second_parsed == 60:
        second_parsed = 59

    return datetime(int(year), int(month), int(day), int(hour), int(minute),
                    second_parsed, frac_seconds_parsed, tzinfo)            
