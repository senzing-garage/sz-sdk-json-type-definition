// Code generated by jtd-codegen for TypeScript v0.2.1

export type Senzingapi = any;

export interface AdditionalScores {
  FULL_SCORE: number;
  GENERATION_MATCH: number;
  GNR_FN: number;
  GNR_GN: number;
  GNR_ON: number;
  GNR_SN: number;
}

export interface AffectedEntity {
  /**
   * The ENTITY_ID is the Senzing-generated identifier for the discovered
   * entity. It may change when new information is added.
   */
  ENTITY_ID: number;
}

export interface CfgAttr {
  ADVANCED: string;
  ATTR_CLASS: string;
  ATTR_CODE: string;
  ATTR_ID: number;
  DEFAULT_VALUE: string;
  FELEM_CODE: string;
  FELEM_REQ: string;
  FTYPE_CODE: string;
  INTERNAL: string;
}

export interface CfgCfbom {
  CFCALL_ID: number;
  EXEC_ORDER: number;
  FELEM_ID: number;
  FTYPE_ID: number;
}

export interface CfgCfcall {
  CFCALL_ID: number;
  CFUNC_ID: number;
  EXEC_ORDER: number;
  FTYPE_ID: number;
}

export interface CfgCfrtn {
  CFRTN_ID: number;
  CFUNC_ID: number;
  CFUNC_RTNVAL: string;
  CLOSE_SCORE: number;
  EXEC_ORDER: number;
  FTYPE_ID: number;
  LIKELY_SCORE: number;
  PLAUSIBLE_SCORE: number;
  SAME_SCORE: number;
  UN_LIKELY_SCORE: number;
}

export interface CfgCfunc {
  ANON_SUPPORT: string;
  CFUNC_CODE: string;
  CFUNC_DESC: string;
  CFUNC_ID: number;
  CONNECT_STR: string;
  FUNC_LIB: string;
  FUNC_VER: string;
  JAVA_CLASS_NAME: string;
  LANGUAGE: string;
}

export interface CfgDfbom {
  DFCALL_ID: number;
  EXEC_ORDER: number;
  FELEM_ID: number;
  FTYPE_ID: number;
}

export interface CfgDfcall {
  DFCALL_ID: number;
  DFUNC_ID: number;
  EXEC_ORDER: number;
  FTYPE_ID: number;
}

export interface CfgDfunc {
  ANON_SUPPORT: string;
  CONNECT_STR: string;
  DFUNC_CODE: string;
  DFUNC_DESC: string;
  DFUNC_ID: number;
  FUNC_LIB: string;
  FUNC_VER: string;
  JAVA_CLASS_NAME: string;
  LANGUAGE: string;
}

export interface CfgDsrc {
  CONVERSATIONAL: string;
  DSRC_CODE: string;
  DSRC_DESC: string;
  DSRC_ID: number;
  DSRC_RELY: number;
  RETENTION_LEVEL: string;
}

export interface CfgDsrcInterest {
  DSRC_ID: number;
  INTEREST_FLAG: string;
  MAX_DEGREE: number;
}

export interface CfgEbom {
  ETYPE_ID: number;
  EXEC_ORDER: number;
  FTYPE_ID: number;
  UTYPE_CODE: string;
}

export interface CfgEclass {
  ECLASS_CODE: string;
  ECLASS_DESC: string;
  ECLASS_ID: number;
  RESOLVE: string;
}

export interface CfgEfbom {
  EFCALL_ID: number;
  EXEC_ORDER: number;
  FELEM_ID: number;
  FELEM_REQ: string;
  FTYPE_ID: number;
}

export interface CfgEfcall {
  EFCALL_ID: number;
  EFEAT_FTYPE_ID: number;
  EFUNC_ID: number;
  EXEC_ORDER: number;
  FELEM_ID: number;
  FTYPE_ID: number;
  IS_VIRTUAL: string;
}

export interface CfgEfunc {
  CONNECT_STR: string;
  EFUNC_CODE: string;
  EFUNC_DESC: string;
  EFUNC_ID: number;
  FUNC_LIB: string;
  FUNC_VER: string;
  JAVA_CLASS_NAME: string;
  LANGUAGE: string;
}

export interface CfgErfrag {
  ERFRAG_CODE: string;
  ERFRAG_DEPENDS: string;
  ERFRAG_DESC: string;
  ERFRAG_ID: number;
  ERFRAG_SOURCE: string;
}

export interface CfgErrule {
  DISQ_ERFRAG_CODE: string;
  ERRULE_CODE: string;
  ERRULE_DESC: string;
  ERRULE_ID: number;
  ERRULE_TIER: number;
  QUAL_ERFRAG_CODE: string;
  REF_SCORE: number;
  RELATE: string;
  RESOLVE: string;
  RTYPE_ID: number;
}

export interface CfgEtype {
  ECLASS_ID: number;
  ETYPE_CODE: string;
  ETYPE_DESC: string;
  ETYPE_ID: number;
}

export interface CfgFbom {
  DERIVED: string;
  DISPLAY_DELIM: string;
  DISPLAY_LEVEL: number;
  EXEC_ORDER: number;
  FELEM_ID: number;
  FTYPE_ID: number;
}

export interface CfgFbovr {
  ECLASS_ID: number;
  FTYPE_EXCL: string;
  FTYPE_FREQ: string;
  FTYPE_ID: number;
  FTYPE_STAB: string;
  UTYPE_CODE: string;
}

export interface CfgFclass {
  FCLASS_CODE: string;
  FCLASS_DESC: string;
  FCLASS_ID: number;
}

export interface CfgFelem {
  DATA_TYPE: string;
  FELEM_CODE: string;
  FELEM_DESC: string;
  FELEM_ID: number;
  TOKENIZE: string;
}

export interface CfgFtype {
  ANONYMIZE: string;
  DERIVATION: string;
  DERIVED: string;
  FCLASS_ID: number;
  FTYPE_CODE: string;
  FTYPE_DESC: string;
  FTYPE_EXCL: string;
  FTYPE_FREQ: string;
  FTYPE_ID: number;
  FTYPE_STAB: string;
  PERSIST_HISTORY: string;
  RTYPE_ID: number;
  SHOW_IN_MATCH_KEY: string;
  USED_FOR_CAND: string;
  VERSION: number;
}

export interface CfgGenericThreshold {
  BEHAVIOR: string;
  CANDIDATE_CAP: number;
  FTYPE_ID: number;
  GPLAN_ID: number;
  SCORING_CAP: number;
  SEND_TO_REDO: string;
}

export interface CfgGplan {
  GPLAN_CODE: string;
  GPLAN_DESC: string;
  GPLAN_ID: number;
}

export interface CfgLens {
  LENS_CODE: string;
  LENS_DESC: string;
  LENS_ID: number;
}

export type CfgLensrl = Fixme[];

export interface CfgRclass {
  IS_DISCLOSED: string;
  RCLASS_CODE: string;
  RCLASS_DESC: string;
  RCLASS_ID: number;
}

export interface CfgRtype {
  BREAK_RES: string;
  RCLASS_ID: number;
  REL_STRENGTH: number;
  RTYPE_CODE: string;
  RTYPE_DESC: string;
  RTYPE_ID: number;
}

export interface CfgSfcall {
  EXEC_ORDER: number;
  FELEM_ID: number;
  FTYPE_ID: number;
  SFCALL_ID: number;
  SFUNC_ID: number;
}

export interface CfgSfunc {
  CONNECT_STR: string;
  FUNC_LIB: string;
  FUNC_VER: string;
  JAVA_CLASS_NAME: string;
  LANGUAGE: string;
  SFUNC_CODE: string;
  SFUNC_DESC: string;
  SFUNC_ID: number;
}

export interface ConfigBaseVersion {
  BUILD_DATE: string;
  BUILD_NUMBER: string;
  BUILD_VERSION: string;
  COMPATIBILITY_VERSION: CompatibilityVersion;
  PRODUCT_NAME: string;
  VERSION: string;
}

export interface Caches {
  libFeatCacheHit: number;
  libFeatCacheMiss: number;
  libFeatInsert: number;
  resFeatStatCacheHit: number;
  resFeatStatCacheMiss: number;
  resFeatStatInsert: number;
  resFeatStatUpdateAttempt: number;
  resFeatStatUpdateFail: number;
}

export interface Candidates {
  candidateBuilders: MapStringToInteger;
  suppressedCandidateBuilders: MapStringToInteger;
}

export interface CompatibilityVersion {
  CONFIG_VERSION: string;
}

export interface Config {
  CONFIG_COMMENTS: string;
  CONFIG_ID: number;
  SYS_CREATE_DT: string;
}

export interface Confirmation {
  ADDITIONAL_SCORES: AdditionalScores;
  CANDIDATE_FEAT_DESC: string;
  CANDIDATE_FEAT_ID: number;
  CANDIDATE_FEAT_USAGE_TYPE: string;
  FTYPE_CODE: string;
  INBOUND_FEAT_DESC: string;
  INBOUND_FEAT_ID: number;
  INBOUND_FEAT_USAGE_TYPE: string;
  SCORE: number;
  SCORE_BEHAVIOR: string;
  SCORE_BUCKET: string;
  SOURCE: string;
  TOKEN: string;
}

export interface Contention {
  feature: Fixme;
  resEnt: Fixme;
  valuelatch: Fixme;
}

export interface CurrResources {
  activeThreads: number;
  availableMemory: string;
  processMemory: string;
  systemLoad: SystemLoad[];
  workerThreads: number;
}

export interface DataSource {
  /**
   * The text representation of the datasource.
   */
  DSRC_CODE: string;

  /**
   * The unique identifier of the datasource.
   */
  DSRC_ID: number;
}

export interface DisclosedRelation {
  DOMAIN: string;
  FEAT_DESC: string;
  FEAT_ID: number;
  FEAT_USAGE_TYPE: string;
  LINKED_FEAT_DESC: string;
  LINKED_FEAT_ID: number;
  LINKED_FEAT_TYPE: string;
  REL_ANCHOR: RelAnchor[];
}

export interface Entity {
  RELATED_ENTITIES: RelatedEntity[];
  RESOLVED_ENTITY: ResolvedEntity;
}

export interface EntityForWhySearch {
  RELATED_ENTITIES: RelatedEntity[];
  RESOLVED_ENTITY: ResolvedEntity;
}

export interface EntityNetworkLink {
  ERRULE_CODE: string;
  IS_AMBIGUOUS: number;
  IS_DISCLOSED: number;
  MATCH_KEY: string;
  MATCH_LEVEL_CODE: string;
  MAX_ENTITY_ID: number;
  MIN_ENTITY_ID: number;
}

export interface EntityPath {
  END_ENTITY_ID: number;
  ENTITIES: number[];
  START_ENTITY_ID: number;
}

export interface EntityPathLink {
  ERRULE_CODE: string;
  IS_AMBIGUOUS: number;
  IS_DISCLOSED: number;
  MATCH_KEY: string;
  MATCH_LEVEL_CODE: string;
  MAX_ENTITY_ID: number;
  MIN_ENTITY_ID: number;
}

export interface ExpressedFeatures {
  calls: ExpressedFeaturesCall[];
  created: MapStringToInteger;
}

export interface ExpressedFeaturesCall {
  EFCALL_ID: number;
  EFUNC_CODE: string;
  numCalls: number;
}

export interface Feature {
  FELEM_CODE: string;
  FELEM_VALUE: string;
}

export interface FeatureDescriptionValue {
  ATTRIBUTES: MapStringToString;
  CANDIDATE_CAP_REACHED: string;
  ENTITY_COUNT: number;
  FEAT_DESC: string;
  LIB_FEAT_ID: number;
  SCORING_CAP_REACHED: string;
  SUPPRESSED: string;
  USED_FOR_CAND: string;
  USED_FOR_SCORING: string;
}

export interface FeatureForAttribute {
  FEAT_DESC: string;
  FEAT_DESC_VALUES: FeatureDescriptionValue[];
  LIB_FEAT_ID: number;
  USAGE_TYPE: string;
}

export interface FeatureForAttributeWithAttributes {
  ATTRIBUTES: SenzingEntitySpecification;
  FEAT_DESC: string;
  FEAT_DESC_VALUES: FeatureDescriptionValue[];
  LIB_FEAT_ID: number;
  USAGE_TYPE: string;
}

export interface FeatureForGetEntity {
  ATTRIBUTES: SenzingEntitySpecification[];
  FEAT_DESC: string;
  FEAT_DESC_VALUES: FeatureDescriptionValue[];
  LIB_FEAT_ID: number;
  USAGE_TYPE: string;
}

export interface FeatureId {
  LIB_FEAT_ID: number;
  USAGE_TYPE: string;
}

export type FeatureIds = FeatureId[];

export interface FeatureScoreForAttribute {
  ADDITIONAL_SCORES: AdditionalScores;
  CANDIDATE_FEAT_DESC: string;
  CANDIDATE_FEAT_ID: number;
  CANDIDATE_FEAT_USAGE_TYPE: string;
  INBOUND_FEAT_DESC: string;
  INBOUND_FEAT_ID: number;
  INBOUND_FEAT_USAGE_TYPE: string;
  SCORE: number;
  SCORE_BEHAVIOR: string;
  SCORE_BUCKET: string;
}

export type FeatureScores = MapStringToFeatureScoresForAttribute;

export type FeatureScoresForAttribute = FeatureScoreForAttribute[];

export interface FinalState {
  NEED_REEVALUATION: number;
  VIRTUAL_ENTITIES: VirtualEntitySynopsis[];
}

export interface Fixme {
  FIXME_KEY: string;
}

export interface FocusRecord {
  DATA_SOURCE: string;
  RECORD_ID: string;
}

export type FocusRecords = FocusRecord[];

export interface G2configSettings {
  METAPHONE_VERSION: number;
}

export interface G2config {
  CFG_ATTR: CfgAttr[];
  CFG_CFBOM: CfgCfbom[];
  CFG_CFCALL: CfgCfcall[];
  CFG_CFRTN: CfgCfrtn[];
  CFG_CFUNC: CfgCfunc[];
  CFG_DFBOM: CfgDfbom[];
  CFG_DFCALL: CfgDfcall[];
  CFG_DFUNC: CfgDfunc[];
  CFG_DSRC: CfgDsrc[];
  CFG_DSRC_INTEREST: CfgDsrcInterest[];
  CFG_EBOM: CfgEbom[];
  CFG_ECLASS: CfgEclass[];
  CFG_EFBOM: CfgEfbom[];
  CFG_EFCALL: CfgEfcall[];
  CFG_EFUNC: CfgEfunc[];
  CFG_ERFRAG: CfgErfrag[];
  CFG_ERRULE: CfgErrule[];
  CFG_ETYPE: CfgEtype[];
  CFG_FBOM: CfgFbom[];
  CFG_FBOVR: CfgFbovr[];
  CFG_FCLASS: CfgFclass[];
  CFG_FELEM: CfgFelem[];
  CFG_FTYPE: CfgFtype[];
  CFG_GENERIC_THRESHOLD: CfgGenericThreshold[];
  CFG_GPLAN: CfgGplan[];
  CFG_LENS: CfgLens[];
  CFG_LENSRL: CfgLensrl[];
  CFG_RCLASS: CfgRclass[];
  CFG_RTYPE: CfgRtype[];
  CFG_SFCALL: CfgSfcall[];
  CFG_SFUNC: CfgSfunc[];
  CONFIG_BASE_VERSION: ConfigBaseVersion;
  SETTINGS: G2configSettings;
  SYS_OOM: SysOom[];
}

export interface GetConfig {
  G2_CONFIG: G2config;
}

export interface GetDataSourceRegistry {
  DATA_SOURCES: DataSource[];
}

export interface HowResults {
  FINAL_STATE: FinalState;
  RESOLUTION_STEPS: ResolutionSteps;
}

export interface InitResources {
  availableMemory: string;
  logicalCores: number;
  physicalCores: number;
  totalMemory: string;
}

export interface InterestingEntitiesNotices {
  CODE: string;
  DESCRIPTION: string;
}

export interface InterestingEntities {
  ENTITIES: InterestingEntity[];
  NOTICES: InterestingEntitiesNotices[];
}

export interface InterestingEntitySampleRecords {
  DATA_SOURCE: string;
  FLAGS: string[];
  RECORD_ID: string;
}

export interface InterestingEntity {
  DEGREES: number;

  /**
   * The ENTITY_ID is the Senzing-generated identifier for the discovered
   * entity. It may change when new information is added.
   */
  ENTITY_ID: number;
  FLAGS: string[];
  SAMPLE_RECORDS: InterestingEntitySampleRecords[];
}

export interface License {
  dsrLimit: string;
  status: string;
  type: string;
}

export interface LockWaits {
  refreshLocks: RefreshLocks;
}

export type MapStringToFeatureScoresForAttribute = string;

export type MapStringToInteger = string;

export type MapStringToListOfFeatureDescriptionValue = string;

export type MapStringToListOfFeatureForAttributeWithAttributes = string;

export type MapStringToListOfFeatureForGetEntity = string;

export type MapStringToListOfMatchInfoForAttribute = string;

export type MapStringToObject = string;

export type MapStringToString = string;

export interface MatchInfoDisclosedRelations {
  REL_ANCHOR: RelAnchor[];
  REL_LINK: RelLink[];
  REL_POINTER: RelPointer[];
}

export interface MatchInfo {
  CANDIDATE_KEYS: MatchInfoCandidateKeys;
  DISCLOSED_RELATIONS: MatchInfoDisclosedRelations;
  ERRULE_CODE: string;
  FEATURE_SCORES: FeatureScores;
  MATCH_KEY: string;
  MATCH_KEY_DETAILS: MatchKeyDetails;
  MATCH_LEVEL: number;
  MATCH_LEVEL_CODE: string;
  WHY_ERRULE_CODE: string;
  WHY_KEY: string;
}

export type MatchInfoCandidateKeys = MapStringToListOfMatchInfoForAttribute;

export interface MatchInfoForAttribute {
  FEAT_DESC: string;
  FEAT_ID: number;
}

export interface MatchInfoForWhy {
  CANDIDATE_KEYS: MapStringToListOfMatchInfoForAttribute;
  DISCLOSED_RELATIONS: DisclosedRelation;
  FEATURE_SCORES: FeatureScores;
  MATCH_LEVEL_CODE: string;
  WHY_ERRULE_CODE: string;
  WHY_KEY: string;
  WHY_KEY_DETAILS: WhyKeyDetails;
}

export interface MatchKeyDetails {
  CONFIRMATIONS: Confirmation[];
  DENIALS: Confirmation[];
  ERRULE_CODE: string;
}

export interface MemberRecord {
  INTERNAL_ID: number;
  RECORDS: Records;
}

export type MemberRecords = MemberRecord[];

export interface Notice {
  CODE: string;
  DESCRIPTION: string;
}

export interface Notice0 {
  CODE: string;
  DESCRIPTION: string;
}

export type Notices = Notice0[];

export type Object = string;

export interface Param {
  PARAM: ParamDetails;
}

export interface ParamDetails {
  NAME: string;
  VALUE: Object;
}

export interface Processing {
  addedRecords: number;
  ambiguous: ProcessingAmbiguous;
  batchAddedRecords: number;
  deletedRecords: number;
  details: ProcessingDetails;
  reevaluations: number;
  repairedEntities: number;
}

export interface ProcessingAmbiguous {
  actualTest: number;
  cachedTest: number;
}

export interface ProcessingDetails {
  addedRecords: number;
  candidates: number;
  changeDeletes: number;
  duration: number;
  filteredObsFeat: number;
  newObsEnt: number;
  obsEntHashDiff: number;
  obsEntHashSame: number;
  optimizedOut: number;
  optimizedOutSkipped: number;
  partiallyResolved: number;
  retries: number;
}

export interface Record {
  ADDRESS_DATA: string[];
  ATTRIBUTE_DATA: string[];
  DATA_SOURCE: string;
  ENTITY_DATA: string[];
  ENTITY_DESC: string;
  ENTITY_KEY: string;
  ENTITY_TYPE: string;
  ERRULE_CODE: string;
  FEATURES: MapStringToListOfFeatureForAttributeWithAttributes;
  FEATURE_IDS: FeatureIds;
  FIRST_SEEN_DT: string;
  IDENTIFIER_DATA: string[];
  INTERNAL_ID: number;
  JSON_DATA: MapStringToObject;
  LAST_SEEN_DT: string;
  MATCH_KEY: string;
  MATCH_LEVEL: number;
  MATCH_LEVEL_CODE: string;
  NAME_DATA: string[];
  OTHER_DATA: string[];
  PHONE_DATA: string[];
  RECORD_ID: string;
  RELATIONSHIP_DATA: string[];
  UNMAPPED_DATA: MapStringToObject;
}

export interface RecordForGetEntity {
  ADDRESS_DATA: string[];
  ATTRIBUTE_DATA: string[];
  DATA_SOURCE: string;
  ENTITY_DATA: string[];
  ENTITY_DESC: string;
  ENTITY_KEY: string;
  ENTITY_TYPE: string;
  ERRULE_CODE: string;
  FEATURES: MapStringToListOfFeatureForAttributeWithAttributes;
  FEATURE_IDS: FeatureIds;
  FIRST_SEEN_DT: string;
  IDENTIFIER_DATA: string[];
  INTERNAL_ID: number;
  JSON_DATA: MapStringToObject;
  LAST_SEEN_DT: string;
  MATCH_KEY: string;
  MATCH_LEVEL: number;
  MATCH_LEVEL_CODE: string;
  NAME_DATA: string[];
  OTHER_DATA: string[];
  PHONE_DATA: string[];
  RECORD_ID: string;
  RELATIONSHIP_DATA: string[];
  UNMAPPED_DATA: MapStringToObject;
}

export interface RecordKey {
  /**
   * The data source code identifying the provenance of the record.
   */
  DATA_SOURCE: string;

  /**
   * The unique identifier within the set of records in the DATA_SOURCE.
   */
  RECORD_ID: string;
}

export interface RecordKeys {
  /**
   * A list of (data source code, record id) pairs.
   */
  RECORDS: RecordKey[];
}

export interface RecordSummaryElement {
  DATA_SOURCE: string;
  FIRST_SEEN_DT: string;
  LAST_SEEN_DT: string;
  RECORD_COUNT: number;
}

export type Records = Record[];

export type RecordsForGetEntity = RecordForGetEntity[];

export interface RefreshLocks {
  count: number;
  maxMS: number;
  totalMS: number;
}

export interface RelAnchor {
  DOMAIN: string;
  FEAT_DESC: string;
  FEAT_ID: number;
  LINKED_FEAT_DESC: string;
  LINKED_FEAT_ID: number;
  LINKED_FEAT_TYPE: string;
  LINKED_FEAT_USAGE_TYPE: string;
  REL_POINTER: RelPointer[];
}

export interface RelLink {
  DOMAIN: string;
  FEAT_DESC: string;
  FEAT_ID: number;
  FEAT_USAGE_TYPE: string;
  LINKED_FEAT_DESC: string;
  LINKED_FEAT_ID: number;
  LINKED_FEAT_TYPE: string;
  LINKED_FEAT_USAGE_TYPE: string;
}

export interface RelPointer {
  DOMAIN: string;
  FEAT_DESC: string;
  FEAT_ID: number;
  FEAT_USAGE_TYPE: string;
  LINKED_FEAT_DESC: string;
  LINKED_FEAT_ID: number;
  LINKED_FEAT_TYPE: string;
}

export interface RelatedEntity {
  /**
   * The ENTITY_ID is the Senzing-generated identifier for the discovered
   * entity. It may change when new information is added.
   */
  ENTITY_ID: number;
  ENTITY_NAME: string;
  ERRULE_CODE: string;
  IS_AMBIGUOUS: number;
  IS_DISCLOSED: number;
  LAST_SEEN_DT: string;
  MATCH_KEY: string;
  MATCH_LEVEL: number;
  MATCH_LEVEL_CODE: string;
  RECORDS: Records;
  RECORD_SUMMARY: RecordSummaryElement[];
}

export interface RepairDiagnosis {
  types: number;
}

export interface Repository {
  id: string;
  location: string;
  type: string;
}

export interface Reresolve {
  newFeatureFTypes: MapStringToInteger;
  suppressedCandidateBuildersForReresolve: Fixme;
  suppressedScoredFeatureTypeForReresolve: Fixme;
  triggers: ReresolveTriggers;
}

export interface ReresolveTriggers {
  abortRetry: number;
  multipleResolvableCandidates: number;
  resolveNewFeatures: number;
  skipped: number;
  unresolveMovement: number;
}

export interface ResolutionStep {
  INBOUND_VIRTUAL_ENTITY_ID: string;
  MATCH_INFO: MatchInfo;
  RESULT_VIRTUAL_ENTITY_ID: string;
  STEP: number;
  VIRTUAL_ENTITY_1: VirtualEntitySynopsis;
  VIRTUAL_ENTITY_2: VirtualEntitySynopsis;
}

export type ResolutionSteps = ResolutionStep[];

export interface ResolvedEntity {
  /**
   * The ENTITY_ID is the Senzing-generated identifier for the discovered
   * entity. It may change when new information is added.
   */
  ENTITY_ID: number;
  ENTITY_NAME: string;
  ERRULE_CODE: string;
  FEATURES: MapStringToListOfFeatureForAttributeWithAttributes;
  FEATURE_IDS: FeatureIds;
  IS_AMBIGUOUS: number;
  IS_DISCLOSED: number;
  LAST_SEEN_DT: string;
  MATCH_KEY: string;
  MATCH_LEVEL: number;
  MATCH_LEVEL_CODE: string;
  RECORDS: Records;
  RECORD_SUMMARY: RecordSummaryElement[];
  RECORD_TYPES: string[];
}

export interface ResolvedEntityAndMatchInfoEntity {
  RELATED_ENTITIES: RelatedEntity[];
  RESOLVED_ENTITY: ResolvedEntity;
}

export interface ResolvedEntityAndMatchInfo {
  ENTITY: ResolvedEntityAndMatchInfoEntity;
  MATCH_INFO: MatchInfo;
}

export interface ResolvedEntityForGetEntity {
  /**
   * The ENTITY_ID is the Senzing-generated identifier for the discovered
   * entity. It may change when new information is added.
   */
  ENTITY_ID: number;
  ENTITY_NAME: string;
  ERRULE_CODE: string;
  FEATURES: MapStringToListOfFeatureForGetEntity;
  FEATURE_IDS: FeatureIds;
  IS_AMBIGUOUS: number;
  IS_DISCLOSED: number;
  LAST_SEEN_DT: string;
  MATCH_KEY: string;
  MATCH_LEVEL: number;
  MATCH_LEVEL_CODE: string;
  RECORDS: RecordsForGetEntity;
  RECORD_SUMMARY: RecordSummaryElement[];
  RECORD_TYPES: string[];
}

export interface ResolvedEntityForWhySearch {
  /**
   * The ENTITY_ID is the Senzing-generated identifier for the discovered
   * entity. It may change when new information is added.
   */
  ENTITY_ID: number;
  RELATED_ENTITIES: RelatedEntity[];
}

export interface SysOom {
  FELEM_ID: number;
  FTYPE_ID: number;
  LENS_ID: number;
  LIB_FEAT_ID: number;
  LIB_FELEM_ID: number;
  NEXT_THRESH: number;
  OOM_LEVEL: string;
  OOM_TYPE: string;
  THRESH1_CNT: number;
  THRESH1_OOM: number;
}

export interface SchemaVersion {
  ENGINE_SCHEMA_VERSION: string;
  MAXIMUM_REQUIRED_SCHEMA_VERSION: string;
  MINIMUM_REQUIRED_SCHEMA_VERSION: string;
}

export interface Scoring {
  cacheHit: MapStringToInteger;
  cacheMiss: MapStringToInteger;
  scoredPairs: MapStringToInteger;
  suppressedDisclosedRelationshipDomainCount: number;
  suppressedScoredFeatureType: Fixme;
}

export interface SearchRequest {
  FEATURES: MapStringToListOfFeatureDescriptionValue;
  JSON_DATA: string;
  SEARCH_PROFILE: string;
}

export interface SearchStatisticCandidateKeysFeatureTypes {
  FOUND: number;
  FTYPE_CODE: string;
  GENERIC: number;
  NOT_FOUND: number;
}

export interface SearchStatisticCandidateKeysSummary {
  FOUND: number;
  GENERIC: number;
  NOT_FOUND: number;
}

export interface SearchStatisticCandidateKeys {
  FEATURE_TYPES: SearchStatisticCandidateKeysFeatureTypes[];
  SUMMARY: SearchStatisticCandidateKeysSummary;
}

export interface SearchStatistic {
  CANDIDATE_KEYS: SearchStatisticCandidateKeys;
}

export type SearchStatistics = SearchStatistic[];

export interface SenzingEntitySpecification {
  ACCOUNT_DOMAIN: string;
  ACCOUNT_NUMBER: string;
  ADDR_CITY: string;
  ADDR_COUNTRY: string;
  ADDR_FROM_DATE: string;
  ADDR_FULL: string;
  ADDR_LINE1: string;
  ADDR_LINE2: string;
  ADDR_LINE3: string;
  ADDR_LINE4: string;
  ADDR_LINE5: string;
  ADDR_LINE6: string;
  ADDR_POSTAL_CODE: string;
  ADDR_STATE: string;
  ADDR_THRU_DATE: string;
  ADDR_TYPE: string;
  CITIZENSHIP: string;
  DATE_OF_BIRTH: string;
  DATE_OF_DEATH: string;
  DRIVERS_LICENSE_NUMBER: string;
  DRIVERS_LICENSE_STATE: string;
  DUNS_NUMBER: string;
  EMAIL_ADDRESS: string;
  EMPLOYER: string;
  EMPLOYER_NAME: string;
  FACEBOOK: string;
  GENDER: string;
  GROUP_ASSN_ID_NUMBER: string;
  GROUP_ASSN_ID_TYPE: string;
  GROUP_ASSOCIATION_ORG_NAME: string;
  GROUP_ASSOCIATION_TYPE: string;
  INSTAGRAM: string;
  LEI_NUMBER: string;
  LINKEDIN: string;
  NAME_FIRST: string;
  NAME_FULL: string;
  NAME_LAST: string;
  NAME_ORG: string;
  NAME_PREFIX: string;
  NAME_SUFFIX: string;
  NAME_TYPE: string;
  NATIONALITY: string;
  NATIONAL_ID_COUNTRY: string;
  NATIONAL_ID_NUMBER: string;
  NATIVE_NAME_FULL: string;
  NPI_NUMBER: string;
  OTHER_ID_COUNTRY: string;
  OTHER_ID_NUMBER: string;
  OTHER_ID_TYPE: string;
  PASSPORT_COUNTRY: string;
  PASSPORT_NUMBER: string;
  PHONE_FROM_DATE: string;
  PHONE_NUMBER: string;
  PHONE_THRU_DATE: string;
  PHONE_TYPE: string;
  PLACE_OF_BIRTH: string;
  PRIMARY_NAME_FIRST: string;
  PRIMARY_NAME_FULL: string;
  PRIMARY_NAME_LAST: string;
  PRIMARY_NAME_MIDDLE: string;
  PRIMARY_NAME_ORG: string;
  RECORD_TYPE: string;
  REGISTRATION_COUNTRY: string;
  REGISTRATION_DATE: string;
  REL_ANCHOR_KEY: string;
  REL_POINTER_KEY: string;
  SECONDARY_NAME_ORG: string;
  SIGNAL: string;
  SKYPE: string;
  SSN_NUMBER: string;
  TANGO: string;
  TAX_ID_COUNTRY: string;
  TAX_ID_NUMBER: string;
  TAX_ID_TYPE: string;
  TELEGRAM: string;
  TRUSTED_ID_NUMBER: string;
  TRUSTED_ID_TYPE: string;
  TWITTER: string;
  VIBER: string;
  WEBSITE_ADDRESS: string;
  WECHAT: string;
  WHATSAPP: string;
  ZOOMROOM: string;
}

export interface SystemLoad {
  cpuIdle: number;
  cpuSystem: number;
  cpuUser: number;
  cpuWait: number;
}

export interface SystemLoadStrings {
  cpuIdle: string;
  cpuSystem: string;
  cpuUser: string;
  cpuWait: string;
}

export interface SystemResources {
  currResources: CurrResources;
  initResources: InitResources;
  systemLoad: SystemLoadStrings;
}

export interface SzConfigExportResponse {
  G2_CONFIG: G2config;
}

export interface SzConfigGetDataSourceRegistryResponse {
  DATA_SOURCES: DataSource[];
}

export interface SzConfigManagerGetConfigRegistryResponse {
  CONFIGS: Config[];
}

export interface SzConfigRegisterDataSourceResponse {
  DSRC_ID: number;
}

export interface SzConfigUnregisterDataSourceResponse {
  FIXME: Fixme;
}

export interface SzDiagnosticCheckRepositoryPerformanceResponse {
  insertTime: number;
  numRecordsInserted: number;
}

export interface SzDiagnosticGetFeatureResponse {
  ELEMENTS: Feature[];
  FTYPE_CODE: string;
  LIB_FEAT_ID: number;
}

export interface SzDiagnosticGetRepositoryInfoResponse {
  dataStores: Repository[];
}

export interface SzEngineAddRecordResponse {
  AFFECTED_ENTITIES: AffectedEntity[];
  DATA_SOURCE: string;
  INTERESTING_ENTITIES: InterestingEntities;
  RECORD_ID: string;
}

export interface SzEngineDeleteRecordResponse {
  AFFECTED_ENTITIES: AffectedEntity[];
  DATA_SOURCE: string;
  INTERESTING_ENTITIES: InterestingEntities;
  RECORD_ID: string;
}

export interface SzEngineExportCsvEntityReportCsvColumnList {
  FIXME: Fixme;
}

export interface SzEngineFetchNextResponse {
  FIXME: Fixme;
}

export interface SzEngineFindInterestingEntitiesByEntityIdResponse {
  INTERESTING_ENTITIES: InterestingEntities;
}

export interface SzEngineFindInterestingEntitiesByRecordIdResponse {
  INTERESTING_ENTITIES: InterestingEntities;
}

export interface SzEngineFindNetworkByEntityIdEntityIds {
  FIXME: Fixme;
}

export interface SzEngineFindNetworkByEntityIdResponse {
  ENTITIES: Entity[];
  ENTITY_NETWORK_LINKS: EntityNetworkLink[];
  ENTITY_PATHS: EntityPath[];
  ENTITY_PATH_LINKS: EntityPathLink[];
  MAX_ENTITY_LIMIT_REACHED: string;
}

export interface SzEngineFindNetworkByRecordIdRecordKeys {
  /**
   * A list of (data source code, record id) pairs.
   */
  RECORDS: RecordKey[];
}

export interface SzEngineFindNetworkByRecordIdResponse {
  ENTITIES: Entity[];
  ENTITY_NETWORK_LINKS: EntityNetworkLink[];
  ENTITY_PATHS: EntityPath[];
  ENTITY_PATH_LINKS: EntityPathLink[];
  MAX_ENTITY_LIMIT_REACHED: string;
}

export interface SzEngineFindPathByEntityIdAvoidEntityIds {
  FIXME: Fixme;
}

export interface SzEngineFindPathByEntityIdRequiredDataSources {
  FIXME: Fixme;
}

export interface SzEngineFindPathByEntityIdResponse {
  ENTITIES: Entity[];
  ENTITY_PATHS: EntityPath[];
  ENTITY_PATH_LINKS: EntityPathLink[];
}

export interface SzEngineFindPathByRecordIdAvoidRecordKeys {
  /**
   * A list of (data source code, record id) pairs.
   */
  RECORDS: RecordKey[];
}

export interface SzEngineFindPathByRecordIdRequiredDataSources {
  FIXME: Fixme;
}

export interface SzEngineFindPathByRecordIdResponse {
  ENTITIES: Entity[];
  ENTITY_PATHS: EntityPath[];
  ENTITY_PATH_LINKS: EntityPathLink[];
}

export interface SzEngineGetEntityByEntityIdResponse {
  RELATED_ENTITIES: RelatedEntity[];
  RESOLVED_ENTITY: ResolvedEntityForGetEntity;
}

export interface SzEngineGetEntityByRecordIdResponse {
  RELATED_ENTITIES: RelatedEntity[];
  RESOLVED_ENTITY: ResolvedEntityForGetEntity;
}

export interface SzEngineGetRecordPreviewResponse {
  FEATURES: MapStringToListOfFeatureForAttributeWithAttributes;
  FEATURE_IDS: FeatureId[];
  JSON_DATA: MapStringToObject;
  UNMAPPED_DATA: MapStringToObject;
}

export interface SzEngineGetRecordResponse {
  ADDRESS_DATA: string[];
  ATTRIBUTE_DATA: string[];
  DATA_SOURCE: string;
  ENTITY_DATA: string[];
  ENTITY_DESC: string;
  ENTITY_KEY: string;
  ENTITY_TYPE: string;
  ERRULE_CODE: string;
  FEATURES: MapStringToListOfFeatureForAttributeWithAttributes;
  FEATURE_IDS: FeatureIds;
  FIRST_SEEN_DT: string;
  IDENTIFIER_DATA: string[];
  INTERNAL_ID: number;
  JSON_DATA: MapStringToObject;
  LAST_SEEN_DT: string;
  MATCH_KEY: string;
  MATCH_LEVEL: number;
  MATCH_LEVEL_CODE: string;
  NAME_DATA: string[];
  OTHER_DATA: string[];
  PHONE_DATA: string[];
  RECORD_ID: string;
  RELATIONSHIP_DATA: string[];
  UNMAPPED_DATA: MapStringToObject;
}

export interface SzEngineGetRedoRecordResponse {
  UMF_PROC: UmfProc;
}

export interface SzEngineGetStatsResponse {
  workload: Workload;
}

export interface SzEngineGetVirtualEntityByRecordIdRecordKeys {
  /**
   * A list of (data source code, record id) pairs.
   */
  RECORDS: RecordKey[];
}

export interface SzEngineGetVirtualEntityByRecordIdResponse {
  RESOLVED_ENTITY: ResolvedEntity;
}

export interface SzEngineHowEntityByEntityIdResponse {
  HOW_RESULTS: HowResults;
}

export interface SzEngineProcessRedoRecordResponse {
  AFFECTED_ENTITIES: AffectedEntity[];
  DATA_SOURCE: string;
  INTERESTING_ENTITIES: InterestingEntities;
  RECORD_ID: string;
}

export interface SzEngineReevaluateEntityResponse {
  AFFECTED_ENTITIES: AffectedEntity[];
  DATA_SOURCE: string;
  INTERESTING_ENTITIES: InterestingEntities;
  RECORD_ID: string;
}

export interface SzEngineReevaluateRecordResponse {
  AFFECTED_ENTITIES: AffectedEntity[];
  DATA_SOURCE: string;
  INTERESTING_ENTITIES: InterestingEntities;
  RECORD_ID: string;
}

export interface SzEngineSearchByAttributesAttributes {
  FIXME: Fixme;
}

export interface SzEngineSearchByAttributesResponse {
  RESOLVED_ENTITIES: ResolvedEntityAndMatchInfo[];
  SEARCH_REQUEST: SearchRequest;
  SEARCH_STATISTICS: SearchStatistics;
}

export interface SzEngineSearchByAttributesSearchProfile {
  FIXME: Fixme;
}

export interface SzEngineStreamExportJsonEntityReportResponse {
  FIXME: Fixme;
}

export interface SzEngineWhyEntitiesResponse {
  ENTITIES: Entity[];
  WHY_RESULTS: WhyResults;
}

export interface SzEngineWhyRecordInEntityResponse {
  ENTITIES: Entity[];
  WHY_RESULTS: WhyResult[];
}

export interface SzEngineWhyRecordsResponse {
  ENTITIES: Entity[];
  WHY_RESULTS: WhyResults;
}

export interface SzEngineWhySearchAttributes {
  FIXME: Fixme;
}

export interface SzEngineWhySearchResponse {
  ENTITIES: EntityForWhySearch[];
  SEARCH_REQUEST: SearchRequest;
  SEARCH_STATISTICS: SearchStatistic[];
  WHY_RESULTS: WhyResult[];
}

export interface SzEngineWhySearchSearchProfile {
  FIXME: Fixme;
}

export interface SzProductGetLicenseResponse {
  advSearch: number;
  billing: string;
  contract: string;
  customer: string;
  expireDate: string;
  issueDate: string;
  licenseLevel: string;
  licenseType: string;
  recordLimit: number;
}

export interface SzProductGetVersionResponse {
  BUILD_DATE: string;
  BUILD_NUMBER: string;
  BUILD_VERSION: string;
  COMPATIBILITY_VERSION: CompatibilityVersion;
  PRODUCT_NAME: string;
  SCHEMA_VERSION: SchemaVersion;
  VERSION: string;
}

export interface SzTestResponse {
  FIELD_1: string[];

  /**
   * FIXME: 2
   */
  FIELD_2: number;

  /**
   * FIXME: 3
   */
  FIELD_3: SzTestResponse1;
  RESOLVED_ENTITIES: ResolvedEntityAndMatchInfo[];
}

export interface SzTestResponse1 {
  /**
   * FIXME: 1.1
   */
  "FIELD_1.1": string;
}

export interface ThreadState {
  active: number;
  dataLatchContention: number;
  governorContention: number;
  idle: number;
  loader: number;
  obsEntContention: number;
  resEntContention: number;
  resolver: number;
  scoring: number;
  sqlExecuting: number;
}

export interface UmfProc {
  NAME: string;
  PARAMS: Param[];
}

export interface Unresolve {
  abortedUnresolve: number;
  triggers: UnresolveTriggers;
  unresolveTest: number;
}

export interface UnresolveTriggers {
  ambiguousMultiResolve: number;
  ambiguousNoResolve: number;
  extensiveResolve: number;
  normalResolve: number;
  relLink: number;
  update: number;
}

export interface VirtualEntity {
  RESOLVED_ENTITY: ResolvedEntity;
}

export interface VirtualEntitySynopsis {
  MEMBER_RECORDS: MemberRecords;
  VIRTUAL_ENTITY_ID: string;
}

export interface WhyKeyDetails {
  CONFIRMATIONS: Confirmation[];
  DENIALS: Confirmation[];
}

export interface WhyResult {
  /**
   * The ENTITY_ID is the Senzing-generated identifier for the discovered
   * entity. It may change when new information is added.
   */
  ENTITY_ID: number;
  ENTITY_ID_2: number;
  FOCUS_RECORDS: FocusRecords;
  FOCUS_RECORDS_2: FocusRecords;
  INTERNAL_ID: number;
  INTERNAL_ID_2: number;
  MATCH_INFO: MatchInfoForWhy;
}

export type WhyResults = WhyResult[];

export interface WhySearchResult {
  /**
   * The ENTITY_ID is the Senzing-generated identifier for the discovered
   * entity. It may change when new information is added.
   */
  ENTITY_ID: number;
  MATCH_INFO: MatchInfoForWhy;
}

export interface Workload {
  apiVersion: string;
  caches: Caches;
  candidates: Candidates;
  contention: Contention;
  datetimestamp: string;
  expressedFeatures: ExpressedFeatures;
  genericDetect: Fixme;
  license: License;
  loadedRecords: number;
  lockWaits: LockWaits;
  processing: Processing;
  redoTriggers: MapStringToInteger;
  repairDiagnosis: RepairDiagnosis;
  reresolve: Reresolve;
  scoring: Scoring;
  systemResources: SystemResources;
  threadState: ThreadState;
  unresolve: Unresolve;
}
