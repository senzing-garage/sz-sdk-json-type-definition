// Code generated by jtd-codegen for Go v0.2.1. DO NOT EDIT.

package typedef

import "time"

type Senzingapi = interface{}

type AddDataSource struct {
	DsrcID int64 `json:"DSRC_ID"`
}

type AffectedEntity struct {
	// The ENTITY_ID is the Senzing-generated identifier for the discovered entity.
	// It may change when new information is added.
	EntityID int64 `json:"ENTITY_ID"`
}

type CfgAttr struct {
	Advanced string `json:"ADVANCED"`

	AttrClass string `json:"ATTR_CLASS"`

	AttrCode string `json:"ATTR_CODE"`

	AttrID int64 `json:"ATTR_ID"`

	DefaultValue string `json:"DEFAULT_VALUE"`

	FelemCode string `json:"FELEM_CODE"`

	FelemReq string `json:"FELEM_REQ"`

	FtypeCode string `json:"FTYPE_CODE"`

	Internal string `json:"INTERNAL"`
}

type CfgCfbom struct {
	CfcallID int64 `json:"CFCALL_ID"`

	ExecOrder int64 `json:"EXEC_ORDER"`

	FelemID int64 `json:"FELEM_ID"`

	FtypeID int64 `json:"FTYPE_ID"`
}

type CfgCfcall struct {
	CfcallID int64 `json:"CFCALL_ID"`

	CfuncID int64 `json:"CFUNC_ID"`

	ExecOrder int64 `json:"EXEC_ORDER"`

	FtypeID int64 `json:"FTYPE_ID"`
}

type CfgCfrtn struct {
	CfrtnID int64 `json:"CFRTN_ID"`

	CfuncID int64 `json:"CFUNC_ID"`

	CfuncRtnval string `json:"CFUNC_RTNVAL"`

	CloseScore int64 `json:"CLOSE_SCORE"`

	ExecOrder int64 `json:"EXEC_ORDER"`

	FtypeID int64 `json:"FTYPE_ID"`

	LikelyScore int64 `json:"LIKELY_SCORE"`

	PlausibleScore int64 `json:"PLAUSIBLE_SCORE"`

	SameScore int64 `json:"SAME_SCORE"`

	UnLikelyScore int64 `json:"UN_LIKELY_SCORE"`
}

type CfgCfunc struct {
	AnonSupport string `json:"ANON_SUPPORT"`

	CfuncCode string `json:"CFUNC_CODE"`

	CfuncDesc string `json:"CFUNC_DESC"`

	CfuncID int64 `json:"CFUNC_ID"`

	ConnectStr string `json:"CONNECT_STR"`

	FuncLib string `json:"FUNC_LIB"`

	FuncVer string `json:"FUNC_VER"`

	JavaClassName string `json:"JAVA_CLASS_NAME"`

	Language string `json:"LANGUAGE"`
}

type CfgDfbom struct {
	DfcallID int64 `json:"DFCALL_ID"`

	ExecOrder int64 `json:"EXEC_ORDER"`

	FelemID int64 `json:"FELEM_ID"`

	FtypeID int64 `json:"FTYPE_ID"`
}

type CfgDfcall struct {
	DfcallID int64 `json:"DFCALL_ID"`

	DfuncID int64 `json:"DFUNC_ID"`

	ExecOrder int64 `json:"EXEC_ORDER"`

	FtypeID int64 `json:"FTYPE_ID"`
}

type CfgDfunc struct {
	AnonSupport string `json:"ANON_SUPPORT"`

	ConnectStr string `json:"CONNECT_STR"`

	DfuncCode string `json:"DFUNC_CODE"`

	DfuncDesc string `json:"DFUNC_DESC"`

	DfuncID int64 `json:"DFUNC_ID"`

	FuncLib string `json:"FUNC_LIB"`

	FuncVer string `json:"FUNC_VER"`

	JavaClassName string `json:"JAVA_CLASS_NAME"`

	Language string `json:"LANGUAGE"`
}

type CfgDsrc struct {
	Conversational string `json:"CONVERSATIONAL"`

	DsrcCode string `json:"DSRC_CODE"`

	DsrcDesc string `json:"DSRC_DESC"`

	DsrcID int64 `json:"DSRC_ID"`

	DsrcRely int64 `json:"DSRC_RELY"`

	RetentionLevel string `json:"RETENTION_LEVEL"`
}

type CfgDsrcInterest struct {
	DsrcID int64 `json:"DSRC_ID"`

	InterestFlag string `json:"INTEREST_FLAG"`

	MaxDegree int64 `json:"MAX_DEGREE"`
}

type CfgEbom struct {
	EtypeID int64 `json:"ETYPE_ID"`

	ExecOrder int64 `json:"EXEC_ORDER"`

	FtypeID int64 `json:"FTYPE_ID"`

	UtypeCode string `json:"UTYPE_CODE"`
}

type CfgEclass struct {
	EclassCode string `json:"ECLASS_CODE"`

	EclassDesc string `json:"ECLASS_DESC"`

	EclassID int64 `json:"ECLASS_ID"`

	Resolve string `json:"RESOLVE"`
}

type CfgEfbom struct {
	EfcallID int64 `json:"EFCALL_ID"`

	ExecOrder int64 `json:"EXEC_ORDER"`

	FelemID int64 `json:"FELEM_ID"`

	FelemReq string `json:"FELEM_REQ"`

	FtypeID int64 `json:"FTYPE_ID"`
}

type CfgEfcall struct {
	EfcallID int64 `json:"EFCALL_ID"`

	EfeatFtypeID int64 `json:"EFEAT_FTYPE_ID"`

	EfuncID int64 `json:"EFUNC_ID"`

	ExecOrder int64 `json:"EXEC_ORDER"`

	FelemID int64 `json:"FELEM_ID"`

	FtypeID int64 `json:"FTYPE_ID"`

	IsVirtual string `json:"IS_VIRTUAL"`
}

type CfgEfunc struct {
	ConnectStr string `json:"CONNECT_STR"`

	EfuncCode string `json:"EFUNC_CODE"`

	EfuncDesc string `json:"EFUNC_DESC"`

	EfuncID int64 `json:"EFUNC_ID"`

	FuncLib string `json:"FUNC_LIB"`

	FuncVer string `json:"FUNC_VER"`

	JavaClassName string `json:"JAVA_CLASS_NAME"`

	Language string `json:"LANGUAGE"`
}

type CfgErfrag struct {
	ErfragCode string `json:"ERFRAG_CODE"`

	ErfragDepends string `json:"ERFRAG_DEPENDS"`

	ErfragDesc string `json:"ERFRAG_DESC"`

	ErfragID int64 `json:"ERFRAG_ID"`

	ErfragSource string `json:"ERFRAG_SOURCE"`
}

type CfgErrule struct {
	DisqErfragCode string `json:"DISQ_ERFRAG_CODE"`

	ErruleCode string `json:"ERRULE_CODE"`

	ErruleDesc string `json:"ERRULE_DESC"`

	ErruleID int64 `json:"ERRULE_ID"`

	ErruleTier int64 `json:"ERRULE_TIER"`

	QualErfragCode string `json:"QUAL_ERFRAG_CODE"`

	RefScore int64 `json:"REF_SCORE"`

	Relate string `json:"RELATE"`

	Resolve string `json:"RESOLVE"`

	RtypeID int64 `json:"RTYPE_ID"`
}

type CfgEtype struct {
	EclassID int64 `json:"ECLASS_ID"`

	EtypeCode string `json:"ETYPE_CODE"`

	EtypeDesc string `json:"ETYPE_DESC"`

	EtypeID int64 `json:"ETYPE_ID"`
}

type CfgFbom struct {
	Derived string `json:"DERIVED"`

	DisplayDelim string `json:"DISPLAY_DELIM"`

	DisplayLevel int64 `json:"DISPLAY_LEVEL"`

	ExecOrder int64 `json:"EXEC_ORDER"`

	FelemID int64 `json:"FELEM_ID"`

	FtypeID int64 `json:"FTYPE_ID"`
}

type CfgFbovr struct {
	EclassID int64 `json:"ECLASS_ID"`

	FtypeExcl string `json:"FTYPE_EXCL"`

	FtypeFreq string `json:"FTYPE_FREQ"`

	FtypeID int64 `json:"FTYPE_ID"`

	FtypeStab string `json:"FTYPE_STAB"`

	UtypeCode string `json:"UTYPE_CODE"`
}

type CfgFclass struct {
	FclassCode string `json:"FCLASS_CODE"`

	FclassDesc string `json:"FCLASS_DESC"`

	FclassID int64 `json:"FCLASS_ID"`
}

type CfgFelem struct {
	DataType string `json:"DATA_TYPE"`

	FelemCode string `json:"FELEM_CODE"`

	FelemDesc string `json:"FELEM_DESC"`

	FelemID int64 `json:"FELEM_ID"`

	Tokenize string `json:"TOKENIZE"`
}

type CfgFtype struct {
	Anonymize string `json:"ANONYMIZE"`

	Derivation string `json:"DERIVATION"`

	Derived string `json:"DERIVED"`

	FclassID int64 `json:"FCLASS_ID"`

	FtypeCode string `json:"FTYPE_CODE"`

	FtypeDesc string `json:"FTYPE_DESC"`

	FtypeExcl string `json:"FTYPE_EXCL"`

	FtypeFreq string `json:"FTYPE_FREQ"`

	FtypeID int64 `json:"FTYPE_ID"`

	FtypeStab string `json:"FTYPE_STAB"`

	PersistHistory string `json:"PERSIST_HISTORY"`

	RtypeID int64 `json:"RTYPE_ID"`

	ShowInMatchKey string `json:"SHOW_IN_MATCH_KEY"`

	UsedForCand string `json:"USED_FOR_CAND"`

	Version int64 `json:"VERSION"`
}

type CfgGenericThreshold struct {
	Behavior string `json:"BEHAVIOR"`

	CandidateCap int64 `json:"CANDIDATE_CAP"`

	FtypeID int64 `json:"FTYPE_ID"`

	GplanID int64 `json:"GPLAN_ID"`

	ScoringCap int64 `json:"SCORING_CAP"`

	SendToRedo string `json:"SEND_TO_REDO"`
}

type CfgGplan struct {
	GplanCode string `json:"GPLAN_CODE"`

	GplanDesc string `json:"GPLAN_DESC"`

	GplanID int64 `json:"GPLAN_ID"`
}

type CfgLens struct {
	LensCode string `json:"LENS_CODE"`

	LensDesc string `json:"LENS_DESC"`

	LensID int64 `json:"LENS_ID"`
}

type CfgLensrl = []FixmeUnknown

type CfgRclass struct {
	IsDisclosed string `json:"IS_DISCLOSED"`

	RclassCode string `json:"RCLASS_CODE"`

	RclassDesc string `json:"RCLASS_DESC"`

	RclassID int64 `json:"RCLASS_ID"`
}

type CfgRtype struct {
	BreakRes string `json:"BREAK_RES"`

	RclassID int64 `json:"RCLASS_ID"`

	RelStrength int64 `json:"REL_STRENGTH"`

	RtypeCode string `json:"RTYPE_CODE"`

	RtypeDesc string `json:"RTYPE_DESC"`

	RtypeID int64 `json:"RTYPE_ID"`
}

type CfgSfcall struct {
	ExecOrder int64 `json:"EXEC_ORDER"`

	FelemID int64 `json:"FELEM_ID"`

	FtypeID int64 `json:"FTYPE_ID"`

	SfcallID int64 `json:"SFCALL_ID"`

	SfuncID int64 `json:"SFUNC_ID"`
}

type CfgSfunc struct {
	ConnectStr string `json:"CONNECT_STR"`

	FuncLib string `json:"FUNC_LIB"`

	FuncVer string `json:"FUNC_VER"`

	JavaClassName string `json:"JAVA_CLASS_NAME"`

	Language string `json:"LANGUAGE"`

	SfuncCode string `json:"SFUNC_CODE"`

	SfuncDesc string `json:"SFUNC_DESC"`

	SfuncID int64 `json:"SFUNC_ID"`
}

type ConfigBaseVersion struct {
	BuildDate string `json:"BUILD_DATE"`

	BuildNumber string `json:"BUILD_NUMBER"`

	BuildVersion string `json:"BUILD_VERSION"`

	CompatibilityVersion CompatibilityVersion `json:"COMPATIBILITY_VERSION"`

	ProductName string `json:"PRODUCT_NAME"`

	Version string `json:"VERSION"`
}

type CompatibilityVersion struct {
	ConfigVersion string `json:"CONFIG_VERSION"`
}

type Config struct {
	ConfigComments string `json:"CONFIG_COMMENTS"`

	ConfigID int64 `json:"CONFIG_ID"`

	SysCreateDt string `json:"SYS_CREATE_DT"`
}

type ConfigRegistry struct {
	Configs []Config `json:"CONFIGS"`
}

type DataSource struct {
	// The text representation of the datasource.
	DsrcCode string `json:"DSRC_CODE"`

	// The unique identifier of the datasource.
	DsrcID int64 `json:"DSRC_ID"`
}

type Datastore struct {
	ID string `json:"id"`

	Location string `json:"location"`

	Type string `json:"type"`
}

type DatastoreInfo struct {
	DataStores []Datastore `json:"dataStores"`
}

type DatastorePerformance struct {
	InsertTime int64 `json:"insertTime"`

	NumRecordsInserted int64 `json:"numRecordsInserted"`
}

type Entity struct {
	RelatedEntities []RelatedEntity `json:"RELATED_ENTITIES"`

	ResolvedEntity ResolvedEntity `json:"RESOLVED_ENTITY"`
}

type EntityPath struct {
	EndEntityID int64 `json:"END_ENTITY_ID"`

	Entities []int64 `json:"ENTITIES"`

	StartEntityID int64 `json:"START_ENTITY_ID"`
}

type ExportConfig struct {
	G2Config G2config `json:"G2_CONFIG"`
}

type Feature struct {
	FelemCode string `json:"FELEM_CODE"`

	FelemValue string `json:"FELEM_VALUE"`
}

type FeatureDescriptionValue struct {
	CandidateCapReached string `json:"CANDIDATE_CAP_REACHED"`

	EntityCount int64 `json:"ENTITY_COUNT"`

	FeatDesc string `json:"FEAT_DESC"`

	LibFeatID int64 `json:"LIB_FEAT_ID"`

	ScoringCapReached string `json:"SCORING_CAP_REACHED"`

	Suppressed string `json:"SUPPRESSED"`

	UsedForCand string `json:"USED_FOR_CAND"`

	UsedForScoring string `json:"USED_FOR_SCORING"`
}

type FeatureForAttribute struct {
	FeatDesc string `json:"FEAT_DESC"`

	FeatDescValues []FeatureDescriptionValue `json:"FEAT_DESC_VALUES"`

	LibFeatID int64 `json:"LIB_FEAT_ID"`

	UsageType string `json:"USAGE_TYPE"`
}

type FeatureScoreForAttribute struct {
	CandidateFeat string `json:"CANDIDATE_FEAT"`

	CandidateFeatID int64 `json:"CANDIDATE_FEAT_ID"`

	CandidateFeatUsageType string `json:"CANDIDATE_FEAT_USAGE_TYPE"`

	FullScore int64 `json:"FULL_SCORE"`

	GenerationMatch int64 `json:"GENERATION_MATCH"`

	GnrFn int64 `json:"GNR_FN"`

	GnrGn int64 `json:"GNR_GN"`

	GnrOn int64 `json:"GNR_ON"`

	GnrSn int64 `json:"GNR_SN"`

	InboundFeat string `json:"INBOUND_FEAT"`

	InboundFeatID int64 `json:"INBOUND_FEAT_ID"`

	InboundFeatUsageType string `json:"INBOUND_FEAT_USAGE_TYPE"`

	ScoreBehavior string `json:"SCORE_BEHAVIOR"`

	ScoreBucket string `json:"SCORE_BUCKET"`
}

type FeatureScores = map[string]FeatureScoresForAttribute

type FeatureScoresForAttribute = []FeatureScoreForAttribute

type FetchNext = FixmeUnknown

type FinalState struct {
	NeedReevaluation int64 `json:"NEED_REEVALUATION"`

	VirtualEntities []VirtualEntitySynopsis `json:"VIRTUAL_ENTITIES"`
}

type FixmeUnknown struct {
	FixmeUnknown any `json:"FIXME_UNKNOWN"`
}

type FocusRecord struct {
	DataSource string `json:"DATA_SOURCE"`

	RecordID string `json:"RECORD_ID"`
}

type FocusRecords = []FocusRecord

type G2config struct {
	CfgAttr []CfgAttr `json:"CFG_ATTR"`

	CfgCfbom []CfgCfbom `json:"CFG_CFBOM"`

	CfgCfcall []CfgCfcall `json:"CFG_CFCALL"`

	CfgCfrtn []CfgCfrtn `json:"CFG_CFRTN"`

	CfgCfunc []CfgCfunc `json:"CFG_CFUNC"`

	CfgDfbom []CfgDfbom `json:"CFG_DFBOM"`

	CfgDfcall []CfgDfcall `json:"CFG_DFCALL"`

	CfgDfunc []CfgDfunc `json:"CFG_DFUNC"`

	CfgDsrc []CfgDsrc `json:"CFG_DSRC"`

	CfgDsrcInterest []CfgDsrcInterest `json:"CFG_DSRC_INTEREST"`

	CfgEbom []CfgEbom `json:"CFG_EBOM"`

	CfgEclass []CfgEclass `json:"CFG_ECLASS"`

	CfgEfbom []CfgEfbom `json:"CFG_EFBOM"`

	CfgEfcall []CfgEfcall `json:"CFG_EFCALL"`

	CfgEfunc []CfgEfunc `json:"CFG_EFUNC"`

	CfgErfrag []CfgErfrag `json:"CFG_ERFRAG"`

	CfgErrule []CfgErrule `json:"CFG_ERRULE"`

	CfgEtype []CfgEtype `json:"CFG_ETYPE"`

	CfgFbom []CfgFbom `json:"CFG_FBOM"`

	CfgFbovr []CfgFbovr `json:"CFG_FBOVR"`

	CfgFclass []CfgFclass `json:"CFG_FCLASS"`

	CfgFelem []CfgFelem `json:"CFG_FELEM"`

	CfgFtype []CfgFtype `json:"CFG_FTYPE"`

	CfgGenericThreshold []CfgGenericThreshold `json:"CFG_GENERIC_THRESHOLD"`

	CfgGplan []CfgGplan `json:"CFG_GPLAN"`

	CfgLens []CfgLens `json:"CFG_LENS"`

	CfgLensrl []CfgLensrl `json:"CFG_LENSRL"`

	CfgRclass []CfgRclass `json:"CFG_RCLASS"`

	CfgRtype []CfgRtype `json:"CFG_RTYPE"`

	CfgSfcall []CfgSfcall `json:"CFG_SFCALL"`

	CfgSfunc []CfgSfunc `json:"CFG_SFUNC"`

	ConfigBaseVersion ConfigBaseVersion `json:"CONFIG_BASE_VERSION"`

	SysOom []SysOom `json:"SYS_OOM"`
}

type GetConfig struct {
	G2Config G2config `json:"G2_CONFIG"`
}

type GetDataSources struct {
	DataSources []DataSource `json:"DATA_SOURCES"`
}

type GetFeature struct {
	Elements []Feature `json:"ELEMENTS"`

	FtypeCode string `json:"FTYPE_CODE"`

	LibFeatID int64 `json:"LIB_FEAT_ID"`
}

type How struct {
	HowResults HowResults `json:"HOW_RESULTS"`
}

type HowResults struct {
	FinalState FinalState `json:"FINAL_STATE"`

	ResolutionSteps ResolutionSteps `json:"RESOLUTION_STEPS"`
}

type Interesting struct {
	InterestingEntities InterestingEntities `json:"INTERESTING_ENTITIES"`
}

type InterestingEntities struct {
	Entities []InterestingEntity `json:"ENTITIES"`

	Notices Notices `json:"NOTICES"`
}

type InterestingEntitySampleRecords struct {
	DataSource string `json:"DATA_SOURCE"`

	Flags []string `json:"FLAGS"`

	RecordID string `json:"RECORD_ID"`
}

type InterestingEntity struct {
	Degrees int64 `json:"DEGREES"`

	// The ENTITY_ID is the Senzing-generated identifier for the discovered entity.
	// It may change when new information is added.
	EntityID int64 `json:"ENTITY_ID"`

	Flags []string `json:"FLAGS"`

	SampleRecords []InterestingEntitySampleRecords `json:"SAMPLE_RECORDS"`
}

type MatchInfoDisclosedRelationsRelAnchor struct {
	Domain string `json:"DOMAIN"`

	FeatDesc string `json:"FEAT_DESC"`

	FeatID int64 `json:"FEAT_ID"`

	LinkedFeatDesc string `json:"LINKED_FEAT_DESC"`

	LinkedFeatID int64 `json:"LINKED_FEAT_ID"`

	LinkedFeatType string `json:"LINKED_FEAT_TYPE"`

	LinkedFeatUsageType string `json:"LINKED_FEAT_USAGE_TYPE"`
}

type MatchInfoDisclosedRelationsRelLink struct {
	Domain string `json:"DOMAIN"`

	FeatDesc string `json:"FEAT_DESC"`

	FeatID int64 `json:"FEAT_ID"`

	FeatUsageType string `json:"FEAT_USAGE_TYPE"`

	LinkedFeatDesc string `json:"LINKED_FEAT_DESC"`

	LinkedFeatID int64 `json:"LINKED_FEAT_ID"`

	LinkedFeatType string `json:"LINKED_FEAT_TYPE"`

	LinkedFeatUsageType string `json:"LINKED_FEAT_USAGE_TYPE"`
}

type MatchInfoDisclosedRelationsRelPointer struct {
	Domain string `json:"DOMAIN"`

	FeatDesc string `json:"FEAT_DESC"`

	FeatID int64 `json:"FEAT_ID"`

	FeatUsageType string `json:"FEAT_USAGE_TYPE"`

	LinkedFeatDesc string `json:"LINKED_FEAT_DESC"`

	LinkedFeatID int64 `json:"LINKED_FEAT_ID"`

	LinkedFeatType string `json:"LINKED_FEAT_TYPE"`
}

type MatchInfoDisclosedRelations struct {
	RelAnchor []MatchInfoDisclosedRelationsRelAnchor `json:"REL_ANCHOR"`

	RelLink []MatchInfoDisclosedRelationsRelLink `json:"REL_LINK"`

	RelPointer []MatchInfoDisclosedRelationsRelPointer `json:"REL_POINTER"`
}

type MatchInfo struct {
	CandidateKeys MatchInfoCandidateKeys `json:"CANDIDATE_KEYS"`

	DisclosedRelations MatchInfoDisclosedRelations `json:"DISCLOSED_RELATIONS"`

	ErruleCode string `json:"ERRULE_CODE"`

	FeatureScores FeatureScores `json:"FEATURE_SCORES"`

	MatchKey string `json:"MATCH_KEY"`

	MatchLevel int64 `json:"MATCH_LEVEL"`

	MatchLevelCode string `json:"MATCH_LEVEL_CODE"`

	WhyErruleCode string `json:"WHY_ERRULE_CODE"`

	WhyKey string `json:"WHY_KEY"`
}

type MatchInfoCandidateKeys = map[string][]MatchInfoForAttribute

type MatchInfoForAttribute struct {
	FeatDesc string `json:"FEAT_DESC"`

	FeatID int64 `json:"FEAT_ID"`
}

type MemberRecord struct {
	InternalID int64 `json:"INTERNAL_ID"`

	Records Records `json:"RECORDS"`
}

type MemberRecords = []MemberRecord

type Network struct {
	Entities []Entity `json:"ENTITIES"`

	EntityPaths []EntityPath `json:"ENTITY_PATHS"`

	MaxEntityLimitReached string `json:"MAX_ENTITY_LIMIT_REACHED"`
}

type Notice struct {
	Code string `json:"CODE"`

	Description string `json:"DESCRIPTION"`
}

type Notices = []Notice

type Path struct {
	Entities []Entity `json:"ENTITIES"`

	EntityPaths []EntityPath `json:"ENTITY_PATHS"`
}

type ProductLicense struct {
	Billing string `json:"billing"`

	Contract string `json:"contract"`

	Customer string `json:"customer"`

	ExpireDate string `json:"expireDate"`

	IssueDate string `json:"issueDate"`

	LicenseLevel string `json:"licenseLevel"`

	LicenseType string `json:"licenseType"`

	RecordLimit int64 `json:"recordLimit"`
}

type ProductVersion struct {
	BuildDate string `json:"BUILD_DATE"`

	BuildNumber string `json:"BUILD_NUMBER"`

	BuildVersion string `json:"BUILD_VERSION"`

	CompatibilityVersion CompatibilityVersion `json:"COMPATIBILITY_VERSION"`

	ProductName string `json:"PRODUCT_NAME"`

	SchemaVersion SchemaVersion `json:"SCHEMA_VERSION"`

	Version string `json:"VERSION"`
}

type RecordFeatures struct {
	LibFeatID int64 `json:"LIB_FEAT_ID"`

	UsageType string `json:"USAGE_TYPE"`
}

type Record struct {
	AddressData []string `json:"ADDRESS_DATA"`

	AttributeData []string `json:"ATTRIBUTE_DATA"`

	DataSource string `json:"DATA_SOURCE"`

	EntityData []string `json:"ENTITY_DATA"`

	EntityDesc string `json:"ENTITY_DESC"`

	EntityKey string `json:"ENTITY_KEY"`

	EntityType string `json:"ENTITY_TYPE"`

	ErruleCode string `json:"ERRULE_CODE"`

	Features []RecordFeatures `json:"FEATURES"`

	IdentifierData []string `json:"IDENTIFIER_DATA"`

	InternalID int64 `json:"INTERNAL_ID"`

	JSONData map[string]any `json:"JSON_DATA"`

	LastSeenDt time.Time `json:"LAST_SEEN_DT"`

	MatchKey string `json:"MATCH_KEY"`

	MatchLevel int64 `json:"MATCH_LEVEL"`

	MatchLevelCode string `json:"MATCH_LEVEL_CODE"`

	NameData []string `json:"NAME_DATA"`

	OtherData []string `json:"OTHER_DATA"`

	PhoneData []string `json:"PHONE_DATA"`

	RecordID string `json:"RECORD_ID"`

	RelationshipData []string `json:"RELATIONSHIP_DATA"`
}

type RecordSummaryElement struct {
	DataSource string `json:"DATA_SOURCE"`

	FirstSeenDt time.Time `json:"FIRST_SEEN_DT"`

	LastSeenDt time.Time `json:"LAST_SEEN_DT"`

	RecordCount int64 `json:"RECORD_COUNT"`
}

type Records = []Record

type RedoRecord = FixmeUnknown

type RelatedEntity struct {
	// The ENTITY_ID is the Senzing-generated identifier for the discovered entity.
	// It may change when new information is added.
	EntityID int64 `json:"ENTITY_ID"`

	EntityName string `json:"ENTITY_NAME"`

	ErruleCode string `json:"ERRULE_CODE"`

	IsAmbiguous int64 `json:"IS_AMBIGUOUS"`

	IsDisclosed int64 `json:"IS_DISCLOSED"`

	LastSeenDt time.Time `json:"LAST_SEEN_DT"`

	MatchKey string `json:"MATCH_KEY"`

	MatchLevel int64 `json:"MATCH_LEVEL"`

	MatchLevelCode string `json:"MATCH_LEVEL_CODE"`

	Records Records `json:"RECORDS"`

	RecordSummary []RecordSummaryElement `json:"RECORD_SUMMARY"`
}

type ResolutionStep struct {
	InboundVirtualEntityID string `json:"INBOUND_VIRTUAL_ENTITY_ID"`

	MatchInfo MatchInfo `json:"MATCH_INFO"`

	ResultVirtualEntityID string `json:"RESULT_VIRTUAL_ENTITY_ID"`

	Step int64 `json:"STEP"`

	VirtualEntity VirtualEntitySynopsis `json:"VIRTUAL_ENTITY_1"`

	VirtualEntity0 VirtualEntitySynopsis `json:"VIRTUAL_ENTITY_2"`
}

type ResolutionSteps = []ResolutionStep

type ResolvedEntity struct {
	// The ENTITY_ID is the Senzing-generated identifier for the discovered entity.
	// It may change when new information is added.
	EntityID int64 `json:"ENTITY_ID"`

	EntityName string `json:"ENTITY_NAME"`

	ErruleCode string `json:"ERRULE_CODE"`

	Features map[string][]FeatureForAttribute `json:"FEATURES"`

	IsAmbiguous int64 `json:"IS_AMBIGUOUS"`

	IsDisclosed int64 `json:"IS_DISCLOSED"`

	LastSeenDt time.Time `json:"LAST_SEEN_DT"`

	MatchKey string `json:"MATCH_KEY"`

	MatchLevel int64 `json:"MATCH_LEVEL"`

	MatchLevelCode string `json:"MATCH_LEVEL_CODE"`

	Records Records `json:"RECORDS"`

	RecordSummary []RecordSummaryElement `json:"RECORD_SUMMARY"`
}

type ResolvedEntityAndMatchInfoEntity struct {
	ResolvedEntity ResolvedEntity `json:"RESOLVED_ENTITY"`
}

type ResolvedEntityAndMatchInfo struct {
	Entity ResolvedEntityAndMatchInfoEntity `json:"ENTITY"`

	MatchInfo MatchInfo `json:"MATCH_INFO"`
}

type SysOom struct {
	FelemID int64 `json:"FELEM_ID"`

	FtypeID int64 `json:"FTYPE_ID"`

	LensID int64 `json:"LENS_ID"`

	LibFeatID int64 `json:"LIB_FEAT_ID"`

	LibFelemID int64 `json:"LIB_FELEM_ID"`

	NextThresh int64 `json:"NEXT_THRESH"`

	OomLevel string `json:"OOM_LEVEL"`

	OomType string `json:"OOM_TYPE"`

	Thresh1Cnt int64 `json:"THRESH1_CNT"`

	Thresh1Oom int64 `json:"THRESH1_OOM"`
}

type SchemaVersion struct {
	EngineSchemaVersion string `json:"ENGINE_SCHEMA_VERSION"`

	MaximumRequiredSchemaVersion string `json:"MAXIMUM_REQUIRED_SCHEMA_VERSION"`

	MinimumRequiredSchemaVersion string `json:"MINIMUM_REQUIRED_SCHEMA_VERSION"`
}

type Search struct {
	ResolvedEntities []ResolvedEntityAndMatchInfo `json:"RESOLVED_ENTITIES"`

	SearchStatistics SearchStatistics `json:"SEARCH_STATISTICS"`
}

type SearchStatisticCandidateKeysFeatureTypes struct {
	Found int64 `json:"FOUND"`

	FtypeCode string `json:"FTYPE_CODE"`

	Generic int64 `json:"GENERIC"`

	NotFound int64 `json:"NOT_FOUND"`
}

type SearchStatisticCandidateKeysSummary struct {
	Found int64 `json:"FOUND"`

	Generic int64 `json:"GENERIC"`

	NotFound int64 `json:"NOT_FOUND"`
}

type SearchStatisticCandidateKeys struct {
	FeatureTypes []SearchStatisticCandidateKeysFeatureTypes `json:"FEATURE_TYPES"`

	Summary SearchStatisticCandidateKeysSummary `json:"SUMMARY"`
}

type SearchStatistic struct {
	CandidateKeys SearchStatisticCandidateKeys `json:"CANDIDATE_KEYS"`
}

type SearchStatistics = []SearchStatistic

type Stats = FixmeUnknown

type StreamExportJSONEntity = FixmeUnknown

type SzConfigAddDataSourceResponse = AddDataSource

type SzConfigExportConfigResponse = ExportConfig

type SzConfigGetDataSourcesResponse = GetDataSources

type SzConfigManagerGetConfigRegistryResponse = ConfigRegistry

type SzConfigManagerGetConfigResponse = GetConfig

type SzDiagnosticCheckDatastorePerformanceResponse = DatastorePerformance

type SzDiagnosticGetDatastoreInfoResponse = DatastoreInfo

type SzDiagnosticGetFeatureResponse = GetFeature

type SzEngineAddRecordResponse = WithInfo

type SzEngineDeleteRecordResponse = WithInfo

type SzEngineFetchNextResponse = FetchNext

type SzEngineFindInterestingEntitiesByEntityIDResponse = Interesting

type SzEngineFindInterestingEntitiesByRecordIDResponse = Interesting

type SzEngineFindNetworkByEntityIDResponse = Network

type SzEngineFindNetworkByRecordIDResponse = Network

type SzEngineFindPathByEntityIDResponse = Path

type SzEngineFindPathByRecordIDResponse = Path

type SzEngineGetEntityByEntityIDResponse = Entity

type SzEngineGetEntityByRecordIDResponse = Entity

type SzEngineGetRecordResponse = Record

type SzEngineGetRedoRecordResponse = RedoRecord

type SzEngineGetStatsResponse = Stats

type SzEngineGetVirtualEntityByRecordIDResponse = VirtualEntity

type SzEngineHowEntityByEntityIDResponse = How

type SzEngineProcessRedoRecordResponse = WithInfo

type SzEngineReevaluateEntityResponse = WithInfo

type SzEngineReevaluateRecordResponse = WithInfo

type SzEngineSearchByAttributesResponse = Search

type SzEngineStreamExportJSONEntityReportResponse = StreamExportJSONEntity

type SzEngineWhyEntitiesResponse = WhyEntities

type SzEngineWhyRecordInEntityResponse = WhyRecordInEntity

type SzEngineWhyRecordsResponse = WhyRecords

type SzProductGetLicenseResponse = ProductLicense

type SzProductGetVersionResponse = ProductVersion

type VirtualEntity struct {
	ResolvedEntity ResolvedEntity `json:"RESOLVED_ENTITY"`
}

type VirtualEntitySynopsis struct {
	MemberRecords MemberRecords `json:"MEMBER_RECORDS"`

	VirtualEntityID string `json:"VIRTUAL_ENTITY_ID"`
}

type WhyEntities struct {
	Entities []Entity `json:"ENTITIES"`

	WhyResults WhyResults `json:"WHY_RESULTS"`
}

type WhyRecordInEntity = FixmeUnknown

type WhyRecords struct {
	Entities []Entity `json:"ENTITIES"`

	WhyResults WhyResults `json:"WHY_RESULTS"`
}

type WhyResult struct {
	// The ENTITY_ID is the Senzing-generated identifier for the discovered entity.
	// It may change when new information is added.
	EntityID int64 `json:"ENTITY_ID"`

	EntityID0 int64 `json:"ENTITY_ID_2"`

	FocusRecords FocusRecords `json:"FOCUS_RECORDS"`

	FocusRecords0 FocusRecords `json:"FOCUS_RECORDS_2"`

	InternalID int64 `json:"INTERNAL_ID"`

	InternalID0 int64 `json:"INTERNAL_ID_2"`

	MatchInfo MatchInfo `json:"MATCH_INFO"`
}

type WhyResults = []WhyResult

type WithInfo struct {
	AffectedEntities []AffectedEntity `json:"AFFECTED_ENTITIES"`

	DataSource string `json:"DATA_SOURCE"`

	InterestingEntities InterestingEntities `json:"INTERESTING_ENTITIES"`

	RecordID string `json:"RECORD_ID"`
}
