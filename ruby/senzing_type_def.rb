# Code generated by jtd-codegen for Ruby v0.1.1

require 'json'
require 'time'

module SenzingTypeDef

  class Senzingapi
    attr_accessor :value

    def self.from_json_data(data)
      out = Senzingapi.new
      out.value = SenzingTypeDef.from_json_data(Object, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class AffectedEntity
    # The ENTITY_ID is the Senzing-generated identifier for the discovered
    # entity. It may change when new information is added.
    attr_accessor :entity_id

    def self.from_json_data(data)
      out = AffectedEntity.new
      out.entity_id = SenzingTypeDef::from_json_data(Integer, data["ENTITY_ID"])
      out
    end

    def to_json_data
      data = {}
      data["ENTITY_ID"] = SenzingTypeDef::to_json_data(entity_id)
      data
    end
  end

  class CfgAttr
    attr_accessor :advanced
    attr_accessor :attr_class
    attr_accessor :attr_code
    attr_accessor :attr_id
    attr_accessor :default_value
    attr_accessor :felem_code
    attr_accessor :felem_req
    attr_accessor :ftype_code
    attr_accessor :internal

    def self.from_json_data(data)
      out = CfgAttr.new
      out.advanced = SenzingTypeDef::from_json_data(String, data["ADVANCED"])
      out.attr_class = SenzingTypeDef::from_json_data(String, data["ATTR_CLASS"])
      out.attr_code = SenzingTypeDef::from_json_data(String, data["ATTR_CODE"])
      out.attr_id = SenzingTypeDef::from_json_data(Integer, data["ATTR_ID"])
      out.default_value = SenzingTypeDef::from_json_data(String, data["DEFAULT_VALUE"])
      out.felem_code = SenzingTypeDef::from_json_data(String, data["FELEM_CODE"])
      out.felem_req = SenzingTypeDef::from_json_data(String, data["FELEM_REQ"])
      out.ftype_code = SenzingTypeDef::from_json_data(String, data["FTYPE_CODE"])
      out.internal = SenzingTypeDef::from_json_data(String, data["INTERNAL"])
      out
    end

    def to_json_data
      data = {}
      data["ADVANCED"] = SenzingTypeDef::to_json_data(advanced)
      data["ATTR_CLASS"] = SenzingTypeDef::to_json_data(attr_class)
      data["ATTR_CODE"] = SenzingTypeDef::to_json_data(attr_code)
      data["ATTR_ID"] = SenzingTypeDef::to_json_data(attr_id)
      data["DEFAULT_VALUE"] = SenzingTypeDef::to_json_data(default_value)
      data["FELEM_CODE"] = SenzingTypeDef::to_json_data(felem_code)
      data["FELEM_REQ"] = SenzingTypeDef::to_json_data(felem_req)
      data["FTYPE_CODE"] = SenzingTypeDef::to_json_data(ftype_code)
      data["INTERNAL"] = SenzingTypeDef::to_json_data(internal)
      data
    end
  end

  class CfgCfbom
    attr_accessor :cfcall_id
    attr_accessor :exec_order
    attr_accessor :felem_id
    attr_accessor :ftype_id

    def self.from_json_data(data)
      out = CfgCfbom.new
      out.cfcall_id = SenzingTypeDef::from_json_data(Integer, data["CFCALL_ID"])
      out.exec_order = SenzingTypeDef::from_json_data(Integer, data["EXEC_ORDER"])
      out.felem_id = SenzingTypeDef::from_json_data(Integer, data["FELEM_ID"])
      out.ftype_id = SenzingTypeDef::from_json_data(Integer, data["FTYPE_ID"])
      out
    end

    def to_json_data
      data = {}
      data["CFCALL_ID"] = SenzingTypeDef::to_json_data(cfcall_id)
      data["EXEC_ORDER"] = SenzingTypeDef::to_json_data(exec_order)
      data["FELEM_ID"] = SenzingTypeDef::to_json_data(felem_id)
      data["FTYPE_ID"] = SenzingTypeDef::to_json_data(ftype_id)
      data
    end
  end

  class CfgCfcall
    attr_accessor :cfcall_id
    attr_accessor :cfunc_id
    attr_accessor :exec_order
    attr_accessor :ftype_id

    def self.from_json_data(data)
      out = CfgCfcall.new
      out.cfcall_id = SenzingTypeDef::from_json_data(Integer, data["CFCALL_ID"])
      out.cfunc_id = SenzingTypeDef::from_json_data(Integer, data["CFUNC_ID"])
      out.exec_order = SenzingTypeDef::from_json_data(Integer, data["EXEC_ORDER"])
      out.ftype_id = SenzingTypeDef::from_json_data(Integer, data["FTYPE_ID"])
      out
    end

    def to_json_data
      data = {}
      data["CFCALL_ID"] = SenzingTypeDef::to_json_data(cfcall_id)
      data["CFUNC_ID"] = SenzingTypeDef::to_json_data(cfunc_id)
      data["EXEC_ORDER"] = SenzingTypeDef::to_json_data(exec_order)
      data["FTYPE_ID"] = SenzingTypeDef::to_json_data(ftype_id)
      data
    end
  end

  class CfgCfrtn
    attr_accessor :cfrtn_id
    attr_accessor :cfunc_id
    attr_accessor :cfunc_rtnval
    attr_accessor :close_score
    attr_accessor :exec_order
    attr_accessor :ftype_id
    attr_accessor :likely_score
    attr_accessor :plausible_score
    attr_accessor :same_score
    attr_accessor :un_likely_score

    def self.from_json_data(data)
      out = CfgCfrtn.new
      out.cfrtn_id = SenzingTypeDef::from_json_data(Integer, data["CFRTN_ID"])
      out.cfunc_id = SenzingTypeDef::from_json_data(Integer, data["CFUNC_ID"])
      out.cfunc_rtnval = SenzingTypeDef::from_json_data(String, data["CFUNC_RTNVAL"])
      out.close_score = SenzingTypeDef::from_json_data(Integer, data["CLOSE_SCORE"])
      out.exec_order = SenzingTypeDef::from_json_data(Integer, data["EXEC_ORDER"])
      out.ftype_id = SenzingTypeDef::from_json_data(Integer, data["FTYPE_ID"])
      out.likely_score = SenzingTypeDef::from_json_data(Integer, data["LIKELY_SCORE"])
      out.plausible_score = SenzingTypeDef::from_json_data(Integer, data["PLAUSIBLE_SCORE"])
      out.same_score = SenzingTypeDef::from_json_data(Integer, data["SAME_SCORE"])
      out.un_likely_score = SenzingTypeDef::from_json_data(Integer, data["UN_LIKELY_SCORE"])
      out
    end

    def to_json_data
      data = {}
      data["CFRTN_ID"] = SenzingTypeDef::to_json_data(cfrtn_id)
      data["CFUNC_ID"] = SenzingTypeDef::to_json_data(cfunc_id)
      data["CFUNC_RTNVAL"] = SenzingTypeDef::to_json_data(cfunc_rtnval)
      data["CLOSE_SCORE"] = SenzingTypeDef::to_json_data(close_score)
      data["EXEC_ORDER"] = SenzingTypeDef::to_json_data(exec_order)
      data["FTYPE_ID"] = SenzingTypeDef::to_json_data(ftype_id)
      data["LIKELY_SCORE"] = SenzingTypeDef::to_json_data(likely_score)
      data["PLAUSIBLE_SCORE"] = SenzingTypeDef::to_json_data(plausible_score)
      data["SAME_SCORE"] = SenzingTypeDef::to_json_data(same_score)
      data["UN_LIKELY_SCORE"] = SenzingTypeDef::to_json_data(un_likely_score)
      data
    end
  end

  class CfgCfunc
    attr_accessor :anon_support
    attr_accessor :cfunc_code
    attr_accessor :cfunc_desc
    attr_accessor :cfunc_id
    attr_accessor :connect_str
    attr_accessor :func_lib
    attr_accessor :func_ver
    attr_accessor :java_class_name
    attr_accessor :language

    def self.from_json_data(data)
      out = CfgCfunc.new
      out.anon_support = SenzingTypeDef::from_json_data(String, data["ANON_SUPPORT"])
      out.cfunc_code = SenzingTypeDef::from_json_data(String, data["CFUNC_CODE"])
      out.cfunc_desc = SenzingTypeDef::from_json_data(String, data["CFUNC_DESC"])
      out.cfunc_id = SenzingTypeDef::from_json_data(Integer, data["CFUNC_ID"])
      out.connect_str = SenzingTypeDef::from_json_data(String, data["CONNECT_STR"])
      out.func_lib = SenzingTypeDef::from_json_data(String, data["FUNC_LIB"])
      out.func_ver = SenzingTypeDef::from_json_data(String, data["FUNC_VER"])
      out.java_class_name = SenzingTypeDef::from_json_data(String, data["JAVA_CLASS_NAME"])
      out.language = SenzingTypeDef::from_json_data(String, data["LANGUAGE"])
      out
    end

    def to_json_data
      data = {}
      data["ANON_SUPPORT"] = SenzingTypeDef::to_json_data(anon_support)
      data["CFUNC_CODE"] = SenzingTypeDef::to_json_data(cfunc_code)
      data["CFUNC_DESC"] = SenzingTypeDef::to_json_data(cfunc_desc)
      data["CFUNC_ID"] = SenzingTypeDef::to_json_data(cfunc_id)
      data["CONNECT_STR"] = SenzingTypeDef::to_json_data(connect_str)
      data["FUNC_LIB"] = SenzingTypeDef::to_json_data(func_lib)
      data["FUNC_VER"] = SenzingTypeDef::to_json_data(func_ver)
      data["JAVA_CLASS_NAME"] = SenzingTypeDef::to_json_data(java_class_name)
      data["LANGUAGE"] = SenzingTypeDef::to_json_data(language)
      data
    end
  end

  class CfgDfbom
    attr_accessor :dfcall_id
    attr_accessor :exec_order
    attr_accessor :felem_id
    attr_accessor :ftype_id

    def self.from_json_data(data)
      out = CfgDfbom.new
      out.dfcall_id = SenzingTypeDef::from_json_data(Integer, data["DFCALL_ID"])
      out.exec_order = SenzingTypeDef::from_json_data(Integer, data["EXEC_ORDER"])
      out.felem_id = SenzingTypeDef::from_json_data(Integer, data["FELEM_ID"])
      out.ftype_id = SenzingTypeDef::from_json_data(Integer, data["FTYPE_ID"])
      out
    end

    def to_json_data
      data = {}
      data["DFCALL_ID"] = SenzingTypeDef::to_json_data(dfcall_id)
      data["EXEC_ORDER"] = SenzingTypeDef::to_json_data(exec_order)
      data["FELEM_ID"] = SenzingTypeDef::to_json_data(felem_id)
      data["FTYPE_ID"] = SenzingTypeDef::to_json_data(ftype_id)
      data
    end
  end

  class CfgDfcall
    attr_accessor :dfcall_id
    attr_accessor :dfunc_id
    attr_accessor :exec_order
    attr_accessor :ftype_id

    def self.from_json_data(data)
      out = CfgDfcall.new
      out.dfcall_id = SenzingTypeDef::from_json_data(Integer, data["DFCALL_ID"])
      out.dfunc_id = SenzingTypeDef::from_json_data(Integer, data["DFUNC_ID"])
      out.exec_order = SenzingTypeDef::from_json_data(Integer, data["EXEC_ORDER"])
      out.ftype_id = SenzingTypeDef::from_json_data(Integer, data["FTYPE_ID"])
      out
    end

    def to_json_data
      data = {}
      data["DFCALL_ID"] = SenzingTypeDef::to_json_data(dfcall_id)
      data["DFUNC_ID"] = SenzingTypeDef::to_json_data(dfunc_id)
      data["EXEC_ORDER"] = SenzingTypeDef::to_json_data(exec_order)
      data["FTYPE_ID"] = SenzingTypeDef::to_json_data(ftype_id)
      data
    end
  end

  class CfgDfunc
    attr_accessor :anon_support
    attr_accessor :connect_str
    attr_accessor :dfunc_code
    attr_accessor :dfunc_desc
    attr_accessor :dfunc_id
    attr_accessor :func_lib
    attr_accessor :func_ver
    attr_accessor :java_class_name
    attr_accessor :language

    def self.from_json_data(data)
      out = CfgDfunc.new
      out.anon_support = SenzingTypeDef::from_json_data(String, data["ANON_SUPPORT"])
      out.connect_str = SenzingTypeDef::from_json_data(String, data["CONNECT_STR"])
      out.dfunc_code = SenzingTypeDef::from_json_data(String, data["DFUNC_CODE"])
      out.dfunc_desc = SenzingTypeDef::from_json_data(String, data["DFUNC_DESC"])
      out.dfunc_id = SenzingTypeDef::from_json_data(Integer, data["DFUNC_ID"])
      out.func_lib = SenzingTypeDef::from_json_data(String, data["FUNC_LIB"])
      out.func_ver = SenzingTypeDef::from_json_data(String, data["FUNC_VER"])
      out.java_class_name = SenzingTypeDef::from_json_data(String, data["JAVA_CLASS_NAME"])
      out.language = SenzingTypeDef::from_json_data(String, data["LANGUAGE"])
      out
    end

    def to_json_data
      data = {}
      data["ANON_SUPPORT"] = SenzingTypeDef::to_json_data(anon_support)
      data["CONNECT_STR"] = SenzingTypeDef::to_json_data(connect_str)
      data["DFUNC_CODE"] = SenzingTypeDef::to_json_data(dfunc_code)
      data["DFUNC_DESC"] = SenzingTypeDef::to_json_data(dfunc_desc)
      data["DFUNC_ID"] = SenzingTypeDef::to_json_data(dfunc_id)
      data["FUNC_LIB"] = SenzingTypeDef::to_json_data(func_lib)
      data["FUNC_VER"] = SenzingTypeDef::to_json_data(func_ver)
      data["JAVA_CLASS_NAME"] = SenzingTypeDef::to_json_data(java_class_name)
      data["LANGUAGE"] = SenzingTypeDef::to_json_data(language)
      data
    end
  end

  class CfgDsrc
    attr_accessor :conversational
    attr_accessor :dsrc_code
    attr_accessor :dsrc_desc
    attr_accessor :dsrc_id
    attr_accessor :dsrc_rely
    attr_accessor :retention_level

    def self.from_json_data(data)
      out = CfgDsrc.new
      out.conversational = SenzingTypeDef::from_json_data(String, data["CONVERSATIONAL"])
      out.dsrc_code = SenzingTypeDef::from_json_data(String, data["DSRC_CODE"])
      out.dsrc_desc = SenzingTypeDef::from_json_data(String, data["DSRC_DESC"])
      out.dsrc_id = SenzingTypeDef::from_json_data(Integer, data["DSRC_ID"])
      out.dsrc_rely = SenzingTypeDef::from_json_data(Integer, data["DSRC_RELY"])
      out.retention_level = SenzingTypeDef::from_json_data(String, data["RETENTION_LEVEL"])
      out
    end

    def to_json_data
      data = {}
      data["CONVERSATIONAL"] = SenzingTypeDef::to_json_data(conversational)
      data["DSRC_CODE"] = SenzingTypeDef::to_json_data(dsrc_code)
      data["DSRC_DESC"] = SenzingTypeDef::to_json_data(dsrc_desc)
      data["DSRC_ID"] = SenzingTypeDef::to_json_data(dsrc_id)
      data["DSRC_RELY"] = SenzingTypeDef::to_json_data(dsrc_rely)
      data["RETENTION_LEVEL"] = SenzingTypeDef::to_json_data(retention_level)
      data
    end
  end

  class CfgDsrcInterest
    attr_accessor :dsrc_id
    attr_accessor :interest_flag
    attr_accessor :max_degree

    def self.from_json_data(data)
      out = CfgDsrcInterest.new
      out.dsrc_id = SenzingTypeDef::from_json_data(Integer, data["DSRC_ID"])
      out.interest_flag = SenzingTypeDef::from_json_data(String, data["INTEREST_FLAG"])
      out.max_degree = SenzingTypeDef::from_json_data(Integer, data["MAX_DEGREE"])
      out
    end

    def to_json_data
      data = {}
      data["DSRC_ID"] = SenzingTypeDef::to_json_data(dsrc_id)
      data["INTEREST_FLAG"] = SenzingTypeDef::to_json_data(interest_flag)
      data["MAX_DEGREE"] = SenzingTypeDef::to_json_data(max_degree)
      data
    end
  end

  class CfgEbom
    attr_accessor :etype_id
    attr_accessor :exec_order
    attr_accessor :ftype_id
    attr_accessor :utype_code

    def self.from_json_data(data)
      out = CfgEbom.new
      out.etype_id = SenzingTypeDef::from_json_data(Integer, data["ETYPE_ID"])
      out.exec_order = SenzingTypeDef::from_json_data(Integer, data["EXEC_ORDER"])
      out.ftype_id = SenzingTypeDef::from_json_data(Integer, data["FTYPE_ID"])
      out.utype_code = SenzingTypeDef::from_json_data(String, data["UTYPE_CODE"])
      out
    end

    def to_json_data
      data = {}
      data["ETYPE_ID"] = SenzingTypeDef::to_json_data(etype_id)
      data["EXEC_ORDER"] = SenzingTypeDef::to_json_data(exec_order)
      data["FTYPE_ID"] = SenzingTypeDef::to_json_data(ftype_id)
      data["UTYPE_CODE"] = SenzingTypeDef::to_json_data(utype_code)
      data
    end
  end

  class CfgEclass
    attr_accessor :eclass_code
    attr_accessor :eclass_desc
    attr_accessor :eclass_id
    attr_accessor :resolve

    def self.from_json_data(data)
      out = CfgEclass.new
      out.eclass_code = SenzingTypeDef::from_json_data(String, data["ECLASS_CODE"])
      out.eclass_desc = SenzingTypeDef::from_json_data(String, data["ECLASS_DESC"])
      out.eclass_id = SenzingTypeDef::from_json_data(Integer, data["ECLASS_ID"])
      out.resolve = SenzingTypeDef::from_json_data(String, data["RESOLVE"])
      out
    end

    def to_json_data
      data = {}
      data["ECLASS_CODE"] = SenzingTypeDef::to_json_data(eclass_code)
      data["ECLASS_DESC"] = SenzingTypeDef::to_json_data(eclass_desc)
      data["ECLASS_ID"] = SenzingTypeDef::to_json_data(eclass_id)
      data["RESOLVE"] = SenzingTypeDef::to_json_data(resolve)
      data
    end
  end

  class CfgEfbom
    attr_accessor :efcall_id
    attr_accessor :exec_order
    attr_accessor :felem_id
    attr_accessor :felem_req
    attr_accessor :ftype_id

    def self.from_json_data(data)
      out = CfgEfbom.new
      out.efcall_id = SenzingTypeDef::from_json_data(Integer, data["EFCALL_ID"])
      out.exec_order = SenzingTypeDef::from_json_data(Integer, data["EXEC_ORDER"])
      out.felem_id = SenzingTypeDef::from_json_data(Integer, data["FELEM_ID"])
      out.felem_req = SenzingTypeDef::from_json_data(String, data["FELEM_REQ"])
      out.ftype_id = SenzingTypeDef::from_json_data(Integer, data["FTYPE_ID"])
      out
    end

    def to_json_data
      data = {}
      data["EFCALL_ID"] = SenzingTypeDef::to_json_data(efcall_id)
      data["EXEC_ORDER"] = SenzingTypeDef::to_json_data(exec_order)
      data["FELEM_ID"] = SenzingTypeDef::to_json_data(felem_id)
      data["FELEM_REQ"] = SenzingTypeDef::to_json_data(felem_req)
      data["FTYPE_ID"] = SenzingTypeDef::to_json_data(ftype_id)
      data
    end
  end

  class CfgEfcall
    attr_accessor :efcall_id
    attr_accessor :efeat_ftype_id
    attr_accessor :efunc_id
    attr_accessor :exec_order
    attr_accessor :felem_id
    attr_accessor :ftype_id
    attr_accessor :is_virtual

    def self.from_json_data(data)
      out = CfgEfcall.new
      out.efcall_id = SenzingTypeDef::from_json_data(Integer, data["EFCALL_ID"])
      out.efeat_ftype_id = SenzingTypeDef::from_json_data(Integer, data["EFEAT_FTYPE_ID"])
      out.efunc_id = SenzingTypeDef::from_json_data(Integer, data["EFUNC_ID"])
      out.exec_order = SenzingTypeDef::from_json_data(Integer, data["EXEC_ORDER"])
      out.felem_id = SenzingTypeDef::from_json_data(Integer, data["FELEM_ID"])
      out.ftype_id = SenzingTypeDef::from_json_data(Integer, data["FTYPE_ID"])
      out.is_virtual = SenzingTypeDef::from_json_data(String, data["IS_VIRTUAL"])
      out
    end

    def to_json_data
      data = {}
      data["EFCALL_ID"] = SenzingTypeDef::to_json_data(efcall_id)
      data["EFEAT_FTYPE_ID"] = SenzingTypeDef::to_json_data(efeat_ftype_id)
      data["EFUNC_ID"] = SenzingTypeDef::to_json_data(efunc_id)
      data["EXEC_ORDER"] = SenzingTypeDef::to_json_data(exec_order)
      data["FELEM_ID"] = SenzingTypeDef::to_json_data(felem_id)
      data["FTYPE_ID"] = SenzingTypeDef::to_json_data(ftype_id)
      data["IS_VIRTUAL"] = SenzingTypeDef::to_json_data(is_virtual)
      data
    end
  end

  class CfgEfunc
    attr_accessor :connect_str
    attr_accessor :efunc_code
    attr_accessor :efunc_desc
    attr_accessor :efunc_id
    attr_accessor :func_lib
    attr_accessor :func_ver
    attr_accessor :java_class_name
    attr_accessor :language

    def self.from_json_data(data)
      out = CfgEfunc.new
      out.connect_str = SenzingTypeDef::from_json_data(String, data["CONNECT_STR"])
      out.efunc_code = SenzingTypeDef::from_json_data(String, data["EFUNC_CODE"])
      out.efunc_desc = SenzingTypeDef::from_json_data(String, data["EFUNC_DESC"])
      out.efunc_id = SenzingTypeDef::from_json_data(Integer, data["EFUNC_ID"])
      out.func_lib = SenzingTypeDef::from_json_data(String, data["FUNC_LIB"])
      out.func_ver = SenzingTypeDef::from_json_data(String, data["FUNC_VER"])
      out.java_class_name = SenzingTypeDef::from_json_data(String, data["JAVA_CLASS_NAME"])
      out.language = SenzingTypeDef::from_json_data(String, data["LANGUAGE"])
      out
    end

    def to_json_data
      data = {}
      data["CONNECT_STR"] = SenzingTypeDef::to_json_data(connect_str)
      data["EFUNC_CODE"] = SenzingTypeDef::to_json_data(efunc_code)
      data["EFUNC_DESC"] = SenzingTypeDef::to_json_data(efunc_desc)
      data["EFUNC_ID"] = SenzingTypeDef::to_json_data(efunc_id)
      data["FUNC_LIB"] = SenzingTypeDef::to_json_data(func_lib)
      data["FUNC_VER"] = SenzingTypeDef::to_json_data(func_ver)
      data["JAVA_CLASS_NAME"] = SenzingTypeDef::to_json_data(java_class_name)
      data["LANGUAGE"] = SenzingTypeDef::to_json_data(language)
      data
    end
  end

  class CfgErfrag
    attr_accessor :erfrag_code
    attr_accessor :erfrag_depends
    attr_accessor :erfrag_desc
    attr_accessor :erfrag_id
    attr_accessor :erfrag_source

    def self.from_json_data(data)
      out = CfgErfrag.new
      out.erfrag_code = SenzingTypeDef::from_json_data(String, data["ERFRAG_CODE"])
      out.erfrag_depends = SenzingTypeDef::from_json_data(String, data["ERFRAG_DEPENDS"])
      out.erfrag_desc = SenzingTypeDef::from_json_data(String, data["ERFRAG_DESC"])
      out.erfrag_id = SenzingTypeDef::from_json_data(Integer, data["ERFRAG_ID"])
      out.erfrag_source = SenzingTypeDef::from_json_data(String, data["ERFRAG_SOURCE"])
      out
    end

    def to_json_data
      data = {}
      data["ERFRAG_CODE"] = SenzingTypeDef::to_json_data(erfrag_code)
      data["ERFRAG_DEPENDS"] = SenzingTypeDef::to_json_data(erfrag_depends)
      data["ERFRAG_DESC"] = SenzingTypeDef::to_json_data(erfrag_desc)
      data["ERFRAG_ID"] = SenzingTypeDef::to_json_data(erfrag_id)
      data["ERFRAG_SOURCE"] = SenzingTypeDef::to_json_data(erfrag_source)
      data
    end
  end

  class CfgErrule
    attr_accessor :disq_erfrag_code
    attr_accessor :errule_code
    attr_accessor :errule_desc
    attr_accessor :errule_id
    attr_accessor :errule_tier
    attr_accessor :qual_erfrag_code
    attr_accessor :ref_score
    attr_accessor :relate
    attr_accessor :resolve
    attr_accessor :rtype_id

    def self.from_json_data(data)
      out = CfgErrule.new
      out.disq_erfrag_code = SenzingTypeDef::from_json_data(String, data["DISQ_ERFRAG_CODE"])
      out.errule_code = SenzingTypeDef::from_json_data(String, data["ERRULE_CODE"])
      out.errule_desc = SenzingTypeDef::from_json_data(String, data["ERRULE_DESC"])
      out.errule_id = SenzingTypeDef::from_json_data(Integer, data["ERRULE_ID"])
      out.errule_tier = SenzingTypeDef::from_json_data(Integer, data["ERRULE_TIER"])
      out.qual_erfrag_code = SenzingTypeDef::from_json_data(String, data["QUAL_ERFRAG_CODE"])
      out.ref_score = SenzingTypeDef::from_json_data(Integer, data["REF_SCORE"])
      out.relate = SenzingTypeDef::from_json_data(String, data["RELATE"])
      out.resolve = SenzingTypeDef::from_json_data(String, data["RESOLVE"])
      out.rtype_id = SenzingTypeDef::from_json_data(Integer, data["RTYPE_ID"])
      out
    end

    def to_json_data
      data = {}
      data["DISQ_ERFRAG_CODE"] = SenzingTypeDef::to_json_data(disq_erfrag_code)
      data["ERRULE_CODE"] = SenzingTypeDef::to_json_data(errule_code)
      data["ERRULE_DESC"] = SenzingTypeDef::to_json_data(errule_desc)
      data["ERRULE_ID"] = SenzingTypeDef::to_json_data(errule_id)
      data["ERRULE_TIER"] = SenzingTypeDef::to_json_data(errule_tier)
      data["QUAL_ERFRAG_CODE"] = SenzingTypeDef::to_json_data(qual_erfrag_code)
      data["REF_SCORE"] = SenzingTypeDef::to_json_data(ref_score)
      data["RELATE"] = SenzingTypeDef::to_json_data(relate)
      data["RESOLVE"] = SenzingTypeDef::to_json_data(resolve)
      data["RTYPE_ID"] = SenzingTypeDef::to_json_data(rtype_id)
      data
    end
  end

  class CfgEtype
    attr_accessor :eclass_id
    attr_accessor :etype_code
    attr_accessor :etype_desc
    attr_accessor :etype_id

    def self.from_json_data(data)
      out = CfgEtype.new
      out.eclass_id = SenzingTypeDef::from_json_data(Integer, data["ECLASS_ID"])
      out.etype_code = SenzingTypeDef::from_json_data(String, data["ETYPE_CODE"])
      out.etype_desc = SenzingTypeDef::from_json_data(String, data["ETYPE_DESC"])
      out.etype_id = SenzingTypeDef::from_json_data(Integer, data["ETYPE_ID"])
      out
    end

    def to_json_data
      data = {}
      data["ECLASS_ID"] = SenzingTypeDef::to_json_data(eclass_id)
      data["ETYPE_CODE"] = SenzingTypeDef::to_json_data(etype_code)
      data["ETYPE_DESC"] = SenzingTypeDef::to_json_data(etype_desc)
      data["ETYPE_ID"] = SenzingTypeDef::to_json_data(etype_id)
      data
    end
  end

  class CfgFbom
    attr_accessor :derived
    attr_accessor :display_delim
    attr_accessor :display_level
    attr_accessor :exec_order
    attr_accessor :felem_id
    attr_accessor :ftype_id

    def self.from_json_data(data)
      out = CfgFbom.new
      out.derived = SenzingTypeDef::from_json_data(String, data["DERIVED"])
      out.display_delim = SenzingTypeDef::from_json_data(String, data["DISPLAY_DELIM"])
      out.display_level = SenzingTypeDef::from_json_data(Integer, data["DISPLAY_LEVEL"])
      out.exec_order = SenzingTypeDef::from_json_data(Integer, data["EXEC_ORDER"])
      out.felem_id = SenzingTypeDef::from_json_data(Integer, data["FELEM_ID"])
      out.ftype_id = SenzingTypeDef::from_json_data(Integer, data["FTYPE_ID"])
      out
    end

    def to_json_data
      data = {}
      data["DERIVED"] = SenzingTypeDef::to_json_data(derived)
      data["DISPLAY_DELIM"] = SenzingTypeDef::to_json_data(display_delim)
      data["DISPLAY_LEVEL"] = SenzingTypeDef::to_json_data(display_level)
      data["EXEC_ORDER"] = SenzingTypeDef::to_json_data(exec_order)
      data["FELEM_ID"] = SenzingTypeDef::to_json_data(felem_id)
      data["FTYPE_ID"] = SenzingTypeDef::to_json_data(ftype_id)
      data
    end
  end

  class CfgFbovr
    attr_accessor :eclass_id
    attr_accessor :ftype_excl
    attr_accessor :ftype_freq
    attr_accessor :ftype_id
    attr_accessor :ftype_stab
    attr_accessor :utype_code

    def self.from_json_data(data)
      out = CfgFbovr.new
      out.eclass_id = SenzingTypeDef::from_json_data(Integer, data["ECLASS_ID"])
      out.ftype_excl = SenzingTypeDef::from_json_data(String, data["FTYPE_EXCL"])
      out.ftype_freq = SenzingTypeDef::from_json_data(String, data["FTYPE_FREQ"])
      out.ftype_id = SenzingTypeDef::from_json_data(Integer, data["FTYPE_ID"])
      out.ftype_stab = SenzingTypeDef::from_json_data(String, data["FTYPE_STAB"])
      out.utype_code = SenzingTypeDef::from_json_data(String, data["UTYPE_CODE"])
      out
    end

    def to_json_data
      data = {}
      data["ECLASS_ID"] = SenzingTypeDef::to_json_data(eclass_id)
      data["FTYPE_EXCL"] = SenzingTypeDef::to_json_data(ftype_excl)
      data["FTYPE_FREQ"] = SenzingTypeDef::to_json_data(ftype_freq)
      data["FTYPE_ID"] = SenzingTypeDef::to_json_data(ftype_id)
      data["FTYPE_STAB"] = SenzingTypeDef::to_json_data(ftype_stab)
      data["UTYPE_CODE"] = SenzingTypeDef::to_json_data(utype_code)
      data
    end
  end

  class CfgFclass
    attr_accessor :fclass_code
    attr_accessor :fclass_desc
    attr_accessor :fclass_id

    def self.from_json_data(data)
      out = CfgFclass.new
      out.fclass_code = SenzingTypeDef::from_json_data(String, data["FCLASS_CODE"])
      out.fclass_desc = SenzingTypeDef::from_json_data(String, data["FCLASS_DESC"])
      out.fclass_id = SenzingTypeDef::from_json_data(Integer, data["FCLASS_ID"])
      out
    end

    def to_json_data
      data = {}
      data["FCLASS_CODE"] = SenzingTypeDef::to_json_data(fclass_code)
      data["FCLASS_DESC"] = SenzingTypeDef::to_json_data(fclass_desc)
      data["FCLASS_ID"] = SenzingTypeDef::to_json_data(fclass_id)
      data
    end
  end

  class CfgFelem
    attr_accessor :data_type
    attr_accessor :felem_code
    attr_accessor :felem_desc
    attr_accessor :felem_id
    attr_accessor :tokenize

    def self.from_json_data(data)
      out = CfgFelem.new
      out.data_type = SenzingTypeDef::from_json_data(String, data["DATA_TYPE"])
      out.felem_code = SenzingTypeDef::from_json_data(String, data["FELEM_CODE"])
      out.felem_desc = SenzingTypeDef::from_json_data(String, data["FELEM_DESC"])
      out.felem_id = SenzingTypeDef::from_json_data(Integer, data["FELEM_ID"])
      out.tokenize = SenzingTypeDef::from_json_data(String, data["TOKENIZE"])
      out
    end

    def to_json_data
      data = {}
      data["DATA_TYPE"] = SenzingTypeDef::to_json_data(data_type)
      data["FELEM_CODE"] = SenzingTypeDef::to_json_data(felem_code)
      data["FELEM_DESC"] = SenzingTypeDef::to_json_data(felem_desc)
      data["FELEM_ID"] = SenzingTypeDef::to_json_data(felem_id)
      data["TOKENIZE"] = SenzingTypeDef::to_json_data(tokenize)
      data
    end
  end

  class CfgFtype
    attr_accessor :anonymize
    attr_accessor :derivation
    attr_accessor :derived
    attr_accessor :fclass_id
    attr_accessor :ftype_code
    attr_accessor :ftype_desc
    attr_accessor :ftype_excl
    attr_accessor :ftype_freq
    attr_accessor :ftype_id
    attr_accessor :ftype_stab
    attr_accessor :persist_history
    attr_accessor :rtype_id
    attr_accessor :show_in_match_key
    attr_accessor :used_for_cand
    attr_accessor :version

    def self.from_json_data(data)
      out = CfgFtype.new
      out.anonymize = SenzingTypeDef::from_json_data(String, data["ANONYMIZE"])
      out.derivation = SenzingTypeDef::from_json_data(String, data["DERIVATION"])
      out.derived = SenzingTypeDef::from_json_data(String, data["DERIVED"])
      out.fclass_id = SenzingTypeDef::from_json_data(Integer, data["FCLASS_ID"])
      out.ftype_code = SenzingTypeDef::from_json_data(String, data["FTYPE_CODE"])
      out.ftype_desc = SenzingTypeDef::from_json_data(String, data["FTYPE_DESC"])
      out.ftype_excl = SenzingTypeDef::from_json_data(String, data["FTYPE_EXCL"])
      out.ftype_freq = SenzingTypeDef::from_json_data(String, data["FTYPE_FREQ"])
      out.ftype_id = SenzingTypeDef::from_json_data(Integer, data["FTYPE_ID"])
      out.ftype_stab = SenzingTypeDef::from_json_data(String, data["FTYPE_STAB"])
      out.persist_history = SenzingTypeDef::from_json_data(String, data["PERSIST_HISTORY"])
      out.rtype_id = SenzingTypeDef::from_json_data(Integer, data["RTYPE_ID"])
      out.show_in_match_key = SenzingTypeDef::from_json_data(String, data["SHOW_IN_MATCH_KEY"])
      out.used_for_cand = SenzingTypeDef::from_json_data(String, data["USED_FOR_CAND"])
      out.version = SenzingTypeDef::from_json_data(Integer, data["VERSION"])
      out
    end

    def to_json_data
      data = {}
      data["ANONYMIZE"] = SenzingTypeDef::to_json_data(anonymize)
      data["DERIVATION"] = SenzingTypeDef::to_json_data(derivation)
      data["DERIVED"] = SenzingTypeDef::to_json_data(derived)
      data["FCLASS_ID"] = SenzingTypeDef::to_json_data(fclass_id)
      data["FTYPE_CODE"] = SenzingTypeDef::to_json_data(ftype_code)
      data["FTYPE_DESC"] = SenzingTypeDef::to_json_data(ftype_desc)
      data["FTYPE_EXCL"] = SenzingTypeDef::to_json_data(ftype_excl)
      data["FTYPE_FREQ"] = SenzingTypeDef::to_json_data(ftype_freq)
      data["FTYPE_ID"] = SenzingTypeDef::to_json_data(ftype_id)
      data["FTYPE_STAB"] = SenzingTypeDef::to_json_data(ftype_stab)
      data["PERSIST_HISTORY"] = SenzingTypeDef::to_json_data(persist_history)
      data["RTYPE_ID"] = SenzingTypeDef::to_json_data(rtype_id)
      data["SHOW_IN_MATCH_KEY"] = SenzingTypeDef::to_json_data(show_in_match_key)
      data["USED_FOR_CAND"] = SenzingTypeDef::to_json_data(used_for_cand)
      data["VERSION"] = SenzingTypeDef::to_json_data(version)
      data
    end
  end

  class CfgGenericThreshold
    attr_accessor :behavior
    attr_accessor :candidate_cap
    attr_accessor :ftype_id
    attr_accessor :gplan_id
    attr_accessor :scoring_cap
    attr_accessor :send_to_redo

    def self.from_json_data(data)
      out = CfgGenericThreshold.new
      out.behavior = SenzingTypeDef::from_json_data(String, data["BEHAVIOR"])
      out.candidate_cap = SenzingTypeDef::from_json_data(Integer, data["CANDIDATE_CAP"])
      out.ftype_id = SenzingTypeDef::from_json_data(Integer, data["FTYPE_ID"])
      out.gplan_id = SenzingTypeDef::from_json_data(Integer, data["GPLAN_ID"])
      out.scoring_cap = SenzingTypeDef::from_json_data(Integer, data["SCORING_CAP"])
      out.send_to_redo = SenzingTypeDef::from_json_data(String, data["SEND_TO_REDO"])
      out
    end

    def to_json_data
      data = {}
      data["BEHAVIOR"] = SenzingTypeDef::to_json_data(behavior)
      data["CANDIDATE_CAP"] = SenzingTypeDef::to_json_data(candidate_cap)
      data["FTYPE_ID"] = SenzingTypeDef::to_json_data(ftype_id)
      data["GPLAN_ID"] = SenzingTypeDef::to_json_data(gplan_id)
      data["SCORING_CAP"] = SenzingTypeDef::to_json_data(scoring_cap)
      data["SEND_TO_REDO"] = SenzingTypeDef::to_json_data(send_to_redo)
      data
    end
  end

  class CfgGplan
    attr_accessor :gplan_code
    attr_accessor :gplan_desc
    attr_accessor :gplan_id

    def self.from_json_data(data)
      out = CfgGplan.new
      out.gplan_code = SenzingTypeDef::from_json_data(String, data["GPLAN_CODE"])
      out.gplan_desc = SenzingTypeDef::from_json_data(String, data["GPLAN_DESC"])
      out.gplan_id = SenzingTypeDef::from_json_data(Integer, data["GPLAN_ID"])
      out
    end

    def to_json_data
      data = {}
      data["GPLAN_CODE"] = SenzingTypeDef::to_json_data(gplan_code)
      data["GPLAN_DESC"] = SenzingTypeDef::to_json_data(gplan_desc)
      data["GPLAN_ID"] = SenzingTypeDef::to_json_data(gplan_id)
      data
    end
  end

  class CfgLens
    attr_accessor :lens_code
    attr_accessor :lens_desc
    attr_accessor :lens_id

    def self.from_json_data(data)
      out = CfgLens.new
      out.lens_code = SenzingTypeDef::from_json_data(String, data["LENS_CODE"])
      out.lens_desc = SenzingTypeDef::from_json_data(String, data["LENS_DESC"])
      out.lens_id = SenzingTypeDef::from_json_data(Integer, data["LENS_ID"])
      out
    end

    def to_json_data
      data = {}
      data["LENS_CODE"] = SenzingTypeDef::to_json_data(lens_code)
      data["LENS_DESC"] = SenzingTypeDef::to_json_data(lens_desc)
      data["LENS_ID"] = SenzingTypeDef::to_json_data(lens_id)
      data
    end
  end

  class CfgLensrl
    attr_accessor :value

    def self.from_json_data(data)
      out = CfgLensrl.new
      out.value = SenzingTypeDef.from_json_data(Array[FixmeUnknown], data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class CfgRclass
    attr_accessor :is_disclosed
    attr_accessor :rclass_code
    attr_accessor :rclass_desc
    attr_accessor :rclass_id

    def self.from_json_data(data)
      out = CfgRclass.new
      out.is_disclosed = SenzingTypeDef::from_json_data(String, data["IS_DISCLOSED"])
      out.rclass_code = SenzingTypeDef::from_json_data(String, data["RCLASS_CODE"])
      out.rclass_desc = SenzingTypeDef::from_json_data(String, data["RCLASS_DESC"])
      out.rclass_id = SenzingTypeDef::from_json_data(Integer, data["RCLASS_ID"])
      out
    end

    def to_json_data
      data = {}
      data["IS_DISCLOSED"] = SenzingTypeDef::to_json_data(is_disclosed)
      data["RCLASS_CODE"] = SenzingTypeDef::to_json_data(rclass_code)
      data["RCLASS_DESC"] = SenzingTypeDef::to_json_data(rclass_desc)
      data["RCLASS_ID"] = SenzingTypeDef::to_json_data(rclass_id)
      data
    end
  end

  class CfgRtype
    attr_accessor :break_res
    attr_accessor :rclass_id
    attr_accessor :rel_strength
    attr_accessor :rtype_code
    attr_accessor :rtype_desc
    attr_accessor :rtype_id

    def self.from_json_data(data)
      out = CfgRtype.new
      out.break_res = SenzingTypeDef::from_json_data(String, data["BREAK_RES"])
      out.rclass_id = SenzingTypeDef::from_json_data(Integer, data["RCLASS_ID"])
      out.rel_strength = SenzingTypeDef::from_json_data(Integer, data["REL_STRENGTH"])
      out.rtype_code = SenzingTypeDef::from_json_data(String, data["RTYPE_CODE"])
      out.rtype_desc = SenzingTypeDef::from_json_data(String, data["RTYPE_DESC"])
      out.rtype_id = SenzingTypeDef::from_json_data(Integer, data["RTYPE_ID"])
      out
    end

    def to_json_data
      data = {}
      data["BREAK_RES"] = SenzingTypeDef::to_json_data(break_res)
      data["RCLASS_ID"] = SenzingTypeDef::to_json_data(rclass_id)
      data["REL_STRENGTH"] = SenzingTypeDef::to_json_data(rel_strength)
      data["RTYPE_CODE"] = SenzingTypeDef::to_json_data(rtype_code)
      data["RTYPE_DESC"] = SenzingTypeDef::to_json_data(rtype_desc)
      data["RTYPE_ID"] = SenzingTypeDef::to_json_data(rtype_id)
      data
    end
  end

  class CfgSfcall
    attr_accessor :exec_order
    attr_accessor :felem_id
    attr_accessor :ftype_id
    attr_accessor :sfcall_id
    attr_accessor :sfunc_id

    def self.from_json_data(data)
      out = CfgSfcall.new
      out.exec_order = SenzingTypeDef::from_json_data(Integer, data["EXEC_ORDER"])
      out.felem_id = SenzingTypeDef::from_json_data(Integer, data["FELEM_ID"])
      out.ftype_id = SenzingTypeDef::from_json_data(Integer, data["FTYPE_ID"])
      out.sfcall_id = SenzingTypeDef::from_json_data(Integer, data["SFCALL_ID"])
      out.sfunc_id = SenzingTypeDef::from_json_data(Integer, data["SFUNC_ID"])
      out
    end

    def to_json_data
      data = {}
      data["EXEC_ORDER"] = SenzingTypeDef::to_json_data(exec_order)
      data["FELEM_ID"] = SenzingTypeDef::to_json_data(felem_id)
      data["FTYPE_ID"] = SenzingTypeDef::to_json_data(ftype_id)
      data["SFCALL_ID"] = SenzingTypeDef::to_json_data(sfcall_id)
      data["SFUNC_ID"] = SenzingTypeDef::to_json_data(sfunc_id)
      data
    end
  end

  class CfgSfunc
    attr_accessor :connect_str
    attr_accessor :func_lib
    attr_accessor :func_ver
    attr_accessor :java_class_name
    attr_accessor :language
    attr_accessor :sfunc_code
    attr_accessor :sfunc_desc
    attr_accessor :sfunc_id

    def self.from_json_data(data)
      out = CfgSfunc.new
      out.connect_str = SenzingTypeDef::from_json_data(String, data["CONNECT_STR"])
      out.func_lib = SenzingTypeDef::from_json_data(String, data["FUNC_LIB"])
      out.func_ver = SenzingTypeDef::from_json_data(String, data["FUNC_VER"])
      out.java_class_name = SenzingTypeDef::from_json_data(String, data["JAVA_CLASS_NAME"])
      out.language = SenzingTypeDef::from_json_data(String, data["LANGUAGE"])
      out.sfunc_code = SenzingTypeDef::from_json_data(String, data["SFUNC_CODE"])
      out.sfunc_desc = SenzingTypeDef::from_json_data(String, data["SFUNC_DESC"])
      out.sfunc_id = SenzingTypeDef::from_json_data(Integer, data["SFUNC_ID"])
      out
    end

    def to_json_data
      data = {}
      data["CONNECT_STR"] = SenzingTypeDef::to_json_data(connect_str)
      data["FUNC_LIB"] = SenzingTypeDef::to_json_data(func_lib)
      data["FUNC_VER"] = SenzingTypeDef::to_json_data(func_ver)
      data["JAVA_CLASS_NAME"] = SenzingTypeDef::to_json_data(java_class_name)
      data["LANGUAGE"] = SenzingTypeDef::to_json_data(language)
      data["SFUNC_CODE"] = SenzingTypeDef::to_json_data(sfunc_code)
      data["SFUNC_DESC"] = SenzingTypeDef::to_json_data(sfunc_desc)
      data["SFUNC_ID"] = SenzingTypeDef::to_json_data(sfunc_id)
      data
    end
  end

  class ConfigBaseVersion
    attr_accessor :build_date
    attr_accessor :build_number
    attr_accessor :build_version
    attr_accessor :compatibility_version
    attr_accessor :product_name
    attr_accessor :version

    def self.from_json_data(data)
      out = ConfigBaseVersion.new
      out.build_date = SenzingTypeDef::from_json_data(String, data["BUILD_DATE"])
      out.build_number = SenzingTypeDef::from_json_data(String, data["BUILD_NUMBER"])
      out.build_version = SenzingTypeDef::from_json_data(String, data["BUILD_VERSION"])
      out.compatibility_version = SenzingTypeDef::from_json_data(CompatibilityVersion, data["COMPATIBILITY_VERSION"])
      out.product_name = SenzingTypeDef::from_json_data(String, data["PRODUCT_NAME"])
      out.version = SenzingTypeDef::from_json_data(String, data["VERSION"])
      out
    end

    def to_json_data
      data = {}
      data["BUILD_DATE"] = SenzingTypeDef::to_json_data(build_date)
      data["BUILD_NUMBER"] = SenzingTypeDef::to_json_data(build_number)
      data["BUILD_VERSION"] = SenzingTypeDef::to_json_data(build_version)
      data["COMPATIBILITY_VERSION"] = SenzingTypeDef::to_json_data(compatibility_version)
      data["PRODUCT_NAME"] = SenzingTypeDef::to_json_data(product_name)
      data["VERSION"] = SenzingTypeDef::to_json_data(version)
      data
    end
  end

  class CompatibilityVersion
    attr_accessor :config_version

    def self.from_json_data(data)
      out = CompatibilityVersion.new
      out.config_version = SenzingTypeDef::from_json_data(String, data["CONFIG_VERSION"])
      out
    end

    def to_json_data
      data = {}
      data["CONFIG_VERSION"] = SenzingTypeDef::to_json_data(config_version)
      data
    end
  end

  class Config
    attr_accessor :config_comments
    attr_accessor :config_id
    attr_accessor :sys_create_dt

    def self.from_json_data(data)
      out = Config.new
      out.config_comments = SenzingTypeDef::from_json_data(String, data["CONFIG_COMMENTS"])
      out.config_id = SenzingTypeDef::from_json_data(Integer, data["CONFIG_ID"])
      out.sys_create_dt = SenzingTypeDef::from_json_data(String, data["SYS_CREATE_DT"])
      out
    end

    def to_json_data
      data = {}
      data["CONFIG_COMMENTS"] = SenzingTypeDef::to_json_data(config_comments)
      data["CONFIG_ID"] = SenzingTypeDef::to_json_data(config_id)
      data["SYS_CREATE_DT"] = SenzingTypeDef::to_json_data(sys_create_dt)
      data
    end
  end

  class ConfigRegistry
    attr_accessor :configs

    def self.from_json_data(data)
      out = ConfigRegistry.new
      out.configs = SenzingTypeDef::from_json_data(Array[Config], data["CONFIGS"])
      out
    end

    def to_json_data
      data = {}
      data["CONFIGS"] = SenzingTypeDef::to_json_data(configs)
      data
    end
  end

  class DataSource
    # The text representation of the datasource.
    attr_accessor :dsrc_code

    # The unique identifier of the datasource.
    attr_accessor :dsrc_id

    def self.from_json_data(data)
      out = DataSource.new
      out.dsrc_code = SenzingTypeDef::from_json_data(String, data["DSRC_CODE"])
      out.dsrc_id = SenzingTypeDef::from_json_data(Integer, data["DSRC_ID"])
      out
    end

    def to_json_data
      data = {}
      data["DSRC_CODE"] = SenzingTypeDef::to_json_data(dsrc_code)
      data["DSRC_ID"] = SenzingTypeDef::to_json_data(dsrc_id)
      data
    end
  end

  class Entity
    attr_accessor :related_entities
    attr_accessor :resolved_entity

    def self.from_json_data(data)
      out = Entity.new
      out.related_entities = SenzingTypeDef::from_json_data(Array[RelatedEntity], data["RELATED_ENTITIES"])
      out.resolved_entity = SenzingTypeDef::from_json_data(ResolvedEntity, data["RESOLVED_ENTITY"])
      out
    end

    def to_json_data
      data = {}
      data["RELATED_ENTITIES"] = SenzingTypeDef::to_json_data(related_entities)
      data["RESOLVED_ENTITY"] = SenzingTypeDef::to_json_data(resolved_entity)
      data
    end
  end

  class EntityPath
    attr_accessor :end_entity_id
    attr_accessor :entities
    attr_accessor :start_entity_id

    def self.from_json_data(data)
      out = EntityPath.new
      out.end_entity_id = SenzingTypeDef::from_json_data(Integer, data["END_ENTITY_ID"])
      out.entities = SenzingTypeDef::from_json_data(Array[Integer], data["ENTITIES"])
      out.start_entity_id = SenzingTypeDef::from_json_data(Integer, data["START_ENTITY_ID"])
      out
    end

    def to_json_data
      data = {}
      data["END_ENTITY_ID"] = SenzingTypeDef::to_json_data(end_entity_id)
      data["ENTITIES"] = SenzingTypeDef::to_json_data(entities)
      data["START_ENTITY_ID"] = SenzingTypeDef::to_json_data(start_entity_id)
      data
    end
  end

  class ExportConfig
    attr_accessor :g2_config

    def self.from_json_data(data)
      out = ExportConfig.new
      out.g2_config = SenzingTypeDef::from_json_data(G2config, data["G2_CONFIG"])
      out
    end

    def to_json_data
      data = {}
      data["G2_CONFIG"] = SenzingTypeDef::to_json_data(g2_config)
      data
    end
  end

  class Feature
    attr_accessor :felem_code
    attr_accessor :felem_value

    def self.from_json_data(data)
      out = Feature.new
      out.felem_code = SenzingTypeDef::from_json_data(String, data["FELEM_CODE"])
      out.felem_value = SenzingTypeDef::from_json_data(String, data["FELEM_VALUE"])
      out
    end

    def to_json_data
      data = {}
      data["FELEM_CODE"] = SenzingTypeDef::to_json_data(felem_code)
      data["FELEM_VALUE"] = SenzingTypeDef::to_json_data(felem_value)
      data
    end
  end

  class FeatureDescriptionValue
    attr_accessor :candidate_cap_reached
    attr_accessor :entity_count
    attr_accessor :feat_desc
    attr_accessor :lib_feat_id
    attr_accessor :scoring_cap_reached
    attr_accessor :suppressed
    attr_accessor :used_for_cand
    attr_accessor :used_for_scoring

    def self.from_json_data(data)
      out = FeatureDescriptionValue.new
      out.candidate_cap_reached = SenzingTypeDef::from_json_data(String, data["CANDIDATE_CAP_REACHED"])
      out.entity_count = SenzingTypeDef::from_json_data(Integer, data["ENTITY_COUNT"])
      out.feat_desc = SenzingTypeDef::from_json_data(String, data["FEAT_DESC"])
      out.lib_feat_id = SenzingTypeDef::from_json_data(Integer, data["LIB_FEAT_ID"])
      out.scoring_cap_reached = SenzingTypeDef::from_json_data(String, data["SCORING_CAP_REACHED"])
      out.suppressed = SenzingTypeDef::from_json_data(String, data["SUPPRESSED"])
      out.used_for_cand = SenzingTypeDef::from_json_data(String, data["USED_FOR_CAND"])
      out.used_for_scoring = SenzingTypeDef::from_json_data(String, data["USED_FOR_SCORING"])
      out
    end

    def to_json_data
      data = {}
      data["CANDIDATE_CAP_REACHED"] = SenzingTypeDef::to_json_data(candidate_cap_reached)
      data["ENTITY_COUNT"] = SenzingTypeDef::to_json_data(entity_count)
      data["FEAT_DESC"] = SenzingTypeDef::to_json_data(feat_desc)
      data["LIB_FEAT_ID"] = SenzingTypeDef::to_json_data(lib_feat_id)
      data["SCORING_CAP_REACHED"] = SenzingTypeDef::to_json_data(scoring_cap_reached)
      data["SUPPRESSED"] = SenzingTypeDef::to_json_data(suppressed)
      data["USED_FOR_CAND"] = SenzingTypeDef::to_json_data(used_for_cand)
      data["USED_FOR_SCORING"] = SenzingTypeDef::to_json_data(used_for_scoring)
      data
    end
  end

  class FeatureForAttribute
    attr_accessor :feat_desc
    attr_accessor :feat_desc_values
    attr_accessor :lib_feat_id
    attr_accessor :usage_type

    def self.from_json_data(data)
      out = FeatureForAttribute.new
      out.feat_desc = SenzingTypeDef::from_json_data(String, data["FEAT_DESC"])
      out.feat_desc_values = SenzingTypeDef::from_json_data(Array[FeatureDescriptionValue], data["FEAT_DESC_VALUES"])
      out.lib_feat_id = SenzingTypeDef::from_json_data(Integer, data["LIB_FEAT_ID"])
      out.usage_type = SenzingTypeDef::from_json_data(String, data["USAGE_TYPE"])
      out
    end

    def to_json_data
      data = {}
      data["FEAT_DESC"] = SenzingTypeDef::to_json_data(feat_desc)
      data["FEAT_DESC_VALUES"] = SenzingTypeDef::to_json_data(feat_desc_values)
      data["LIB_FEAT_ID"] = SenzingTypeDef::to_json_data(lib_feat_id)
      data["USAGE_TYPE"] = SenzingTypeDef::to_json_data(usage_type)
      data
    end
  end

  class FeatureScoreForAttribute
    attr_accessor :candidate_feat
    attr_accessor :candidate_feat_id
    attr_accessor :candidate_feat_usage_type
    attr_accessor :full_score
    attr_accessor :generation_match
    attr_accessor :gnr_fn
    attr_accessor :gnr_gn
    attr_accessor :gnr_on
    attr_accessor :gnr_sn
    attr_accessor :inbound_feat
    attr_accessor :inbound_feat_id
    attr_accessor :inbound_feat_usage_type
    attr_accessor :score_behavior
    attr_accessor :score_bucket

    def self.from_json_data(data)
      out = FeatureScoreForAttribute.new
      out.candidate_feat = SenzingTypeDef::from_json_data(String, data["CANDIDATE_FEAT"])
      out.candidate_feat_id = SenzingTypeDef::from_json_data(Integer, data["CANDIDATE_FEAT_ID"])
      out.candidate_feat_usage_type = SenzingTypeDef::from_json_data(String, data["CANDIDATE_FEAT_USAGE_TYPE"])
      out.full_score = SenzingTypeDef::from_json_data(Integer, data["FULL_SCORE"])
      out.generation_match = SenzingTypeDef::from_json_data(Integer, data["GENERATION_MATCH"])
      out.gnr_fn = SenzingTypeDef::from_json_data(Integer, data["GNR_FN"])
      out.gnr_gn = SenzingTypeDef::from_json_data(Integer, data["GNR_GN"])
      out.gnr_on = SenzingTypeDef::from_json_data(Integer, data["GNR_ON"])
      out.gnr_sn = SenzingTypeDef::from_json_data(Integer, data["GNR_SN"])
      out.inbound_feat = SenzingTypeDef::from_json_data(String, data["INBOUND_FEAT"])
      out.inbound_feat_id = SenzingTypeDef::from_json_data(Integer, data["INBOUND_FEAT_ID"])
      out.inbound_feat_usage_type = SenzingTypeDef::from_json_data(String, data["INBOUND_FEAT_USAGE_TYPE"])
      out.score_behavior = SenzingTypeDef::from_json_data(String, data["SCORE_BEHAVIOR"])
      out.score_bucket = SenzingTypeDef::from_json_data(String, data["SCORE_BUCKET"])
      out
    end

    def to_json_data
      data = {}
      data["CANDIDATE_FEAT"] = SenzingTypeDef::to_json_data(candidate_feat)
      data["CANDIDATE_FEAT_ID"] = SenzingTypeDef::to_json_data(candidate_feat_id)
      data["CANDIDATE_FEAT_USAGE_TYPE"] = SenzingTypeDef::to_json_data(candidate_feat_usage_type)
      data["FULL_SCORE"] = SenzingTypeDef::to_json_data(full_score)
      data["GENERATION_MATCH"] = SenzingTypeDef::to_json_data(generation_match)
      data["GNR_FN"] = SenzingTypeDef::to_json_data(gnr_fn)
      data["GNR_GN"] = SenzingTypeDef::to_json_data(gnr_gn)
      data["GNR_ON"] = SenzingTypeDef::to_json_data(gnr_on)
      data["GNR_SN"] = SenzingTypeDef::to_json_data(gnr_sn)
      data["INBOUND_FEAT"] = SenzingTypeDef::to_json_data(inbound_feat)
      data["INBOUND_FEAT_ID"] = SenzingTypeDef::to_json_data(inbound_feat_id)
      data["INBOUND_FEAT_USAGE_TYPE"] = SenzingTypeDef::to_json_data(inbound_feat_usage_type)
      data["SCORE_BEHAVIOR"] = SenzingTypeDef::to_json_data(score_behavior)
      data["SCORE_BUCKET"] = SenzingTypeDef::to_json_data(score_bucket)
      data
    end
  end

  class FeatureScores
    attr_accessor :value

    def self.from_json_data(data)
      out = FeatureScores.new
      out.value = SenzingTypeDef.from_json_data(String, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class FeatureScoresForAttribute
    attr_accessor :value

    def self.from_json_data(data)
      out = FeatureScoresForAttribute.new
      out.value = SenzingTypeDef.from_json_data(Array[FeatureScoreForAttribute], data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class FetchNext
    attr_accessor :value

    def self.from_json_data(data)
      out = FetchNext.new
      out.value = SenzingTypeDef.from_json_data(FixmeUnknown, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class FinalState
    attr_accessor :need_reevaluation
    attr_accessor :virtual_entities

    def self.from_json_data(data)
      out = FinalState.new
      out.need_reevaluation = SenzingTypeDef::from_json_data(Integer, data["NEED_REEVALUATION"])
      out.virtual_entities = SenzingTypeDef::from_json_data(Array[VirtualEntitySynopsis], data["VIRTUAL_ENTITIES"])
      out
    end

    def to_json_data
      data = {}
      data["NEED_REEVALUATION"] = SenzingTypeDef::to_json_data(need_reevaluation)
      data["VIRTUAL_ENTITIES"] = SenzingTypeDef::to_json_data(virtual_entities)
      data
    end
  end

  class FixmeUnknown
    attr_accessor :fixme_unknown

    def self.from_json_data(data)
      out = FixmeUnknown.new
      out.fixme_unknown = SenzingTypeDef::from_json_data(String, data["FIXME_UNKNOWN"])
      out
    end

    def to_json_data
      data = {}
      data["FIXME_UNKNOWN"] = SenzingTypeDef::to_json_data(fixme_unknown)
      data
    end
  end

  class FocusRecord
    attr_accessor :data_source
    attr_accessor :record_id

    def self.from_json_data(data)
      out = FocusRecord.new
      out.data_source = SenzingTypeDef::from_json_data(String, data["DATA_SOURCE"])
      out.record_id = SenzingTypeDef::from_json_data(String, data["RECORD_ID"])
      out
    end

    def to_json_data
      data = {}
      data["DATA_SOURCE"] = SenzingTypeDef::to_json_data(data_source)
      data["RECORD_ID"] = SenzingTypeDef::to_json_data(record_id)
      data
    end
  end

  class FocusRecords
    attr_accessor :value

    def self.from_json_data(data)
      out = FocusRecords.new
      out.value = SenzingTypeDef.from_json_data(Array[FocusRecord], data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class G2config
    attr_accessor :cfg_attr
    attr_accessor :cfg_cfbom
    attr_accessor :cfg_cfcall
    attr_accessor :cfg_cfrtn
    attr_accessor :cfg_cfunc
    attr_accessor :cfg_dfbom
    attr_accessor :cfg_dfcall
    attr_accessor :cfg_dfunc
    attr_accessor :cfg_dsrc
    attr_accessor :cfg_dsrc_interest
    attr_accessor :cfg_ebom
    attr_accessor :cfg_eclass
    attr_accessor :cfg_efbom
    attr_accessor :cfg_efcall
    attr_accessor :cfg_efunc
    attr_accessor :cfg_erfrag
    attr_accessor :cfg_errule
    attr_accessor :cfg_etype
    attr_accessor :cfg_fbom
    attr_accessor :cfg_fbovr
    attr_accessor :cfg_fclass
    attr_accessor :cfg_felem
    attr_accessor :cfg_ftype
    attr_accessor :cfg_generic_threshold
    attr_accessor :cfg_gplan
    attr_accessor :cfg_lens
    attr_accessor :cfg_lensrl
    attr_accessor :cfg_rclass
    attr_accessor :cfg_rtype
    attr_accessor :cfg_sfcall
    attr_accessor :cfg_sfunc
    attr_accessor :config_base_version
    attr_accessor :sys_oom

    def self.from_json_data(data)
      out = G2config.new
      out.cfg_attr = SenzingTypeDef::from_json_data(Array[CfgAttr], data["CFG_ATTR"])
      out.cfg_cfbom = SenzingTypeDef::from_json_data(Array[CfgCfbom], data["CFG_CFBOM"])
      out.cfg_cfcall = SenzingTypeDef::from_json_data(Array[CfgCfcall], data["CFG_CFCALL"])
      out.cfg_cfrtn = SenzingTypeDef::from_json_data(Array[CfgCfrtn], data["CFG_CFRTN"])
      out.cfg_cfunc = SenzingTypeDef::from_json_data(Array[CfgCfunc], data["CFG_CFUNC"])
      out.cfg_dfbom = SenzingTypeDef::from_json_data(Array[CfgDfbom], data["CFG_DFBOM"])
      out.cfg_dfcall = SenzingTypeDef::from_json_data(Array[CfgDfcall], data["CFG_DFCALL"])
      out.cfg_dfunc = SenzingTypeDef::from_json_data(Array[CfgDfunc], data["CFG_DFUNC"])
      out.cfg_dsrc = SenzingTypeDef::from_json_data(Array[CfgDsrc], data["CFG_DSRC"])
      out.cfg_dsrc_interest = SenzingTypeDef::from_json_data(Array[CfgDsrcInterest], data["CFG_DSRC_INTEREST"])
      out.cfg_ebom = SenzingTypeDef::from_json_data(Array[CfgEbom], data["CFG_EBOM"])
      out.cfg_eclass = SenzingTypeDef::from_json_data(Array[CfgEclass], data["CFG_ECLASS"])
      out.cfg_efbom = SenzingTypeDef::from_json_data(Array[CfgEfbom], data["CFG_EFBOM"])
      out.cfg_efcall = SenzingTypeDef::from_json_data(Array[CfgEfcall], data["CFG_EFCALL"])
      out.cfg_efunc = SenzingTypeDef::from_json_data(Array[CfgEfunc], data["CFG_EFUNC"])
      out.cfg_erfrag = SenzingTypeDef::from_json_data(Array[CfgErfrag], data["CFG_ERFRAG"])
      out.cfg_errule = SenzingTypeDef::from_json_data(Array[CfgErrule], data["CFG_ERRULE"])
      out.cfg_etype = SenzingTypeDef::from_json_data(Array[CfgEtype], data["CFG_ETYPE"])
      out.cfg_fbom = SenzingTypeDef::from_json_data(Array[CfgFbom], data["CFG_FBOM"])
      out.cfg_fbovr = SenzingTypeDef::from_json_data(Array[CfgFbovr], data["CFG_FBOVR"])
      out.cfg_fclass = SenzingTypeDef::from_json_data(Array[CfgFclass], data["CFG_FCLASS"])
      out.cfg_felem = SenzingTypeDef::from_json_data(Array[CfgFelem], data["CFG_FELEM"])
      out.cfg_ftype = SenzingTypeDef::from_json_data(Array[CfgFtype], data["CFG_FTYPE"])
      out.cfg_generic_threshold = SenzingTypeDef::from_json_data(Array[CfgGenericThreshold], data["CFG_GENERIC_THRESHOLD"])
      out.cfg_gplan = SenzingTypeDef::from_json_data(Array[CfgGplan], data["CFG_GPLAN"])
      out.cfg_lens = SenzingTypeDef::from_json_data(Array[CfgLens], data["CFG_LENS"])
      out.cfg_lensrl = SenzingTypeDef::from_json_data(Array[CfgLensrl], data["CFG_LENSRL"])
      out.cfg_rclass = SenzingTypeDef::from_json_data(Array[CfgRclass], data["CFG_RCLASS"])
      out.cfg_rtype = SenzingTypeDef::from_json_data(Array[CfgRtype], data["CFG_RTYPE"])
      out.cfg_sfcall = SenzingTypeDef::from_json_data(Array[CfgSfcall], data["CFG_SFCALL"])
      out.cfg_sfunc = SenzingTypeDef::from_json_data(Array[CfgSfunc], data["CFG_SFUNC"])
      out.config_base_version = SenzingTypeDef::from_json_data(ConfigBaseVersion, data["CONFIG_BASE_VERSION"])
      out.sys_oom = SenzingTypeDef::from_json_data(Array[SysOom], data["SYS_OOM"])
      out
    end

    def to_json_data
      data = {}
      data["CFG_ATTR"] = SenzingTypeDef::to_json_data(cfg_attr)
      data["CFG_CFBOM"] = SenzingTypeDef::to_json_data(cfg_cfbom)
      data["CFG_CFCALL"] = SenzingTypeDef::to_json_data(cfg_cfcall)
      data["CFG_CFRTN"] = SenzingTypeDef::to_json_data(cfg_cfrtn)
      data["CFG_CFUNC"] = SenzingTypeDef::to_json_data(cfg_cfunc)
      data["CFG_DFBOM"] = SenzingTypeDef::to_json_data(cfg_dfbom)
      data["CFG_DFCALL"] = SenzingTypeDef::to_json_data(cfg_dfcall)
      data["CFG_DFUNC"] = SenzingTypeDef::to_json_data(cfg_dfunc)
      data["CFG_DSRC"] = SenzingTypeDef::to_json_data(cfg_dsrc)
      data["CFG_DSRC_INTEREST"] = SenzingTypeDef::to_json_data(cfg_dsrc_interest)
      data["CFG_EBOM"] = SenzingTypeDef::to_json_data(cfg_ebom)
      data["CFG_ECLASS"] = SenzingTypeDef::to_json_data(cfg_eclass)
      data["CFG_EFBOM"] = SenzingTypeDef::to_json_data(cfg_efbom)
      data["CFG_EFCALL"] = SenzingTypeDef::to_json_data(cfg_efcall)
      data["CFG_EFUNC"] = SenzingTypeDef::to_json_data(cfg_efunc)
      data["CFG_ERFRAG"] = SenzingTypeDef::to_json_data(cfg_erfrag)
      data["CFG_ERRULE"] = SenzingTypeDef::to_json_data(cfg_errule)
      data["CFG_ETYPE"] = SenzingTypeDef::to_json_data(cfg_etype)
      data["CFG_FBOM"] = SenzingTypeDef::to_json_data(cfg_fbom)
      data["CFG_FBOVR"] = SenzingTypeDef::to_json_data(cfg_fbovr)
      data["CFG_FCLASS"] = SenzingTypeDef::to_json_data(cfg_fclass)
      data["CFG_FELEM"] = SenzingTypeDef::to_json_data(cfg_felem)
      data["CFG_FTYPE"] = SenzingTypeDef::to_json_data(cfg_ftype)
      data["CFG_GENERIC_THRESHOLD"] = SenzingTypeDef::to_json_data(cfg_generic_threshold)
      data["CFG_GPLAN"] = SenzingTypeDef::to_json_data(cfg_gplan)
      data["CFG_LENS"] = SenzingTypeDef::to_json_data(cfg_lens)
      data["CFG_LENSRL"] = SenzingTypeDef::to_json_data(cfg_lensrl)
      data["CFG_RCLASS"] = SenzingTypeDef::to_json_data(cfg_rclass)
      data["CFG_RTYPE"] = SenzingTypeDef::to_json_data(cfg_rtype)
      data["CFG_SFCALL"] = SenzingTypeDef::to_json_data(cfg_sfcall)
      data["CFG_SFUNC"] = SenzingTypeDef::to_json_data(cfg_sfunc)
      data["CONFIG_BASE_VERSION"] = SenzingTypeDef::to_json_data(config_base_version)
      data["SYS_OOM"] = SenzingTypeDef::to_json_data(sys_oom)
      data
    end
  end

  class GetConfig
    attr_accessor :g2_config

    def self.from_json_data(data)
      out = GetConfig.new
      out.g2_config = SenzingTypeDef::from_json_data(G2config, data["G2_CONFIG"])
      out
    end

    def to_json_data
      data = {}
      data["G2_CONFIG"] = SenzingTypeDef::to_json_data(g2_config)
      data
    end
  end

  class GetDataSourceRegistry
    attr_accessor :data_sources

    def self.from_json_data(data)
      out = GetDataSourceRegistry.new
      out.data_sources = SenzingTypeDef::from_json_data(Array[DataSource], data["DATA_SOURCES"])
      out
    end

    def to_json_data
      data = {}
      data["DATA_SOURCES"] = SenzingTypeDef::to_json_data(data_sources)
      data
    end
  end

  class GetFeature
    attr_accessor :elements
    attr_accessor :ftype_code
    attr_accessor :lib_feat_id

    def self.from_json_data(data)
      out = GetFeature.new
      out.elements = SenzingTypeDef::from_json_data(Array[Feature], data["ELEMENTS"])
      out.ftype_code = SenzingTypeDef::from_json_data(String, data["FTYPE_CODE"])
      out.lib_feat_id = SenzingTypeDef::from_json_data(Integer, data["LIB_FEAT_ID"])
      out
    end

    def to_json_data
      data = {}
      data["ELEMENTS"] = SenzingTypeDef::to_json_data(elements)
      data["FTYPE_CODE"] = SenzingTypeDef::to_json_data(ftype_code)
      data["LIB_FEAT_ID"] = SenzingTypeDef::to_json_data(lib_feat_id)
      data
    end
  end

  class How
    attr_accessor :how_results

    def self.from_json_data(data)
      out = How.new
      out.how_results = SenzingTypeDef::from_json_data(HowResults, data["HOW_RESULTS"])
      out
    end

    def to_json_data
      data = {}
      data["HOW_RESULTS"] = SenzingTypeDef::to_json_data(how_results)
      data
    end
  end

  class HowResults
    attr_accessor :final_state
    attr_accessor :resolution_steps

    def self.from_json_data(data)
      out = HowResults.new
      out.final_state = SenzingTypeDef::from_json_data(FinalState, data["FINAL_STATE"])
      out.resolution_steps = SenzingTypeDef::from_json_data(ResolutionSteps, data["RESOLUTION_STEPS"])
      out
    end

    def to_json_data
      data = {}
      data["FINAL_STATE"] = SenzingTypeDef::to_json_data(final_state)
      data["RESOLUTION_STEPS"] = SenzingTypeDef::to_json_data(resolution_steps)
      data
    end
  end

  class Interesting
    attr_accessor :interesting_entities

    def self.from_json_data(data)
      out = Interesting.new
      out.interesting_entities = SenzingTypeDef::from_json_data(InterestingEntities, data["INTERESTING_ENTITIES"])
      out
    end

    def to_json_data
      data = {}
      data["INTERESTING_ENTITIES"] = SenzingTypeDef::to_json_data(interesting_entities)
      data
    end
  end

  class InterestingEntities
    attr_accessor :entities
    attr_accessor :notices

    def self.from_json_data(data)
      out = InterestingEntities.new
      out.entities = SenzingTypeDef::from_json_data(Array[InterestingEntity], data["ENTITIES"])
      out.notices = SenzingTypeDef::from_json_data(Notices, data["NOTICES"])
      out
    end

    def to_json_data
      data = {}
      data["ENTITIES"] = SenzingTypeDef::to_json_data(entities)
      data["NOTICES"] = SenzingTypeDef::to_json_data(notices)
      data
    end
  end

  class InterestingEntitySampleRecords
    attr_accessor :data_source
    attr_accessor :flags
    attr_accessor :record_id

    def self.from_json_data(data)
      out = InterestingEntitySampleRecords.new
      out.data_source = SenzingTypeDef::from_json_data(String, data["DATA_SOURCE"])
      out.flags = SenzingTypeDef::from_json_data(Array[String], data["FLAGS"])
      out.record_id = SenzingTypeDef::from_json_data(String, data["RECORD_ID"])
      out
    end

    def to_json_data
      data = {}
      data["DATA_SOURCE"] = SenzingTypeDef::to_json_data(data_source)
      data["FLAGS"] = SenzingTypeDef::to_json_data(flags)
      data["RECORD_ID"] = SenzingTypeDef::to_json_data(record_id)
      data
    end
  end

  class InterestingEntity
    attr_accessor :degrees

    # The ENTITY_ID is the Senzing-generated identifier for the discovered
    # entity. It may change when new information is added.
    attr_accessor :entity_id
    attr_accessor :flags
    attr_accessor :sample_records

    def self.from_json_data(data)
      out = InterestingEntity.new
      out.degrees = SenzingTypeDef::from_json_data(Integer, data["DEGREES"])
      out.entity_id = SenzingTypeDef::from_json_data(Integer, data["ENTITY_ID"])
      out.flags = SenzingTypeDef::from_json_data(Array[String], data["FLAGS"])
      out.sample_records = SenzingTypeDef::from_json_data(Array[InterestingEntitySampleRecords], data["SAMPLE_RECORDS"])
      out
    end

    def to_json_data
      data = {}
      data["DEGREES"] = SenzingTypeDef::to_json_data(degrees)
      data["ENTITY_ID"] = SenzingTypeDef::to_json_data(entity_id)
      data["FLAGS"] = SenzingTypeDef::to_json_data(flags)
      data["SAMPLE_RECORDS"] = SenzingTypeDef::to_json_data(sample_records)
      data
    end
  end

  class MatchInfoDisclosedRelationsRelAnchor
    attr_accessor :domain
    attr_accessor :feat_desc
    attr_accessor :feat_id
    attr_accessor :linked_feat_desc
    attr_accessor :linked_feat_id
    attr_accessor :linked_feat_type
    attr_accessor :linked_feat_usage_type

    def self.from_json_data(data)
      out = MatchInfoDisclosedRelationsRelAnchor.new
      out.domain = SenzingTypeDef::from_json_data(String, data["DOMAIN"])
      out.feat_desc = SenzingTypeDef::from_json_data(String, data["FEAT_DESC"])
      out.feat_id = SenzingTypeDef::from_json_data(Integer, data["FEAT_ID"])
      out.linked_feat_desc = SenzingTypeDef::from_json_data(String, data["LINKED_FEAT_DESC"])
      out.linked_feat_id = SenzingTypeDef::from_json_data(Integer, data["LINKED_FEAT_ID"])
      out.linked_feat_type = SenzingTypeDef::from_json_data(String, data["LINKED_FEAT_TYPE"])
      out.linked_feat_usage_type = SenzingTypeDef::from_json_data(String, data["LINKED_FEAT_USAGE_TYPE"])
      out
    end

    def to_json_data
      data = {}
      data["DOMAIN"] = SenzingTypeDef::to_json_data(domain)
      data["FEAT_DESC"] = SenzingTypeDef::to_json_data(feat_desc)
      data["FEAT_ID"] = SenzingTypeDef::to_json_data(feat_id)
      data["LINKED_FEAT_DESC"] = SenzingTypeDef::to_json_data(linked_feat_desc)
      data["LINKED_FEAT_ID"] = SenzingTypeDef::to_json_data(linked_feat_id)
      data["LINKED_FEAT_TYPE"] = SenzingTypeDef::to_json_data(linked_feat_type)
      data["LINKED_FEAT_USAGE_TYPE"] = SenzingTypeDef::to_json_data(linked_feat_usage_type)
      data
    end
  end

  class MatchInfoDisclosedRelationsRelLink
    attr_accessor :domain
    attr_accessor :feat_desc
    attr_accessor :feat_id
    attr_accessor :feat_usage_type
    attr_accessor :linked_feat_desc
    attr_accessor :linked_feat_id
    attr_accessor :linked_feat_type
    attr_accessor :linked_feat_usage_type

    def self.from_json_data(data)
      out = MatchInfoDisclosedRelationsRelLink.new
      out.domain = SenzingTypeDef::from_json_data(String, data["DOMAIN"])
      out.feat_desc = SenzingTypeDef::from_json_data(String, data["FEAT_DESC"])
      out.feat_id = SenzingTypeDef::from_json_data(Integer, data["FEAT_ID"])
      out.feat_usage_type = SenzingTypeDef::from_json_data(String, data["FEAT_USAGE_TYPE"])
      out.linked_feat_desc = SenzingTypeDef::from_json_data(String, data["LINKED_FEAT_DESC"])
      out.linked_feat_id = SenzingTypeDef::from_json_data(Integer, data["LINKED_FEAT_ID"])
      out.linked_feat_type = SenzingTypeDef::from_json_data(String, data["LINKED_FEAT_TYPE"])
      out.linked_feat_usage_type = SenzingTypeDef::from_json_data(String, data["LINKED_FEAT_USAGE_TYPE"])
      out
    end

    def to_json_data
      data = {}
      data["DOMAIN"] = SenzingTypeDef::to_json_data(domain)
      data["FEAT_DESC"] = SenzingTypeDef::to_json_data(feat_desc)
      data["FEAT_ID"] = SenzingTypeDef::to_json_data(feat_id)
      data["FEAT_USAGE_TYPE"] = SenzingTypeDef::to_json_data(feat_usage_type)
      data["LINKED_FEAT_DESC"] = SenzingTypeDef::to_json_data(linked_feat_desc)
      data["LINKED_FEAT_ID"] = SenzingTypeDef::to_json_data(linked_feat_id)
      data["LINKED_FEAT_TYPE"] = SenzingTypeDef::to_json_data(linked_feat_type)
      data["LINKED_FEAT_USAGE_TYPE"] = SenzingTypeDef::to_json_data(linked_feat_usage_type)
      data
    end
  end

  class MatchInfoDisclosedRelationsRelPointer
    attr_accessor :domain
    attr_accessor :feat_desc
    attr_accessor :feat_id
    attr_accessor :feat_usage_type
    attr_accessor :linked_feat_desc
    attr_accessor :linked_feat_id
    attr_accessor :linked_feat_type

    def self.from_json_data(data)
      out = MatchInfoDisclosedRelationsRelPointer.new
      out.domain = SenzingTypeDef::from_json_data(String, data["DOMAIN"])
      out.feat_desc = SenzingTypeDef::from_json_data(String, data["FEAT_DESC"])
      out.feat_id = SenzingTypeDef::from_json_data(Integer, data["FEAT_ID"])
      out.feat_usage_type = SenzingTypeDef::from_json_data(String, data["FEAT_USAGE_TYPE"])
      out.linked_feat_desc = SenzingTypeDef::from_json_data(String, data["LINKED_FEAT_DESC"])
      out.linked_feat_id = SenzingTypeDef::from_json_data(Integer, data["LINKED_FEAT_ID"])
      out.linked_feat_type = SenzingTypeDef::from_json_data(String, data["LINKED_FEAT_TYPE"])
      out
    end

    def to_json_data
      data = {}
      data["DOMAIN"] = SenzingTypeDef::to_json_data(domain)
      data["FEAT_DESC"] = SenzingTypeDef::to_json_data(feat_desc)
      data["FEAT_ID"] = SenzingTypeDef::to_json_data(feat_id)
      data["FEAT_USAGE_TYPE"] = SenzingTypeDef::to_json_data(feat_usage_type)
      data["LINKED_FEAT_DESC"] = SenzingTypeDef::to_json_data(linked_feat_desc)
      data["LINKED_FEAT_ID"] = SenzingTypeDef::to_json_data(linked_feat_id)
      data["LINKED_FEAT_TYPE"] = SenzingTypeDef::to_json_data(linked_feat_type)
      data
    end
  end

  class MatchInfoDisclosedRelations
    attr_accessor :rel_anchor
    attr_accessor :rel_link
    attr_accessor :rel_pointer

    def self.from_json_data(data)
      out = MatchInfoDisclosedRelations.new
      out.rel_anchor = SenzingTypeDef::from_json_data(Array[MatchInfoDisclosedRelationsRelAnchor], data["REL_ANCHOR"])
      out.rel_link = SenzingTypeDef::from_json_data(Array[MatchInfoDisclosedRelationsRelLink], data["REL_LINK"])
      out.rel_pointer = SenzingTypeDef::from_json_data(Array[MatchInfoDisclosedRelationsRelPointer], data["REL_POINTER"])
      out
    end

    def to_json_data
      data = {}
      data["REL_ANCHOR"] = SenzingTypeDef::to_json_data(rel_anchor)
      data["REL_LINK"] = SenzingTypeDef::to_json_data(rel_link)
      data["REL_POINTER"] = SenzingTypeDef::to_json_data(rel_pointer)
      data
    end
  end

  class MatchInfo
    attr_accessor :candidate_keys
    attr_accessor :disclosed_relations
    attr_accessor :errule_code
    attr_accessor :feature_scores
    attr_accessor :match_key
    attr_accessor :match_level
    attr_accessor :match_level_code
    attr_accessor :why_errule_code
    attr_accessor :why_key

    def self.from_json_data(data)
      out = MatchInfo.new
      out.candidate_keys = SenzingTypeDef::from_json_data(MatchInfoCandidateKeys, data["CANDIDATE_KEYS"])
      out.disclosed_relations = SenzingTypeDef::from_json_data(MatchInfoDisclosedRelations, data["DISCLOSED_RELATIONS"])
      out.errule_code = SenzingTypeDef::from_json_data(String, data["ERRULE_CODE"])
      out.feature_scores = SenzingTypeDef::from_json_data(FeatureScores, data["FEATURE_SCORES"])
      out.match_key = SenzingTypeDef::from_json_data(String, data["MATCH_KEY"])
      out.match_level = SenzingTypeDef::from_json_data(Integer, data["MATCH_LEVEL"])
      out.match_level_code = SenzingTypeDef::from_json_data(String, data["MATCH_LEVEL_CODE"])
      out.why_errule_code = SenzingTypeDef::from_json_data(String, data["WHY_ERRULE_CODE"])
      out.why_key = SenzingTypeDef::from_json_data(String, data["WHY_KEY"])
      out
    end

    def to_json_data
      data = {}
      data["CANDIDATE_KEYS"] = SenzingTypeDef::to_json_data(candidate_keys)
      data["DISCLOSED_RELATIONS"] = SenzingTypeDef::to_json_data(disclosed_relations)
      data["ERRULE_CODE"] = SenzingTypeDef::to_json_data(errule_code)
      data["FEATURE_SCORES"] = SenzingTypeDef::to_json_data(feature_scores)
      data["MATCH_KEY"] = SenzingTypeDef::to_json_data(match_key)
      data["MATCH_LEVEL"] = SenzingTypeDef::to_json_data(match_level)
      data["MATCH_LEVEL_CODE"] = SenzingTypeDef::to_json_data(match_level_code)
      data["WHY_ERRULE_CODE"] = SenzingTypeDef::to_json_data(why_errule_code)
      data["WHY_KEY"] = SenzingTypeDef::to_json_data(why_key)
      data
    end
  end

  class MatchInfoCandidateKeys
    attr_accessor :value

    def self.from_json_data(data)
      out = MatchInfoCandidateKeys.new
      out.value = SenzingTypeDef.from_json_data(String, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class MatchInfoForAttribute
    attr_accessor :feat_desc
    attr_accessor :feat_id

    def self.from_json_data(data)
      out = MatchInfoForAttribute.new
      out.feat_desc = SenzingTypeDef::from_json_data(String, data["FEAT_DESC"])
      out.feat_id = SenzingTypeDef::from_json_data(Integer, data["FEAT_ID"])
      out
    end

    def to_json_data
      data = {}
      data["FEAT_DESC"] = SenzingTypeDef::to_json_data(feat_desc)
      data["FEAT_ID"] = SenzingTypeDef::to_json_data(feat_id)
      data
    end
  end

  class MemberRecord
    attr_accessor :internal_id
    attr_accessor :records

    def self.from_json_data(data)
      out = MemberRecord.new
      out.internal_id = SenzingTypeDef::from_json_data(Integer, data["INTERNAL_ID"])
      out.records = SenzingTypeDef::from_json_data(Records, data["RECORDS"])
      out
    end

    def to_json_data
      data = {}
      data["INTERNAL_ID"] = SenzingTypeDef::to_json_data(internal_id)
      data["RECORDS"] = SenzingTypeDef::to_json_data(records)
      data
    end
  end

  class MemberRecords
    attr_accessor :value

    def self.from_json_data(data)
      out = MemberRecords.new
      out.value = SenzingTypeDef.from_json_data(Array[MemberRecord], data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class Network
    attr_accessor :entities
    attr_accessor :entity_paths
    attr_accessor :max_entity_limit_reached

    def self.from_json_data(data)
      out = Network.new
      out.entities = SenzingTypeDef::from_json_data(Array[Entity], data["ENTITIES"])
      out.entity_paths = SenzingTypeDef::from_json_data(Array[EntityPath], data["ENTITY_PATHS"])
      out.max_entity_limit_reached = SenzingTypeDef::from_json_data(String, data["MAX_ENTITY_LIMIT_REACHED"])
      out
    end

    def to_json_data
      data = {}
      data["ENTITIES"] = SenzingTypeDef::to_json_data(entities)
      data["ENTITY_PATHS"] = SenzingTypeDef::to_json_data(entity_paths)
      data["MAX_ENTITY_LIMIT_REACHED"] = SenzingTypeDef::to_json_data(max_entity_limit_reached)
      data
    end
  end

  class Notice
    attr_accessor :code
    attr_accessor :description

    def self.from_json_data(data)
      out = Notice.new
      out.code = SenzingTypeDef::from_json_data(String, data["CODE"])
      out.description = SenzingTypeDef::from_json_data(String, data["DESCRIPTION"])
      out
    end

    def to_json_data
      data = {}
      data["CODE"] = SenzingTypeDef::to_json_data(code)
      data["DESCRIPTION"] = SenzingTypeDef::to_json_data(description)
      data
    end
  end

  class Notices
    attr_accessor :value

    def self.from_json_data(data)
      out = Notices.new
      out.value = SenzingTypeDef.from_json_data(Array[Notice], data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class Path
    attr_accessor :entities
    attr_accessor :entity_paths

    def self.from_json_data(data)
      out = Path.new
      out.entities = SenzingTypeDef::from_json_data(Array[Entity], data["ENTITIES"])
      out.entity_paths = SenzingTypeDef::from_json_data(Array[EntityPath], data["ENTITY_PATHS"])
      out
    end

    def to_json_data
      data = {}
      data["ENTITIES"] = SenzingTypeDef::to_json_data(entities)
      data["ENTITY_PATHS"] = SenzingTypeDef::to_json_data(entity_paths)
      data
    end
  end

  class ProductLicense
    attr_accessor :billing
    attr_accessor :contract
    attr_accessor :customer
    attr_accessor :expire_date
    attr_accessor :issue_date
    attr_accessor :license_level
    attr_accessor :license_type
    attr_accessor :record_limit

    def self.from_json_data(data)
      out = ProductLicense.new
      out.billing = SenzingTypeDef::from_json_data(String, data["billing"])
      out.contract = SenzingTypeDef::from_json_data(String, data["contract"])
      out.customer = SenzingTypeDef::from_json_data(String, data["customer"])
      out.expire_date = SenzingTypeDef::from_json_data(String, data["expireDate"])
      out.issue_date = SenzingTypeDef::from_json_data(String, data["issueDate"])
      out.license_level = SenzingTypeDef::from_json_data(String, data["licenseLevel"])
      out.license_type = SenzingTypeDef::from_json_data(String, data["licenseType"])
      out.record_limit = SenzingTypeDef::from_json_data(Integer, data["recordLimit"])
      out
    end

    def to_json_data
      data = {}
      data["billing"] = SenzingTypeDef::to_json_data(billing)
      data["contract"] = SenzingTypeDef::to_json_data(contract)
      data["customer"] = SenzingTypeDef::to_json_data(customer)
      data["expireDate"] = SenzingTypeDef::to_json_data(expire_date)
      data["issueDate"] = SenzingTypeDef::to_json_data(issue_date)
      data["licenseLevel"] = SenzingTypeDef::to_json_data(license_level)
      data["licenseType"] = SenzingTypeDef::to_json_data(license_type)
      data["recordLimit"] = SenzingTypeDef::to_json_data(record_limit)
      data
    end
  end

  class ProductVersion
    attr_accessor :build_date
    attr_accessor :build_number
    attr_accessor :build_version
    attr_accessor :compatibility_version
    attr_accessor :product_name
    attr_accessor :schema_version
    attr_accessor :version

    def self.from_json_data(data)
      out = ProductVersion.new
      out.build_date = SenzingTypeDef::from_json_data(String, data["BUILD_DATE"])
      out.build_number = SenzingTypeDef::from_json_data(String, data["BUILD_NUMBER"])
      out.build_version = SenzingTypeDef::from_json_data(String, data["BUILD_VERSION"])
      out.compatibility_version = SenzingTypeDef::from_json_data(CompatibilityVersion, data["COMPATIBILITY_VERSION"])
      out.product_name = SenzingTypeDef::from_json_data(String, data["PRODUCT_NAME"])
      out.schema_version = SenzingTypeDef::from_json_data(SchemaVersion, data["SCHEMA_VERSION"])
      out.version = SenzingTypeDef::from_json_data(String, data["VERSION"])
      out
    end

    def to_json_data
      data = {}
      data["BUILD_DATE"] = SenzingTypeDef::to_json_data(build_date)
      data["BUILD_NUMBER"] = SenzingTypeDef::to_json_data(build_number)
      data["BUILD_VERSION"] = SenzingTypeDef::to_json_data(build_version)
      data["COMPATIBILITY_VERSION"] = SenzingTypeDef::to_json_data(compatibility_version)
      data["PRODUCT_NAME"] = SenzingTypeDef::to_json_data(product_name)
      data["SCHEMA_VERSION"] = SenzingTypeDef::to_json_data(schema_version)
      data["VERSION"] = SenzingTypeDef::to_json_data(version)
      data
    end
  end

  class RecordFeatures
    attr_accessor :lib_feat_id
    attr_accessor :usage_type

    def self.from_json_data(data)
      out = RecordFeatures.new
      out.lib_feat_id = SenzingTypeDef::from_json_data(Integer, data["LIB_FEAT_ID"])
      out.usage_type = SenzingTypeDef::from_json_data(String, data["USAGE_TYPE"])
      out
    end

    def to_json_data
      data = {}
      data["LIB_FEAT_ID"] = SenzingTypeDef::to_json_data(lib_feat_id)
      data["USAGE_TYPE"] = SenzingTypeDef::to_json_data(usage_type)
      data
    end
  end

  class Record
    attr_accessor :address_data
    attr_accessor :attribute_data
    attr_accessor :data_source
    attr_accessor :entity_data
    attr_accessor :entity_desc
    attr_accessor :entity_key
    attr_accessor :entity_type
    attr_accessor :errule_code
    attr_accessor :features
    attr_accessor :identifier_data
    attr_accessor :internal_id
    attr_accessor :json_data
    attr_accessor :last_seen_dt
    attr_accessor :match_key
    attr_accessor :match_level
    attr_accessor :match_level_code
    attr_accessor :name_data
    attr_accessor :other_data
    attr_accessor :phone_data
    attr_accessor :record_id
    attr_accessor :relationship_data

    def self.from_json_data(data)
      out = Record.new
      out.address_data = SenzingTypeDef::from_json_data(Array[String], data["ADDRESS_DATA"])
      out.attribute_data = SenzingTypeDef::from_json_data(Array[String], data["ATTRIBUTE_DATA"])
      out.data_source = SenzingTypeDef::from_json_data(String, data["DATA_SOURCE"])
      out.entity_data = SenzingTypeDef::from_json_data(Array[String], data["ENTITY_DATA"])
      out.entity_desc = SenzingTypeDef::from_json_data(String, data["ENTITY_DESC"])
      out.entity_key = SenzingTypeDef::from_json_data(String, data["ENTITY_KEY"])
      out.entity_type = SenzingTypeDef::from_json_data(String, data["ENTITY_TYPE"])
      out.errule_code = SenzingTypeDef::from_json_data(String, data["ERRULE_CODE"])
      out.features = SenzingTypeDef::from_json_data(Array[RecordFeatures], data["FEATURES"])
      out.identifier_data = SenzingTypeDef::from_json_data(Array[String], data["IDENTIFIER_DATA"])
      out.internal_id = SenzingTypeDef::from_json_data(Integer, data["INTERNAL_ID"])
      out.json_data = SenzingTypeDef::from_json_data(String, data["JSON_DATA"])
      out.last_seen_dt = SenzingTypeDef::from_json_data(DateTime, data["LAST_SEEN_DT"])
      out.match_key = SenzingTypeDef::from_json_data(String, data["MATCH_KEY"])
      out.match_level = SenzingTypeDef::from_json_data(Integer, data["MATCH_LEVEL"])
      out.match_level_code = SenzingTypeDef::from_json_data(String, data["MATCH_LEVEL_CODE"])
      out.name_data = SenzingTypeDef::from_json_data(Array[String], data["NAME_DATA"])
      out.other_data = SenzingTypeDef::from_json_data(Array[String], data["OTHER_DATA"])
      out.phone_data = SenzingTypeDef::from_json_data(Array[String], data["PHONE_DATA"])
      out.record_id = SenzingTypeDef::from_json_data(String, data["RECORD_ID"])
      out.relationship_data = SenzingTypeDef::from_json_data(Array[String], data["RELATIONSHIP_DATA"])
      out
    end

    def to_json_data
      data = {}
      data["ADDRESS_DATA"] = SenzingTypeDef::to_json_data(address_data)
      data["ATTRIBUTE_DATA"] = SenzingTypeDef::to_json_data(attribute_data)
      data["DATA_SOURCE"] = SenzingTypeDef::to_json_data(data_source)
      data["ENTITY_DATA"] = SenzingTypeDef::to_json_data(entity_data)
      data["ENTITY_DESC"] = SenzingTypeDef::to_json_data(entity_desc)
      data["ENTITY_KEY"] = SenzingTypeDef::to_json_data(entity_key)
      data["ENTITY_TYPE"] = SenzingTypeDef::to_json_data(entity_type)
      data["ERRULE_CODE"] = SenzingTypeDef::to_json_data(errule_code)
      data["FEATURES"] = SenzingTypeDef::to_json_data(features)
      data["IDENTIFIER_DATA"] = SenzingTypeDef::to_json_data(identifier_data)
      data["INTERNAL_ID"] = SenzingTypeDef::to_json_data(internal_id)
      data["JSON_DATA"] = SenzingTypeDef::to_json_data(json_data)
      data["LAST_SEEN_DT"] = SenzingTypeDef::to_json_data(last_seen_dt)
      data["MATCH_KEY"] = SenzingTypeDef::to_json_data(match_key)
      data["MATCH_LEVEL"] = SenzingTypeDef::to_json_data(match_level)
      data["MATCH_LEVEL_CODE"] = SenzingTypeDef::to_json_data(match_level_code)
      data["NAME_DATA"] = SenzingTypeDef::to_json_data(name_data)
      data["OTHER_DATA"] = SenzingTypeDef::to_json_data(other_data)
      data["PHONE_DATA"] = SenzingTypeDef::to_json_data(phone_data)
      data["RECORD_ID"] = SenzingTypeDef::to_json_data(record_id)
      data["RELATIONSHIP_DATA"] = SenzingTypeDef::to_json_data(relationship_data)
      data
    end
  end

  class RecordSummaryElement
    attr_accessor :data_source
    attr_accessor :first_seen_dt
    attr_accessor :last_seen_dt
    attr_accessor :record_count

    def self.from_json_data(data)
      out = RecordSummaryElement.new
      out.data_source = SenzingTypeDef::from_json_data(String, data["DATA_SOURCE"])
      out.first_seen_dt = SenzingTypeDef::from_json_data(DateTime, data["FIRST_SEEN_DT"])
      out.last_seen_dt = SenzingTypeDef::from_json_data(DateTime, data["LAST_SEEN_DT"])
      out.record_count = SenzingTypeDef::from_json_data(Integer, data["RECORD_COUNT"])
      out
    end

    def to_json_data
      data = {}
      data["DATA_SOURCE"] = SenzingTypeDef::to_json_data(data_source)
      data["FIRST_SEEN_DT"] = SenzingTypeDef::to_json_data(first_seen_dt)
      data["LAST_SEEN_DT"] = SenzingTypeDef::to_json_data(last_seen_dt)
      data["RECORD_COUNT"] = SenzingTypeDef::to_json_data(record_count)
      data
    end
  end

  class Records
    attr_accessor :value

    def self.from_json_data(data)
      out = Records.new
      out.value = SenzingTypeDef.from_json_data(Array[Record], data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class RedoRecord
    attr_accessor :value

    def self.from_json_data(data)
      out = RedoRecord.new
      out.value = SenzingTypeDef.from_json_data(FixmeUnknown, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class RegisterDataSource
    attr_accessor :dsrc_id

    def self.from_json_data(data)
      out = RegisterDataSource.new
      out.dsrc_id = SenzingTypeDef::from_json_data(Integer, data["DSRC_ID"])
      out
    end

    def to_json_data
      data = {}
      data["DSRC_ID"] = SenzingTypeDef::to_json_data(dsrc_id)
      data
    end
  end

  class RelatedEntity
    # The ENTITY_ID is the Senzing-generated identifier for the discovered
    # entity. It may change when new information is added.
    attr_accessor :entity_id
    attr_accessor :entity_name
    attr_accessor :errule_code
    attr_accessor :is_ambiguous
    attr_accessor :is_disclosed
    attr_accessor :last_seen_dt
    attr_accessor :match_key
    attr_accessor :match_level
    attr_accessor :match_level_code
    attr_accessor :records
    attr_accessor :record_summary

    def self.from_json_data(data)
      out = RelatedEntity.new
      out.entity_id = SenzingTypeDef::from_json_data(Integer, data["ENTITY_ID"])
      out.entity_name = SenzingTypeDef::from_json_data(String, data["ENTITY_NAME"])
      out.errule_code = SenzingTypeDef::from_json_data(String, data["ERRULE_CODE"])
      out.is_ambiguous = SenzingTypeDef::from_json_data(Integer, data["IS_AMBIGUOUS"])
      out.is_disclosed = SenzingTypeDef::from_json_data(Integer, data["IS_DISCLOSED"])
      out.last_seen_dt = SenzingTypeDef::from_json_data(DateTime, data["LAST_SEEN_DT"])
      out.match_key = SenzingTypeDef::from_json_data(String, data["MATCH_KEY"])
      out.match_level = SenzingTypeDef::from_json_data(Integer, data["MATCH_LEVEL"])
      out.match_level_code = SenzingTypeDef::from_json_data(String, data["MATCH_LEVEL_CODE"])
      out.records = SenzingTypeDef::from_json_data(Records, data["RECORDS"])
      out.record_summary = SenzingTypeDef::from_json_data(Array[RecordSummaryElement], data["RECORD_SUMMARY"])
      out
    end

    def to_json_data
      data = {}
      data["ENTITY_ID"] = SenzingTypeDef::to_json_data(entity_id)
      data["ENTITY_NAME"] = SenzingTypeDef::to_json_data(entity_name)
      data["ERRULE_CODE"] = SenzingTypeDef::to_json_data(errule_code)
      data["IS_AMBIGUOUS"] = SenzingTypeDef::to_json_data(is_ambiguous)
      data["IS_DISCLOSED"] = SenzingTypeDef::to_json_data(is_disclosed)
      data["LAST_SEEN_DT"] = SenzingTypeDef::to_json_data(last_seen_dt)
      data["MATCH_KEY"] = SenzingTypeDef::to_json_data(match_key)
      data["MATCH_LEVEL"] = SenzingTypeDef::to_json_data(match_level)
      data["MATCH_LEVEL_CODE"] = SenzingTypeDef::to_json_data(match_level_code)
      data["RECORDS"] = SenzingTypeDef::to_json_data(records)
      data["RECORD_SUMMARY"] = SenzingTypeDef::to_json_data(record_summary)
      data
    end
  end

  class Repository
    attr_accessor :id
    attr_accessor :location
    attr_accessor :type

    def self.from_json_data(data)
      out = Repository.new
      out.id = SenzingTypeDef::from_json_data(String, data["id"])
      out.location = SenzingTypeDef::from_json_data(String, data["location"])
      out.type = SenzingTypeDef::from_json_data(String, data["type"])
      out
    end

    def to_json_data
      data = {}
      data["id"] = SenzingTypeDef::to_json_data(id)
      data["location"] = SenzingTypeDef::to_json_data(location)
      data["type"] = SenzingTypeDef::to_json_data(type)
      data
    end
  end

  class RepositoryInfo
    attr_accessor :data_stores

    def self.from_json_data(data)
      out = RepositoryInfo.new
      out.data_stores = SenzingTypeDef::from_json_data(Array[Repository], data["dataStores"])
      out
    end

    def to_json_data
      data = {}
      data["dataStores"] = SenzingTypeDef::to_json_data(data_stores)
      data
    end
  end

  class RepositoryPerformance
    attr_accessor :insert_time
    attr_accessor :num_records_inserted

    def self.from_json_data(data)
      out = RepositoryPerformance.new
      out.insert_time = SenzingTypeDef::from_json_data(Integer, data["insertTime"])
      out.num_records_inserted = SenzingTypeDef::from_json_data(Integer, data["numRecordsInserted"])
      out
    end

    def to_json_data
      data = {}
      data["insertTime"] = SenzingTypeDef::to_json_data(insert_time)
      data["numRecordsInserted"] = SenzingTypeDef::to_json_data(num_records_inserted)
      data
    end
  end

  class ResolutionStep
    attr_accessor :inbound_virtual_entity_id
    attr_accessor :match_info
    attr_accessor :result_virtual_entity_id
    attr_accessor :step
    attr_accessor :virtual_entity
    attr_accessor :virtual_entity0

    def self.from_json_data(data)
      out = ResolutionStep.new
      out.inbound_virtual_entity_id = SenzingTypeDef::from_json_data(String, data["INBOUND_VIRTUAL_ENTITY_ID"])
      out.match_info = SenzingTypeDef::from_json_data(MatchInfo, data["MATCH_INFO"])
      out.result_virtual_entity_id = SenzingTypeDef::from_json_data(String, data["RESULT_VIRTUAL_ENTITY_ID"])
      out.step = SenzingTypeDef::from_json_data(Integer, data["STEP"])
      out.virtual_entity = SenzingTypeDef::from_json_data(VirtualEntitySynopsis, data["VIRTUAL_ENTITY_1"])
      out.virtual_entity0 = SenzingTypeDef::from_json_data(VirtualEntitySynopsis, data["VIRTUAL_ENTITY_2"])
      out
    end

    def to_json_data
      data = {}
      data["INBOUND_VIRTUAL_ENTITY_ID"] = SenzingTypeDef::to_json_data(inbound_virtual_entity_id)
      data["MATCH_INFO"] = SenzingTypeDef::to_json_data(match_info)
      data["RESULT_VIRTUAL_ENTITY_ID"] = SenzingTypeDef::to_json_data(result_virtual_entity_id)
      data["STEP"] = SenzingTypeDef::to_json_data(step)
      data["VIRTUAL_ENTITY_1"] = SenzingTypeDef::to_json_data(virtual_entity)
      data["VIRTUAL_ENTITY_2"] = SenzingTypeDef::to_json_data(virtual_entity0)
      data
    end
  end

  class ResolutionSteps
    attr_accessor :value

    def self.from_json_data(data)
      out = ResolutionSteps.new
      out.value = SenzingTypeDef.from_json_data(Array[ResolutionStep], data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class ResolvedEntity
    # The ENTITY_ID is the Senzing-generated identifier for the discovered
    # entity. It may change when new information is added.
    attr_accessor :entity_id
    attr_accessor :entity_name
    attr_accessor :errule_code
    attr_accessor :features
    attr_accessor :is_ambiguous
    attr_accessor :is_disclosed
    attr_accessor :last_seen_dt
    attr_accessor :match_key
    attr_accessor :match_level
    attr_accessor :match_level_code
    attr_accessor :records
    attr_accessor :record_summary

    def self.from_json_data(data)
      out = ResolvedEntity.new
      out.entity_id = SenzingTypeDef::from_json_data(Integer, data["ENTITY_ID"])
      out.entity_name = SenzingTypeDef::from_json_data(String, data["ENTITY_NAME"])
      out.errule_code = SenzingTypeDef::from_json_data(String, data["ERRULE_CODE"])
      out.features = SenzingTypeDef::from_json_data(String, data["FEATURES"])
      out.is_ambiguous = SenzingTypeDef::from_json_data(Integer, data["IS_AMBIGUOUS"])
      out.is_disclosed = SenzingTypeDef::from_json_data(Integer, data["IS_DISCLOSED"])
      out.last_seen_dt = SenzingTypeDef::from_json_data(DateTime, data["LAST_SEEN_DT"])
      out.match_key = SenzingTypeDef::from_json_data(String, data["MATCH_KEY"])
      out.match_level = SenzingTypeDef::from_json_data(Integer, data["MATCH_LEVEL"])
      out.match_level_code = SenzingTypeDef::from_json_data(String, data["MATCH_LEVEL_CODE"])
      out.records = SenzingTypeDef::from_json_data(Records, data["RECORDS"])
      out.record_summary = SenzingTypeDef::from_json_data(Array[RecordSummaryElement], data["RECORD_SUMMARY"])
      out
    end

    def to_json_data
      data = {}
      data["ENTITY_ID"] = SenzingTypeDef::to_json_data(entity_id)
      data["ENTITY_NAME"] = SenzingTypeDef::to_json_data(entity_name)
      data["ERRULE_CODE"] = SenzingTypeDef::to_json_data(errule_code)
      data["FEATURES"] = SenzingTypeDef::to_json_data(features)
      data["IS_AMBIGUOUS"] = SenzingTypeDef::to_json_data(is_ambiguous)
      data["IS_DISCLOSED"] = SenzingTypeDef::to_json_data(is_disclosed)
      data["LAST_SEEN_DT"] = SenzingTypeDef::to_json_data(last_seen_dt)
      data["MATCH_KEY"] = SenzingTypeDef::to_json_data(match_key)
      data["MATCH_LEVEL"] = SenzingTypeDef::to_json_data(match_level)
      data["MATCH_LEVEL_CODE"] = SenzingTypeDef::to_json_data(match_level_code)
      data["RECORDS"] = SenzingTypeDef::to_json_data(records)
      data["RECORD_SUMMARY"] = SenzingTypeDef::to_json_data(record_summary)
      data
    end
  end

  class ResolvedEntityAndMatchInfoEntity
    attr_accessor :resolved_entity

    def self.from_json_data(data)
      out = ResolvedEntityAndMatchInfoEntity.new
      out.resolved_entity = SenzingTypeDef::from_json_data(ResolvedEntity, data["RESOLVED_ENTITY"])
      out
    end

    def to_json_data
      data = {}
      data["RESOLVED_ENTITY"] = SenzingTypeDef::to_json_data(resolved_entity)
      data
    end
  end

  class ResolvedEntityAndMatchInfo
    attr_accessor :entity
    attr_accessor :match_info

    def self.from_json_data(data)
      out = ResolvedEntityAndMatchInfo.new
      out.entity = SenzingTypeDef::from_json_data(ResolvedEntityAndMatchInfoEntity, data["ENTITY"])
      out.match_info = SenzingTypeDef::from_json_data(MatchInfo, data["MATCH_INFO"])
      out
    end

    def to_json_data
      data = {}
      data["ENTITY"] = SenzingTypeDef::to_json_data(entity)
      data["MATCH_INFO"] = SenzingTypeDef::to_json_data(match_info)
      data
    end
  end

  class SysOom
    attr_accessor :felem_id
    attr_accessor :ftype_id
    attr_accessor :lens_id
    attr_accessor :lib_feat_id
    attr_accessor :lib_felem_id
    attr_accessor :next_thresh
    attr_accessor :oom_level
    attr_accessor :oom_type
    attr_accessor :thresh1_cnt
    attr_accessor :thresh1_oom

    def self.from_json_data(data)
      out = SysOom.new
      out.felem_id = SenzingTypeDef::from_json_data(Integer, data["FELEM_ID"])
      out.ftype_id = SenzingTypeDef::from_json_data(Integer, data["FTYPE_ID"])
      out.lens_id = SenzingTypeDef::from_json_data(Integer, data["LENS_ID"])
      out.lib_feat_id = SenzingTypeDef::from_json_data(Integer, data["LIB_FEAT_ID"])
      out.lib_felem_id = SenzingTypeDef::from_json_data(Integer, data["LIB_FELEM_ID"])
      out.next_thresh = SenzingTypeDef::from_json_data(Integer, data["NEXT_THRESH"])
      out.oom_level = SenzingTypeDef::from_json_data(String, data["OOM_LEVEL"])
      out.oom_type = SenzingTypeDef::from_json_data(String, data["OOM_TYPE"])
      out.thresh1_cnt = SenzingTypeDef::from_json_data(Integer, data["THRESH1_CNT"])
      out.thresh1_oom = SenzingTypeDef::from_json_data(Integer, data["THRESH1_OOM"])
      out
    end

    def to_json_data
      data = {}
      data["FELEM_ID"] = SenzingTypeDef::to_json_data(felem_id)
      data["FTYPE_ID"] = SenzingTypeDef::to_json_data(ftype_id)
      data["LENS_ID"] = SenzingTypeDef::to_json_data(lens_id)
      data["LIB_FEAT_ID"] = SenzingTypeDef::to_json_data(lib_feat_id)
      data["LIB_FELEM_ID"] = SenzingTypeDef::to_json_data(lib_felem_id)
      data["NEXT_THRESH"] = SenzingTypeDef::to_json_data(next_thresh)
      data["OOM_LEVEL"] = SenzingTypeDef::to_json_data(oom_level)
      data["OOM_TYPE"] = SenzingTypeDef::to_json_data(oom_type)
      data["THRESH1_CNT"] = SenzingTypeDef::to_json_data(thresh1_cnt)
      data["THRESH1_OOM"] = SenzingTypeDef::to_json_data(thresh1_oom)
      data
    end
  end

  class SchemaVersion
    attr_accessor :engine_schema_version
    attr_accessor :maximum_required_schema_version
    attr_accessor :minimum_required_schema_version

    def self.from_json_data(data)
      out = SchemaVersion.new
      out.engine_schema_version = SenzingTypeDef::from_json_data(String, data["ENGINE_SCHEMA_VERSION"])
      out.maximum_required_schema_version = SenzingTypeDef::from_json_data(String, data["MAXIMUM_REQUIRED_SCHEMA_VERSION"])
      out.minimum_required_schema_version = SenzingTypeDef::from_json_data(String, data["MINIMUM_REQUIRED_SCHEMA_VERSION"])
      out
    end

    def to_json_data
      data = {}
      data["ENGINE_SCHEMA_VERSION"] = SenzingTypeDef::to_json_data(engine_schema_version)
      data["MAXIMUM_REQUIRED_SCHEMA_VERSION"] = SenzingTypeDef::to_json_data(maximum_required_schema_version)
      data["MINIMUM_REQUIRED_SCHEMA_VERSION"] = SenzingTypeDef::to_json_data(minimum_required_schema_version)
      data
    end
  end

  class Search
    attr_accessor :resolved_entities
    attr_accessor :search_statistics

    def self.from_json_data(data)
      out = Search.new
      out.resolved_entities = SenzingTypeDef::from_json_data(Array[ResolvedEntityAndMatchInfo], data["RESOLVED_ENTITIES"])
      out.search_statistics = SenzingTypeDef::from_json_data(SearchStatistics, data["SEARCH_STATISTICS"])
      out
    end

    def to_json_data
      data = {}
      data["RESOLVED_ENTITIES"] = SenzingTypeDef::to_json_data(resolved_entities)
      data["SEARCH_STATISTICS"] = SenzingTypeDef::to_json_data(search_statistics)
      data
    end
  end

  class SearchStatisticCandidateKeysFeatureTypes
    attr_accessor :found
    attr_accessor :ftype_code
    attr_accessor :generic
    attr_accessor :not_found

    def self.from_json_data(data)
      out = SearchStatisticCandidateKeysFeatureTypes.new
      out.found = SenzingTypeDef::from_json_data(Integer, data["FOUND"])
      out.ftype_code = SenzingTypeDef::from_json_data(String, data["FTYPE_CODE"])
      out.generic = SenzingTypeDef::from_json_data(Integer, data["GENERIC"])
      out.not_found = SenzingTypeDef::from_json_data(Integer, data["NOT_FOUND"])
      out
    end

    def to_json_data
      data = {}
      data["FOUND"] = SenzingTypeDef::to_json_data(found)
      data["FTYPE_CODE"] = SenzingTypeDef::to_json_data(ftype_code)
      data["GENERIC"] = SenzingTypeDef::to_json_data(generic)
      data["NOT_FOUND"] = SenzingTypeDef::to_json_data(not_found)
      data
    end
  end

  class SearchStatisticCandidateKeysSummary
    attr_accessor :found
    attr_accessor :generic
    attr_accessor :not_found

    def self.from_json_data(data)
      out = SearchStatisticCandidateKeysSummary.new
      out.found = SenzingTypeDef::from_json_data(Integer, data["FOUND"])
      out.generic = SenzingTypeDef::from_json_data(Integer, data["GENERIC"])
      out.not_found = SenzingTypeDef::from_json_data(Integer, data["NOT_FOUND"])
      out
    end

    def to_json_data
      data = {}
      data["FOUND"] = SenzingTypeDef::to_json_data(found)
      data["GENERIC"] = SenzingTypeDef::to_json_data(generic)
      data["NOT_FOUND"] = SenzingTypeDef::to_json_data(not_found)
      data
    end
  end

  class SearchStatisticCandidateKeys
    attr_accessor :feature_types
    attr_accessor :summary

    def self.from_json_data(data)
      out = SearchStatisticCandidateKeys.new
      out.feature_types = SenzingTypeDef::from_json_data(Array[SearchStatisticCandidateKeysFeatureTypes], data["FEATURE_TYPES"])
      out.summary = SenzingTypeDef::from_json_data(SearchStatisticCandidateKeysSummary, data["SUMMARY"])
      out
    end

    def to_json_data
      data = {}
      data["FEATURE_TYPES"] = SenzingTypeDef::to_json_data(feature_types)
      data["SUMMARY"] = SenzingTypeDef::to_json_data(summary)
      data
    end
  end

  class SearchStatistic
    attr_accessor :candidate_keys

    def self.from_json_data(data)
      out = SearchStatistic.new
      out.candidate_keys = SenzingTypeDef::from_json_data(SearchStatisticCandidateKeys, data["CANDIDATE_KEYS"])
      out
    end

    def to_json_data
      data = {}
      data["CANDIDATE_KEYS"] = SenzingTypeDef::to_json_data(candidate_keys)
      data
    end
  end

  class SearchStatistics
    attr_accessor :value

    def self.from_json_data(data)
      out = SearchStatistics.new
      out.value = SenzingTypeDef.from_json_data(Array[SearchStatistic], data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class Stats
    attr_accessor :value

    def self.from_json_data(data)
      out = Stats.new
      out.value = SenzingTypeDef.from_json_data(FixmeUnknown, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class StreamExportJSONEntity
    attr_accessor :value

    def self.from_json_data(data)
      out = StreamExportJSONEntity.new
      out.value = SenzingTypeDef.from_json_data(FixmeUnknown, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzConfigExportConfigResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzConfigExportConfigResponse.new
      out.value = SenzingTypeDef.from_json_data(ExportConfig, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzConfigGetDataSourceRegistryResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzConfigGetDataSourceRegistryResponse.new
      out.value = SenzingTypeDef.from_json_data(GetDataSourceRegistry, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzConfigManagerGetConfigRegistryResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzConfigManagerGetConfigRegistryResponse.new
      out.value = SenzingTypeDef.from_json_data(ConfigRegistry, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzConfigManagerGetConfigResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzConfigManagerGetConfigResponse.new
      out.value = SenzingTypeDef.from_json_data(GetConfig, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzConfigRegisterDataSourceResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzConfigRegisterDataSourceResponse.new
      out.value = SenzingTypeDef.from_json_data(RegisterDataSource, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzDiagnosticCheckRepositoryPerformanceResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzDiagnosticCheckRepositoryPerformanceResponse.new
      out.value = SenzingTypeDef.from_json_data(RepositoryPerformance, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzDiagnosticGetFeatureResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzDiagnosticGetFeatureResponse.new
      out.value = SenzingTypeDef.from_json_data(GetFeature, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzDiagnosticGetRepositoryInfoResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzDiagnosticGetRepositoryInfoResponse.new
      out.value = SenzingTypeDef.from_json_data(RepositoryInfo, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzEngineAddRecordResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzEngineAddRecordResponse.new
      out.value = SenzingTypeDef.from_json_data(WithInfo, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzEngineDeleteRecordResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzEngineDeleteRecordResponse.new
      out.value = SenzingTypeDef.from_json_data(WithInfo, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzEngineFetchNextResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzEngineFetchNextResponse.new
      out.value = SenzingTypeDef.from_json_data(FetchNext, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzEngineFindInterestingEntitiesByEntityIDResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzEngineFindInterestingEntitiesByEntityIDResponse.new
      out.value = SenzingTypeDef.from_json_data(Interesting, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzEngineFindInterestingEntitiesByRecordIDResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzEngineFindInterestingEntitiesByRecordIDResponse.new
      out.value = SenzingTypeDef.from_json_data(Interesting, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzEngineFindNetworkByEntityIDResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzEngineFindNetworkByEntityIDResponse.new
      out.value = SenzingTypeDef.from_json_data(Network, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzEngineFindNetworkByRecordIDResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzEngineFindNetworkByRecordIDResponse.new
      out.value = SenzingTypeDef.from_json_data(Network, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzEngineFindPathByEntityIDResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzEngineFindPathByEntityIDResponse.new
      out.value = SenzingTypeDef.from_json_data(Path, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzEngineFindPathByRecordIDResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzEngineFindPathByRecordIDResponse.new
      out.value = SenzingTypeDef.from_json_data(Path, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzEngineGetEntityByEntityIDResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzEngineGetEntityByEntityIDResponse.new
      out.value = SenzingTypeDef.from_json_data(Entity, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzEngineGetEntityByRecordIDResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzEngineGetEntityByRecordIDResponse.new
      out.value = SenzingTypeDef.from_json_data(Entity, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzEngineGetRecordResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzEngineGetRecordResponse.new
      out.value = SenzingTypeDef.from_json_data(Record, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzEngineGetRedoRecordResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzEngineGetRedoRecordResponse.new
      out.value = SenzingTypeDef.from_json_data(RedoRecord, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzEngineGetStatsResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzEngineGetStatsResponse.new
      out.value = SenzingTypeDef.from_json_data(Stats, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzEngineGetVirtualEntityByRecordIDResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzEngineGetVirtualEntityByRecordIDResponse.new
      out.value = SenzingTypeDef.from_json_data(VirtualEntity, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzEngineHowEntityByEntityIDResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzEngineHowEntityByEntityIDResponse.new
      out.value = SenzingTypeDef.from_json_data(How, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzEngineProcessRedoRecordResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzEngineProcessRedoRecordResponse.new
      out.value = SenzingTypeDef.from_json_data(WithInfo, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzEngineReevaluateEntityResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzEngineReevaluateEntityResponse.new
      out.value = SenzingTypeDef.from_json_data(WithInfo, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzEngineReevaluateRecordResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzEngineReevaluateRecordResponse.new
      out.value = SenzingTypeDef.from_json_data(WithInfo, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzEngineSearchByAttributesResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzEngineSearchByAttributesResponse.new
      out.value = SenzingTypeDef.from_json_data(Search, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzEngineStreamExportJSONEntityReportResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzEngineStreamExportJSONEntityReportResponse.new
      out.value = SenzingTypeDef.from_json_data(StreamExportJSONEntity, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzEngineWhyEntitiesResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzEngineWhyEntitiesResponse.new
      out.value = SenzingTypeDef.from_json_data(WhyEntities, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzEngineWhyRecordInEntityResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzEngineWhyRecordInEntityResponse.new
      out.value = SenzingTypeDef.from_json_data(WhyRecordInEntity, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzEngineWhyRecordsResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzEngineWhyRecordsResponse.new
      out.value = SenzingTypeDef.from_json_data(WhyRecords, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzProductGetLicenseResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzProductGetLicenseResponse.new
      out.value = SenzingTypeDef.from_json_data(ProductLicense, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class SzProductGetVersionResponse
    attr_accessor :value

    def self.from_json_data(data)
      out = SzProductGetVersionResponse.new
      out.value = SenzingTypeDef.from_json_data(ProductVersion, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class VirtualEntity
    attr_accessor :resolved_entity

    def self.from_json_data(data)
      out = VirtualEntity.new
      out.resolved_entity = SenzingTypeDef::from_json_data(ResolvedEntity, data["RESOLVED_ENTITY"])
      out
    end

    def to_json_data
      data = {}
      data["RESOLVED_ENTITY"] = SenzingTypeDef::to_json_data(resolved_entity)
      data
    end
  end

  class VirtualEntitySynopsis
    attr_accessor :member_records
    attr_accessor :virtual_entity_id

    def self.from_json_data(data)
      out = VirtualEntitySynopsis.new
      out.member_records = SenzingTypeDef::from_json_data(MemberRecords, data["MEMBER_RECORDS"])
      out.virtual_entity_id = SenzingTypeDef::from_json_data(String, data["VIRTUAL_ENTITY_ID"])
      out
    end

    def to_json_data
      data = {}
      data["MEMBER_RECORDS"] = SenzingTypeDef::to_json_data(member_records)
      data["VIRTUAL_ENTITY_ID"] = SenzingTypeDef::to_json_data(virtual_entity_id)
      data
    end
  end

  class WhyEntities
    attr_accessor :entities
    attr_accessor :why_results

    def self.from_json_data(data)
      out = WhyEntities.new
      out.entities = SenzingTypeDef::from_json_data(Array[Entity], data["ENTITIES"])
      out.why_results = SenzingTypeDef::from_json_data(WhyResults, data["WHY_RESULTS"])
      out
    end

    def to_json_data
      data = {}
      data["ENTITIES"] = SenzingTypeDef::to_json_data(entities)
      data["WHY_RESULTS"] = SenzingTypeDef::to_json_data(why_results)
      data
    end
  end

  class WhyRecordInEntity
    attr_accessor :value

    def self.from_json_data(data)
      out = WhyRecordInEntity.new
      out.value = SenzingTypeDef.from_json_data(FixmeUnknown, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class WhyRecords
    attr_accessor :entities
    attr_accessor :why_results

    def self.from_json_data(data)
      out = WhyRecords.new
      out.entities = SenzingTypeDef::from_json_data(Array[Entity], data["ENTITIES"])
      out.why_results = SenzingTypeDef::from_json_data(WhyResults, data["WHY_RESULTS"])
      out
    end

    def to_json_data
      data = {}
      data["ENTITIES"] = SenzingTypeDef::to_json_data(entities)
      data["WHY_RESULTS"] = SenzingTypeDef::to_json_data(why_results)
      data
    end
  end

  class WhyResult
    # The ENTITY_ID is the Senzing-generated identifier for the discovered
    # entity. It may change when new information is added.
    attr_accessor :entity_id
    attr_accessor :entity_id0
    attr_accessor :focus_records
    attr_accessor :focus_records0
    attr_accessor :internal_id
    attr_accessor :internal_id0
    attr_accessor :match_info

    def self.from_json_data(data)
      out = WhyResult.new
      out.entity_id = SenzingTypeDef::from_json_data(Integer, data["ENTITY_ID"])
      out.entity_id0 = SenzingTypeDef::from_json_data(Integer, data["ENTITY_ID_2"])
      out.focus_records = SenzingTypeDef::from_json_data(FocusRecords, data["FOCUS_RECORDS"])
      out.focus_records0 = SenzingTypeDef::from_json_data(FocusRecords, data["FOCUS_RECORDS_2"])
      out.internal_id = SenzingTypeDef::from_json_data(Integer, data["INTERNAL_ID"])
      out.internal_id0 = SenzingTypeDef::from_json_data(Integer, data["INTERNAL_ID_2"])
      out.match_info = SenzingTypeDef::from_json_data(MatchInfo, data["MATCH_INFO"])
      out
    end

    def to_json_data
      data = {}
      data["ENTITY_ID"] = SenzingTypeDef::to_json_data(entity_id)
      data["ENTITY_ID_2"] = SenzingTypeDef::to_json_data(entity_id0)
      data["FOCUS_RECORDS"] = SenzingTypeDef::to_json_data(focus_records)
      data["FOCUS_RECORDS_2"] = SenzingTypeDef::to_json_data(focus_records0)
      data["INTERNAL_ID"] = SenzingTypeDef::to_json_data(internal_id)
      data["INTERNAL_ID_2"] = SenzingTypeDef::to_json_data(internal_id0)
      data["MATCH_INFO"] = SenzingTypeDef::to_json_data(match_info)
      data
    end
  end

  class WhyResults
    attr_accessor :value

    def self.from_json_data(data)
      out = WhyResults.new
      out.value = SenzingTypeDef.from_json_data(Array[WhyResult], data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class WithInfo
    attr_accessor :affected_entities
    attr_accessor :data_source
    attr_accessor :interesting_entities
    attr_accessor :record_id

    def self.from_json_data(data)
      out = WithInfo.new
      out.affected_entities = SenzingTypeDef::from_json_data(Array[AffectedEntity], data["AFFECTED_ENTITIES"])
      out.data_source = SenzingTypeDef::from_json_data(String, data["DATA_SOURCE"])
      out.interesting_entities = SenzingTypeDef::from_json_data(InterestingEntities, data["INTERESTING_ENTITIES"])
      out.record_id = SenzingTypeDef::from_json_data(String, data["RECORD_ID"])
      out
    end

    def to_json_data
      data = {}
      data["AFFECTED_ENTITIES"] = SenzingTypeDef::to_json_data(affected_entities)
      data["DATA_SOURCE"] = SenzingTypeDef::to_json_data(data_source)
      data["INTERESTING_ENTITIES"] = SenzingTypeDef::to_json_data(interesting_entities)
      data["RECORD_ID"] = SenzingTypeDef::to_json_data(record_id)
      data
    end
  end

  private

  def self.from_json_data(type, data)
    if data.nil? || [Object, TrueClass, Integer, Float, String].include?(type)
      data
    elsif type == DateTime
      DateTime.rfc3339(data)
    elsif type.is_a?(Array)
      data.map { |elem| from_json_data(type.first, elem) }
    elsif type.is_a?(Hash)
      data.transform_values { |elem| from_json_data(type.values.first, elem) }
    else
      type.from_json_data(data)
    end
  end

  def self.to_json_data(data)
    if data.nil? || [TrueClass, FalseClass, Integer, Float, String].include?(data.class)
      data
    elsif data.is_a?(DateTime)
      data.rfc3339
    elsif data.is_a?(Array)
      data.map { |elem| to_json_data(elem) }
    elsif data.is_a?(Hash)
      data.transform_values { |elem| to_json_data(elem) }
    else
      data.to_json_data
    end
  end
end
